
RM3100QUAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011034  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000138c  08011148  08011148  00021148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124d4  080124d4  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  080124d4  080124d4  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080124d4  080124d4  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124d4  080124d4  000224d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124d8  080124d8  000224d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080124dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200001e0  080126bc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  080126bc  00030780  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001917f  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fdb  00000000  00000000  00049388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0004c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  0004d790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c4a  00000000  00000000  0004ed70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147d2  00000000  00000000  000689ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfb7  00000000  00000000  0007d18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c5c  00000000  00000000  00109198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0801112c 	.word	0x0801112c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0801112c 	.word	0x0801112c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_f2uiz>:
 8000b7c:	0042      	lsls	r2, r0, #1
 8000b7e:	d20e      	bcs.n	8000b9e <__aeabi_f2uiz+0x22>
 8000b80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b84:	d30b      	bcc.n	8000b9e <__aeabi_f2uiz+0x22>
 8000b86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b8e:	d409      	bmi.n	8000ba4 <__aeabi_f2uiz+0x28>
 8000b90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b98:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9c:	4770      	bx	lr
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	4770      	bx	lr
 8000ba4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ba8:	d101      	bne.n	8000bae <__aeabi_f2uiz+0x32>
 8000baa:	0242      	lsls	r2, r0, #9
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_f2uiz+0x38>
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__popcountsi2>:
 8000bbc:	0843      	lsrs	r3, r0, #1
 8000bbe:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000bc2:	1ac0      	subs	r0, r0, r3
 8000bc4:	0883      	lsrs	r3, r0, #2
 8000bc6:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000bca:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000bce:	4418      	add	r0, r3
 8000bd0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000bd4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000bd8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000bdc:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000be0:	0e00      	lsrs	r0, r0, #24
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_d2lz>:
 8000be4:	b538      	push	{r3, r4, r5, lr}
 8000be6:	460c      	mov	r4, r1
 8000be8:	4605      	mov	r5, r0
 8000bea:	4621      	mov	r1, r4
 8000bec:	4628      	mov	r0, r5
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f7ff feed 	bl	80009d0 <__aeabi_dcmplt>
 8000bf6:	b928      	cbnz	r0, 8000c04 <__aeabi_d2lz+0x20>
 8000bf8:	4628      	mov	r0, r5
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c00:	f000 b80a 	b.w	8000c18 <__aeabi_d2ulz>
 8000c04:	4628      	mov	r0, r5
 8000c06:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c0a:	f000 f805 	bl	8000c18 <__aeabi_d2ulz>
 8000c0e:	4240      	negs	r0, r0
 8000c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c14:	bd38      	pop	{r3, r4, r5, pc}
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2ulz>:
 8000c18:	b5d0      	push	{r4, r6, r7, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <__aeabi_d2ulz+0x34>)
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	f7ff fc63 	bl	80004ec <__aeabi_dmul>
 8000c26:	f7ff ff39 	bl	8000a9c <__aeabi_d2uiz>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f7ff fbe4 	bl	80003f8 <__aeabi_ui2d>
 8000c30:	2200      	movs	r2, #0
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <__aeabi_d2ulz+0x38>)
 8000c34:	f7ff fc5a 	bl	80004ec <__aeabi_dmul>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4639      	mov	r1, r7
 8000c40:	f7ff fa9c 	bl	800017c <__aeabi_dsub>
 8000c44:	f7ff ff2a 	bl	8000a9c <__aeabi_d2uiz>
 8000c48:	4621      	mov	r1, r4
 8000c4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c4c:	3df00000 	.word	0x3df00000
 8000c50:	41f00000 	.word	0x41f00000

08000c54 <Read_ID>:
 * @param	SPI			pointer to the handle of SPI connected to Flash from which to read data
 * @param	*rxData		typedef pointer to the data to be read
 *
 * @retval	20 bytes of specific data can be read
 */
void Read_ID(SPI_HandleTypeDef *SPI, DEVICE_ID *rxData) {
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	uint8_t cmd = READ_ID;
 8000c5e:	239e      	movs	r3, #158	; 0x9e
 8000c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DEVICE_ID buff;
	uint8_t data[20];
	int i;
	FM_Enable(SPI);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f85f 	bl	8000d28 <FM_Enable>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c70:	482a      	ldr	r0, [pc, #168]	; (8000d1c <Read_ID+0xc8>)
 8000c72:	f009 faa3 	bl	800a1bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f008 fdd6 	bl	8009828 <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 300);
 8000c7c:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8000c80:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c84:	2201      	movs	r2, #1
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f00a f9e9 	bl	800b05e <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, 20, 1000);
 8000c8c:	f107 010c 	add.w	r1, r7, #12
 8000c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c94:	2214      	movs	r2, #20
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f00a fb24 	bl	800b2e4 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f008 fdc3 	bl	8009828 <HAL_Delay>
	FM_Disable(SPI);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 f85a 	bl	8000d5c <FM_Disable>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	481b      	ldr	r0, [pc, #108]	; (8000d1c <Read_ID+0xc8>)
 8000cb0:	f009 fa84 	bl	800a1bc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb8:	f008 fdb6 	bl	8009828 <HAL_Delay>
	buff.MAN_ID = data[0];
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	f887 3020 	strb.w	r3, [r7, #32]
	buff.M_TYPE = data[1];
 8000cc2:	7b7b      	ldrb	r3, [r7, #13]
 8000cc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buff.M_CAP = data[2];
 8000cc8:	7bbb      	ldrb	r3, [r7, #14]
 8000cca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buff.REM_BYTES = data[3];
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buff.EXT_ID = data[4];
 8000cd4:	7c3b      	ldrb	r3, [r7, #16]
 8000cd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buff.DEV_INFO = data[5];
 8000cda:	7c7b      	ldrb	r3, [r7, #17]
 8000cdc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
//	for (i = 6; i < 20; i++) {
//		buff.UID[i] = data[i];
//	}
	HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 8000ce0:	f107 010c 	add.w	r1, r7, #12
 8000ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce8:	2214      	movs	r2, #20
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <Read_ID+0xcc>)
 8000cec:	f00a ff0a 	bl	800bb04 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "Data received\n--------------", sizeof("Data received-----------\n"), 1000);
 8000cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf4:	221a      	movs	r2, #26
 8000cf6:	490b      	ldr	r1, [pc, #44]	; (8000d24 <Read_ID+0xd0>)
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <Read_ID+0xcc>)
 8000cfa:	f00a ff03 	bl	800bb04 <HAL_UART_Transmit>

	*rxData = buff;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	461d      	mov	r5, r3
 8000d02:	f107 0420 	add.w	r4, r7, #32
 8000d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d08:	6028      	str	r0, [r5, #0]
 8000d0a:	6069      	str	r1, [r5, #4]
 8000d0c:	60aa      	str	r2, [r5, #8]
 8000d0e:	60eb      	str	r3, [r5, #12]
 8000d10:	6820      	ldr	r0, [r4, #0]
 8000d12:	6128      	str	r0, [r5, #16]
	return;
 8000d14:	bf00      	nop
}
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	20000680 	.word	0x20000680
 8000d24:	08011148 	.word	0x08011148

08000d28 <FM_Enable>:
	FM_Enable(SPI);
	HAL_SPI_Transmit(SPI, &cmd, 1, 100);
	FM_Disable(SPI);
}

static void FM_Enable(SPI_HandleTypeDef *SPI) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if (SPI == &MAIN_FM) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <FM_Enable+0x2c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d108      	bne.n	8000d4a <FM_Enable+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <FM_Enable+0x30>)
 8000d40:	f009 fa3c 	bl	800a1bc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f008 fd6f 	bl	8009828 <HAL_Delay>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200002f4 	.word	0x200002f4
 8000d58:	40010c00 	.word	0x40010c00

08000d5c <FM_Disable>:

static void FM_Disable(SPI_HandleTypeDef *SPI) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	if (SPI == &MAIN_FM) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <FM_Disable+0x2c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d108      	bne.n	8000d7e <FM_Disable+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <FM_Disable+0x30>)
 8000d74:	f009 fa22 	bl	800a1bc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f008 fd55 	bl	8009828 <HAL_Delay>
	}

}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200002f4 	.word	0x200002f4
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	bf38      	it	cc
 8000da2:	4613      	movcc	r3, r2
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	bf28      	it	cs
 8000dc0:	4613      	movcs	r3, r2
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	fbb3 f2f2 	udiv	r2, r3, r2
 8000dde:	6839      	ldr	r1, [r7, #0]
 8000de0:	fb01 f202 	mul.w	r2, r1, r2
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	1ad3      	subs	r3, r2, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	3b01      	subs	r3, #1
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ffdf 	bl	8000dcc <lfs_aligndown>
 8000e0e:	4603      	mov	r3, r0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	fab3 f383 	clz	r3, r3
 8000e28:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff feae 	bl	8000bbc <__popcountsi2>
 8000e60:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	1ad3      	subs	r3, r2, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000e8c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ffef 	bl	8000e84 <lfs_fromle32>
 8000ea6:	4603      	mov	r3, r0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffee 	bl	8000eb0 <lfs_frombe32>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f00b fc3a 	bl	800c760 <malloc>
 8000eec:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f00b fc36 	bl	800c770 <free>
#else
    (void)p;
#endif
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68d8      	ldr	r0, [r3, #12]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	21ff      	movs	r1, #255	; 0xff
 8000f40:	f00b fc3a 	bl	800c7b8 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f64:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8000f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f6a:	441a      	add	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d80a      	bhi.n	8000f8c <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8124 	beq.w	80011c8 <lfs_bd_read+0x274>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f86:	429a      	cmp	r2, r3
 8000f88:	f0c0 811e 	bcc.w	80011c8 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8000f8c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000f90:	e11f      	b.n	80011d2 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f94:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d03f      	beq.n	800101c <lfs_bd_read+0xc8>
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d13a      	bne.n	800101c <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d232      	bcs.n	800101c <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d324      	bcc.n	800100a <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	6859      	ldr	r1, [r3, #4]
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	69b8      	ldr	r0, [r7, #24]
 8000fd2:	f7ff feec 	bl	8000dae <lfs_min>
 8000fd6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fe2:	1acb      	subs	r3, r1, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	69f8      	ldr	r0, [r7, #28]
 8000fec:	f00b fbd6 	bl	800c79c <memcpy>

                data += diff;
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001008:	e0de      	b.n	80011c8 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4619      	mov	r1, r3
 8001014:	69b8      	ldr	r0, [r7, #24]
 8001016:	f7ff feca 	bl	8000dae <lfs_min>
 800101a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001022:	429a      	cmp	r2, r3
 8001024:	d13a      	bne.n	800109c <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8001030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001032:	429a      	cmp	r2, r3
 8001034:	d232      	bcs.n	800109c <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800103c:	429a      	cmp	r2, r3
 800103e:	d324      	bcc.n	800108a <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6859      	ldr	r1, [r3, #4]
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	1acb      	subs	r3, r1, r3
 800104c:	4413      	add	r3, r2
 800104e:	4619      	mov	r1, r3
 8001050:	69b8      	ldr	r0, [r7, #24]
 8001052:	f7ff feac 	bl	8000dae <lfs_min>
 8001056:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001062:	1acb      	subs	r3, r1, r3
 8001064:	4413      	add	r3, r2
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4619      	mov	r1, r3
 800106a:	69f8      	ldr	r0, [r7, #28]
 800106c:	f00b fb96 	bl	800c79c <memcpy>

                data += diff;
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4413      	add	r3, r2
 8001076:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4413      	add	r3, r2
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001088:	e09e      	b.n	80011c8 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	4619      	mov	r1, r3
 8001094:	69b8      	ldr	r0, [r7, #24]
 8001096:	f7ff fe8a 	bl	8000dae <lfs_min>
 800109a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800109c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d336      	bcc.n	8001112 <lfs_bd_read+0x1be>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80010b0:	fb02 f201 	mul.w	r2, r2, r1
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d12b      	bne.n	8001112 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010be:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80010c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d325      	bcc.n	8001112 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	4619      	mov	r1, r3
 80010ce:	69b8      	ldr	r0, [r7, #24]
 80010d0:	f7ff fe7c 	bl	8000dcc <lfs_aligndown>
 80010d4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010da:	685c      	ldr	r4, [r3, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010ea:	47a0      	blx	r4
 80010ec:	6178      	str	r0, [r7, #20]
            if (err) {
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <lfs_bd_read+0x1a4>
                return err;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	e06c      	b.n	80011d2 <lfs_bd_read+0x27e>
            }

            data += diff;
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	4413      	add	r3, r2
 80010fe:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4413      	add	r3, r2
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8001108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8001110:	e05a      	b.n	80011c8 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00a      	beq.n	8001130 <lfs_bd_read+0x1dc>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800111e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001120:	429a      	cmp	r2, r3
 8001122:	d305      	bcc.n	8001130 <lfs_bd_read+0x1dc>
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <lfs_bd_read+0x288>)
 8001126:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <lfs_bd_read+0x28c>)
 8001128:	216b      	movs	r1, #107	; 0x6b
 800112a:	482e      	ldr	r0, [pc, #184]	; (80011e4 <lfs_bd_read+0x290>)
 800112c:	f00b fabe 	bl	800c6ac <__assert_func>
        rcache->block = block;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001134:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	4619      	mov	r1, r3
 800113e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001140:	f7ff fe44 	bl	8000dcc <lfs_aligndown>
 8001144:	4602      	mov	r2, r0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800114a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff fe4b 	bl	8000df4 <lfs_alignup>
 800115e:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4619      	mov	r1, r3
 8001168:	4610      	mov	r0, r2
 800116a:	f7ff fe20 	bl	8000dae <lfs_min>
 800116e:	4602      	mov	r2, r0
                - rcache->off,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8001174:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	4619      	mov	r1, r3
 800117e:	4610      	mov	r0, r2
 8001180:	f7ff fe15 	bl	8000dae <lfs_min>
 8001184:	4602      	mov	r2, r0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800118e:	685c      	ldr	r4, [r3, #4]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	462b      	mov	r3, r5
 80011a8:	47a0      	blx	r4
 80011aa:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	dd05      	ble.n	80011be <lfs_bd_read+0x26a>
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <lfs_bd_read+0x294>)
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <lfs_bd_read+0x28c>)
 80011b6:	2176      	movs	r1, #118	; 0x76
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <lfs_bd_read+0x290>)
 80011ba:	f00b fa77 	bl	800c6ac <__assert_func>
        if (err) {
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <lfs_bd_read+0x274>
            return err;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	e004      	b.n	80011d2 <lfs_bd_read+0x27e>
    while (size > 0) {
 80011c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f47f aee1 	bne.w	8000f92 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}
 80011da:	bf00      	nop
 80011dc:	08011168 	.word	0x08011168
 80011e0:	08011e30 	.word	0x08011e30
 80011e4:	08011198 	.word	0x08011198
 80011e8:	080111ac 	.word	0x080111ac

080011ec <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b090      	sub	sp, #64	; 0x40
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80011fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001206:	e039      	b.n	800127c <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8001208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2108      	movs	r1, #8
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fdcc 	bl	8000dae <lfs_min>
 8001216:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121c:	1ad1      	subs	r1, r2, r3
 800121e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	4413      	add	r3, r2
 8001224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001226:	9203      	str	r2, [sp, #12]
 8001228:	f107 0214 	add.w	r2, r7, #20
 800122c:	9202      	str	r2, [sp, #8]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	460b      	mov	r3, r1
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff fe8a 	bl	8000f54 <lfs_bd_read>
 8001240:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <lfs_bd_cmp+0x60>
            return err;
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	e01c      	b.n	8001286 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 800124c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	18d1      	adds	r1, r2, r3
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001258:	4618      	mov	r0, r3
 800125a:	f00b fa91 	bl	800c780 <memcmp>
 800125e:	61f8      	str	r0, [r7, #28]
        if (res) {
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	2b00      	cmp	r3, #0
 800126a:	da01      	bge.n	8001270 <lfs_bd_cmp+0x84>
 800126c:	2301      	movs	r3, #1
 800126e:	e00a      	b.n	8001286 <lfs_bd_cmp+0x9a>
 8001270:	2302      	movs	r3, #2
 8001272:	e008      	b.n	8001286 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	4413      	add	r3, r2
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800127e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001280:	429a      	cmp	r2, r3
 8001282:	d3c1      	bcc.n	8001208 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3730      	adds	r7, #48	; 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800128e:	b580      	push	{r7, lr}
 8001290:	b08e      	sub	sp, #56	; 0x38
 8001292:	af04      	add	r7, sp, #16
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
 80012a4:	e030      	b.n	8001308 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 80012a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2108      	movs	r1, #8
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fd7d 	bl	8000dae <lfs_min>
 80012b4:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	1ad1      	subs	r1, r2, r3
 80012bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	4413      	add	r3, r2
 80012c2:	6a3a      	ldr	r2, [r7, #32]
 80012c4:	9203      	str	r2, [sp, #12]
 80012c6:	f107 0214 	add.w	r2, r7, #20
 80012ca:	9202      	str	r2, [sp, #8]
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	460b      	mov	r3, r1
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f7ff fe3b 	bl	8000f54 <lfs_bd_read>
 80012de:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <lfs_bd_crc+0x5c>
            return err;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	e013      	b.n	8001312 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 80012ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f107 0114 	add.w	r1, r7, #20
 80012f2:	6a3a      	ldr	r2, [r7, #32]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f006 fd31 	bl	8007d5c <lfs_crc>
 80012fa:	4602      	mov	r2, r0
 80012fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012fe:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	4413      	add	r3, r2
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
 8001308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130c:	429a      	cmp	r2, r3
 800130e:	d3ca      	bcc.n	80012a6 <lfs_bd_crc+0x18>
    }

    return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b08c      	sub	sp, #48	; 0x30
 8001320:	af04      	add	r7, sp, #16
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001332:	d060      	beq.n	80013f6 <lfs_bd_flush+0xda>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f113 0f02 	cmn.w	r3, #2
 800133c:	d05b      	beq.n	80013f6 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001346:	429a      	cmp	r2, r3
 8001348:	d305      	bcc.n	8001356 <lfs_bd_flush+0x3a>
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <lfs_bd_flush+0xe4>)
 800134c:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <lfs_bd_flush+0xe8>)
 800134e:	21b3      	movs	r1, #179	; 0xb3
 8001350:	482d      	ldr	r0, [pc, #180]	; (8001408 <lfs_bd_flush+0xec>)
 8001352:	f00b f9ab 	bl	800c6ac <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f7ff fd46 	bl	8000df4 <lfs_alignup>
 8001368:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800136e:	689c      	ldr	r4, [r3, #8]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	6819      	ldr	r1, [r3, #0]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	462b      	mov	r3, r5
 8001386:	47a0      	blx	r4
 8001388:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd05      	ble.n	800139c <lfs_bd_flush+0x80>
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <lfs_bd_flush+0xf0>)
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <lfs_bd_flush+0xe8>)
 8001394:	21b7      	movs	r1, #183	; 0xb7
 8001396:	481c      	ldr	r0, [pc, #112]	; (8001408 <lfs_bd_flush+0xec>)
 8001398:	f00b f988 	bl	800c6ac <__assert_func>
        if (err) {
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <lfs_bd_flush+0x8a>
            return err;
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	e028      	b.n	80013f8 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f7ff fdac 	bl	8000f0c <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80013c0:	69f8      	ldr	r0, [r7, #28]
 80013c2:	9003      	str	r0, [sp, #12]
 80013c4:	9102      	str	r1, [sp, #8]
 80013c6:	9201      	str	r2, [sp, #4]
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	2100      	movs	r1, #0
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff ff0b 	bl	80011ec <lfs_bd_cmp>
 80013d6:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da01      	bge.n	80013e2 <lfs_bd_flush+0xc6>
                return res;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	e00a      	b.n	80013f8 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 80013e8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80013ec:	e004      	b.n	80013f8 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80013ee:	68b9      	ldr	r1, [r7, #8]
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff fd99 	bl	8000f28 <lfs_cache_zero>
    }

    return 0;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001400:	080111b8 	.word	0x080111b8
 8001404:	08011e3c 	.word	0x08011e3c
 8001408:	08011198 	.word	0x08011198
 800140c:	080111ac 	.word	0x080111ac

08001410 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff fd73 	bl	8000f0c <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff ff75 	bl	800131c <lfs_bd_flush>
 8001432:	6178      	str	r0, [r7, #20]
    if (err) {
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <lfs_bd_sync+0x2e>
        return err;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	e011      	b.n	8001462 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001448:	4610      	mov	r0, r2
 800144a:	4798      	blx	r3
 800144c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dd05      	ble.n	8001460 <lfs_bd_sync+0x50>
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <lfs_bd_sync+0x5c>)
 8001456:	4a06      	ldr	r2, [pc, #24]	; (8001470 <lfs_bd_sync+0x60>)
 8001458:	21dd      	movs	r1, #221	; 0xdd
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <lfs_bd_sync+0x64>)
 800145c:	f00b f926 	bl	800c6ac <__assert_func>
    return err;
 8001460:	697b      	ldr	r3, [r7, #20]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	080111ac 	.word	0x080111ac
 8001470:	08011e4c 	.word	0x08011e4c
 8001474:	08011198 	.word	0x08011198

08001478 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001488:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	f113 0f02 	cmn.w	r3, #2
 8001490:	d00a      	beq.n	80014a8 <lfs_bd_prog+0x30>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001498:	429a      	cmp	r2, r3
 800149a:	d305      	bcc.n	80014a8 <lfs_bd_prog+0x30>
 800149c:	4b47      	ldr	r3, [pc, #284]	; (80015bc <lfs_bd_prog+0x144>)
 800149e:	4a48      	ldr	r2, [pc, #288]	; (80015c0 <lfs_bd_prog+0x148>)
 80014a0:	21e8      	movs	r1, #232	; 0xe8
 80014a2:	4848      	ldr	r0, [pc, #288]	; (80015c4 <lfs_bd_prog+0x14c>)
 80014a4:	f00b f902 	bl	800c6ac <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80014a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ac:	441a      	add	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d978      	bls.n	80015aa <lfs_bd_prog+0x132>
 80014b8:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <lfs_bd_prog+0x150>)
 80014ba:	4a41      	ldr	r2, [pc, #260]	; (80015c0 <lfs_bd_prog+0x148>)
 80014bc:	21e9      	movs	r1, #233	; 0xe9
 80014be:	4841      	ldr	r0, [pc, #260]	; (80015c4 <lfs_bd_prog+0x14c>)
 80014c0:	f00b f8f4 	bl	800c6ac <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d151      	bne.n	8001572 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80014d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d34c      	bcc.n	8001572 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	4413      	add	r3, r2
                off >= pcache->off &&
 80014e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d243      	bcs.n	8001572 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f6:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80014f8:	4413      	add	r3, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014fe:	f7ff fc56 	bl	8000dae <lfs_min>
 8001502:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800150e:	1acb      	subs	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	69f9      	ldr	r1, [r7, #28]
 8001516:	4618      	mov	r0, r3
 8001518:	f00b f940 	bl	800c79c <memcpy>

            data += diff;
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4413      	add	r3, r2
 8001522:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4413      	add	r3, r2
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800152c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	6898      	ldr	r0, [r3, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fc25 	bl	8000d90 <lfs_max>
 8001546:	4602      	mov	r2, r0
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	429a      	cmp	r2, r3
 8001558:	d127      	bne.n	80015aa <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff fedb 	bl	800131c <lfs_bd_flush>
 8001566:	6178      	str	r0, [r7, #20]
                if (err) {
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01d      	beq.n	80015aa <lfs_bd_prog+0x132>
                    return err;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	e01f      	b.n	80015b2 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157a:	d006      	beq.n	800158a <lfs_bd_prog+0x112>
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <lfs_bd_prog+0x154>)
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <lfs_bd_prog+0x148>)
 8001580:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <lfs_bd_prog+0x14c>)
 8001586:	f00b f891 	bl	800c6ac <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800158e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4619      	mov	r1, r3
 8001598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800159a:	f7ff fc17 	bl	8000dcc <lfs_aligndown>
 800159e:	4602      	mov	r2, r0
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d189      	bne.n	80014c4 <lfs_bd_prog+0x4c>
    }

    return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	080111dc 	.word	0x080111dc
 80015c0:	08011e58 	.word	0x08011e58
 80015c4:	08011198 	.word	0x08011198
 80015c8:	08011214 	.word	0x08011214
 80015cc:	08011238 	.word	0x08011238

080015d0 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d306      	bcc.n	80015f2 <lfs_bd_erase+0x22>
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <lfs_bd_erase+0x54>)
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <lfs_bd_erase+0x58>)
 80015e8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80015ec:	480f      	ldr	r0, [pc, #60]	; (800162c <lfs_bd_erase+0x5c>)
 80015ee:	f00b f85d 	bl	800c6ac <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	4610      	mov	r0, r2
 8001600:	4798      	blx	r3
 8001602:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	dd06      	ble.n	8001618 <lfs_bd_erase+0x48>
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <lfs_bd_erase+0x60>)
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <lfs_bd_erase+0x58>)
 800160e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <lfs_bd_erase+0x5c>)
 8001614:	f00b f84a 	bl	800c6ac <__assert_func>
    return err;
 8001618:	68fb      	ldr	r3, [r7, #12]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	0801125c 	.word	0x0801125c
 8001628:	08011e64 	.word	0x08011e64
 800162c:	08011198 	.word	0x08011198
 8001630:	080111ac 	.word	0x080111ac

08001634 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3304      	adds	r3, #4
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d005      	beq.n	800167a <lfs_pair_isnull+0x1e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d101      	bne.n	800167e <lfs_pair_isnull+0x22>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <lfs_pair_isnull+0x24>
 800167e:	2300      	movs	r3, #0
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d017      	beq.n	80016d6 <lfs_pair_cmp+0x46>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3304      	adds	r3, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d00f      	beq.n	80016d6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3304      	adds	r3, #4
 80016be:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d008      	beq.n	80016d6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d001      	beq.n	80016d6 <lfs_pair_cmp+0x46>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <lfs_pair_cmp+0x48>
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d107      	bne.n	8001708 <lfs_pair_issync+0x26>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3304      	adds	r3, #4
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d00d      	beq.n	8001724 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3304      	adds	r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d108      	bne.n	8001728 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d101      	bne.n	8001728 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <lfs_pair_issync+0x48>
 8001728:	2300      	movs	r3, #0
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800173a:	b590      	push	{r4, r7, lr}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fb9c 	bl	8000e84 <lfs_fromle32>
 800174c:	4602      	mov	r2, r0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3304      	adds	r3, #4
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	1d1c      	adds	r4, r3, #4
 800175c:	4610      	mov	r0, r2
 800175e:	f7ff fb91 	bl	8000e84 <lfs_fromle32>
 8001762:	4603      	mov	r3, r0
 8001764:	6023      	str	r3, [r4, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bd90      	pop	{r4, r7, pc}

0800176e <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800176e:	b590      	push	{r4, r7, lr}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fb8c 	bl	8000e98 <lfs_tole32>
 8001780:	4602      	mov	r2, r0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	1d1c      	adds	r4, r3, #4
 8001790:	4610      	mov	r0, r2
 8001792:	f7ff fb81 	bl	8000e98 <lfs_tole32>
 8001796:	4603      	mov	r3, r0
 8001798:	6023      	str	r3, [r4, #0]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd90      	pop	{r4, r7, pc}

080017a2 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	0fdb      	lsrs	r3, r3, #31
 80017b0:	b2db      	uxtb	r3, r3
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	059b      	lsls	r3, r3, #22
 80017c8:	159b      	asrs	r3, r3, #22
 80017ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	0d1b      	lsrs	r3, r3, #20
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017f2:	b29b      	uxth	r3, r3
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	0d1b      	lsrs	r3, r3, #20
 800180a:	b29b      	uxth	r3, r3
 800180c:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8001810:	b29b      	uxth	r3, r3
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0d1b      	lsrs	r3, r3, #20
 8001828:	b29b      	uxth	r3, r3
 800182a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800182e:	b29b      	uxth	r3, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	0d1b      	lsrs	r3, r3, #20
 8001846:	b2db      	uxtb	r3, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffed 	bl	800183a <lfs_tag_chunk>
 8001860:	4603      	mov	r3, r0
 8001862:	b25b      	sxtb	r3, r3
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0a9b      	lsrs	r3, r3, #10
 8001878:	b29b      	uxth	r3, r3
 800187a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800187e:	b29b      	uxth	r3, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff86 	bl	80017bc <lfs_tag_isdelete>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ffe6 	bl	800188a <lfs_tag_size>
 80018be:	4603      	mov	r3, r0
 80018c0:	3304      	adds	r3, #4
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e012      	b.n	8001900 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4403      	add	r3, r0
 80018f6:	404a      	eors	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b02      	cmp	r3, #2
 8001904:	dde9      	ble.n	80018da <lfs_gstate_xor+0x10>
    }
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	e00b      	b.n	8001938 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <lfs_gstate_iszero+0x20>
            return false;
 800192e:	2300      	movs	r3, #0
 8001930:	e006      	b.n	8001940 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3301      	adds	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b02      	cmp	r3, #2
 800193c:	ddf0      	ble.n	8001920 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff97 	bl	800188a <lfs_tag_size>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf14      	ite	ne
 8001962:	2301      	movne	r3, #1
 8001964:	2300      	moveq	r3, #0
 8001966:	b2db      	uxtb	r3, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff84 	bl	800188a <lfs_tag_size>
 8001982:	4603      	mov	r3, r0
 8001984:	b2db      	uxtb	r3, r3
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff20 	bl	80017e0 <lfs_tag_type1>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff62 	bl	800188a <lfs_tag_size>
 80019c6:	4603      	mov	r3, r0
 80019c8:	0a5b      	lsrs	r3, r3, #9
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fef8 	bl	80017e0 <lfs_tag_type1>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00a      	beq.n	8001a0c <lfs_gstate_hasmovehere+0x30>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	6839      	ldr	r1, [r7, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fe47 	bl	8001690 <lfs_pair_cmp>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <lfs_gstate_hasmovehere+0x30>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <lfs_gstate_hasmovehere+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fa2b 	bl	8000e84 <lfs_fromle32>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fa23 	bl	8000e84 <lfs_fromle32>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fa1b 	bl	8000e84 <lfs_fromle32>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fa15 	bl	8000e98 <lfs_tole32>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fa0d 	bl	8000e98 <lfs_tole32>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fa05 	bl	8000e98 <lfs_tole32>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	609a      	str	r2, [r3, #8]
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f9eb 	bl	8000e84 <lfs_fromle32>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f9e3 	bl	8000e84 <lfs_fromle32>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	605a      	str	r2, [r3, #4]
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f9dd 	bl	8000e98 <lfs_tole32>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f9d5 	bl	8000e98 <lfs_tole32>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	605a      	str	r2, [r3, #4]
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f9bb 	bl	8000e84 <lfs_fromle32>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff f9b3 	bl	8000e84 <lfs_fromle32>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	605a      	str	r2, [r3, #4]
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f9ad 	bl	8000e98 <lfs_tole32>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f9a5 	bl	8000e98 <lfs_tole32>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f98b 	bl	8000e84 <lfs_fromle32>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f983 	bl	8000e84 <lfs_fromle32>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f97b 	bl	8000e84 <lfs_fromle32>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f973 	bl	8000e84 <lfs_fromle32>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f96b 	bl	8000e84 <lfs_fromle32>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f963 	bl	8000e84 <lfs_fromle32>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	615a      	str	r2, [r3, #20]
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f95d 	bl	8000e98 <lfs_tole32>
 8001bde:	4602      	mov	r2, r0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f955 	bl	8000e98 <lfs_tole32>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f94d 	bl	8000e98 <lfs_tole32>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f945 	bl	8000e98 <lfs_tole32>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f93d 	bl	8000e98 <lfs_tole32>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f935 	bl	8000e98 <lfs_tole32>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	615a      	str	r2, [r3, #20]
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e009      	b.n	8001c60 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d101      	bne.n	8001c5a <lfs_mlist_isopen+0x1e>
            return true;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e007      	b.n	8001c6a <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f1      	bne.n	8001c4c <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3328      	adds	r3, #40	; 0x28
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e00d      	b.n	8001ca2 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d105      	bne.n	8001c9c <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]
            break;
 8001c9a:	e007      	b.n	8001cac <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ed      	bne.n	8001c86 <lfs_mlist_remove+0x12>
        }
    }
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <lfs_fs_disk_version+0x14>)
    }
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	00020001 	.word	0x00020001

08001cf0 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ffed 	bl	8001cd8 <lfs_fs_disk_version>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	b29b      	uxth	r3, r3

}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ffdf 	bl	8001cd8 <lfs_fs_disk_version>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	b29b      	uxth	r3, r3
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d40:	4413      	add	r3, r2
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->free.off)
 8001d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d4a:	fb02 f201 	mul.w	r2, r2, r1
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d212      	bcs.n	8001d82 <lfs_alloc_lookahead+0x5c>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	009a      	lsls	r2, r3, #2
 8001d66:	440a      	add	r2, r1
 8001d68:	6811      	ldr	r1, [r2, #0]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f002 021f 	and.w	r2, r2, #31
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4403      	add	r3, r0
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->block_count;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ffe6 	bl	8001d8e <lfs_alloc_ack>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <lfs_fs_rawgc>:

#ifndef LFS_READONLY
static int lfs_fs_rawgc(lfs_t *lfs) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    // Move free offset at the first unused block (lfs->free.i)
    // lfs->free.i is equal lfs->free.size when all blocks are used
    lfs->free.off = (lfs->free.off + lfs->free.i) % lfs->block_count;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	4413      	add	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001de2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001de6:	fb02 f201 	mul.w	r2, r2, r1
 8001dea:	1a9a      	subs	r2, r3, r2
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	00da      	lsls	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f7fe ffd5 	bl	8000dae <lfs_min>
 8001e04:	4602      	mov	r2, r0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    // find mask of free blocks from tree
    memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f00a fccb 	bl	800c7b8 <memset>
    int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8001e22:	2301      	movs	r3, #1
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4909      	ldr	r1, [pc, #36]	; (8001e4c <lfs_fs_rawgc+0x80>)
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f004 fffd 	bl	8006e28 <lfs_fs_rawtraverse>
 8001e2e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <lfs_fs_rawgc+0x74>
        lfs_alloc_drop(lfs);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffb6 	bl	8001da8 <lfs_alloc_drop>
        return err;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	e000      	b.n	8001e42 <lfs_fs_rawgc+0x76>
    }

    return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08001d27 	.word	0x08001d27

08001e50 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8001e5a:	e04e      	b.n	8001efa <lfs_alloc+0xaa>
            lfs_block_t off = lfs->free.i;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d131      	bne.n	8001efa <lfs_alloc+0xaa>
                // found a free block
                *block = (lfs->free.off + off) % lfs->block_count;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001ea2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ea6:	fb02 f201 	mul.w	r2, r2, r1
 8001eaa:	1a9a      	subs	r2, r3, r2
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8001eb0:	e009      	b.n	8001ec6 <lfs_alloc+0x76>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec0:	1e5a      	subs	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d011      	beq.n	8001ef6 <lfs_alloc+0xa6>
                        (lfs->free.buffer[lfs->free.i / 32]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1dd      	bne.n	8001eb2 <lfs_alloc+0x62>
                }

                return 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e021      	b.n	8001f3e <lfs_alloc+0xee>
        while (lfs->free.i != lfs->free.size) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d1aa      	bne.n	8001e5c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10f      	bne.n	8001f2e <lfs_alloc+0xde>
            LFS_ERROR("No more free space %"PRIu32,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	4413      	add	r3, r2
 8001f18:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <lfs_alloc+0xf8>)
 8001f1a:	9200      	str	r2, [sp, #0]
 8001f1c:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8001f20:	490a      	ldr	r1, [pc, #40]	; (8001f4c <lfs_alloc+0xfc>)
 8001f22:	480b      	ldr	r0, [pc, #44]	; (8001f50 <lfs_alloc+0x100>)
 8001f24:	f00b fcc0 	bl	800d8a8 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8001f28:	f06f 031b 	mvn.w	r3, #27
 8001f2c:	e007      	b.n	8001f3e <lfs_alloc+0xee>
        }

        int err = lfs_fs_rawgc(lfs);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff4c 	bl	8001dcc <lfs_fs_rawgc>
 8001f34:	60f8      	str	r0, [r7, #12]
        if(err) {
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d08e      	beq.n	8001e5a <lfs_alloc+0xa>
            return err;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	080112a0 	.word	0x080112a0
 8001f4c:	08011198 	.word	0x08011198
 8001f50:	08011278 	.word	0x08011278

08001f54 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b08f      	sub	sp, #60	; 0x3c
 8001f58:	af04      	add	r7, sp, #16
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	333c      	adds	r3, #60	; 0x3c
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fd2e 	bl	80019dc <lfs_gstate_hasmovehere>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80b9 	beq.w	80020fa <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fc6f 	bl	800186c <lfs_tag_id>
 8001f8e:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80b2 	beq.w	80020fa <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fc66 	bl	800186c <lfs_tag_id>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461c      	mov	r4, r3
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f7ff fc61 	bl	800186c <lfs_tag_id>
 8001faa:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8001fac:	429c      	cmp	r4, r3
 8001fae:	f200 80a4 	bhi.w	80020fa <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001fb8:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001fba:	e09e      	b.n	80020fa <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fc6f 	bl	80018a2 <lfs_tag_dsize>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001fd0:	68f9      	ldr	r1, [r7, #12]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	9203      	str	r2, [sp, #12]
 8001fda:	f107 0210 	add.w	r2, r7, #16
 8001fde:	9202      	str	r2, [sp, #8]
 8001fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe2:	9201      	str	r2, [sp, #4]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	460a      	mov	r2, r1
 8001fea:	2100      	movs	r1, #0
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7fe ffb1 	bl	8000f54 <lfs_bd_read>
 8001ff2:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <lfs_dir_getslice+0xaa>
            return err;
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	e089      	b.n	8002112 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe ff55 	bl	8000eb0 <lfs_frombe32>
 8002006:	4602      	mov	r2, r0
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	4053      	eors	r3, r2
 800200c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002010:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fc2a 	bl	800186c <lfs_tag_id>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d02b      	beq.n	8002076 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800201e:	69f8      	ldr	r0, [r7, #28]
 8002020:	f7ff fbde 	bl	80017e0 <lfs_tag_type1>
 8002024:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202a:	d124      	bne.n	8002076 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800202c:	69f8      	ldr	r0, [r7, #28]
 800202e:	f7ff fc1d 	bl	800186c <lfs_tag_id>
 8002032:	4603      	mov	r3, r0
 8002034:	461c      	mov	r4, r3
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fc15 	bl	800186c <lfs_tag_id>
 8002042:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002044:	429c      	cmp	r4, r3
 8002046:	d816      	bhi.n	8002076 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	1ad2      	subs	r2, r2, r3
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <lfs_dir_getslice+0x1c8>)
 8002050:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8002052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	429a      	cmp	r2, r3
 800205e:	d102      	bne.n	8002066 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8002060:	f06f 0301 	mvn.w	r3, #1
 8002064:	e055      	b.n	8002112 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002066:	69f8      	ldr	r0, [r7, #28]
 8002068:	f7ff fbf3 	bl	8001852 <lfs_tag_splice>
 800206c:	4603      	mov	r3, r0
 800206e:	029a      	lsls	r2, r3, #10
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	4413      	add	r3, r2
 8002074:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	1ad2      	subs	r2, r2, r3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	405a      	eors	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d138      	bne.n	80020fa <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8002088:	69f8      	ldr	r0, [r7, #28]
 800208a:	f7ff fb97 	bl	80017bc <lfs_tag_isdelete>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8002094:	f06f 0301 	mvn.w	r3, #1
 8002098:	e03b      	b.n	8002112 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800209a:	69f8      	ldr	r0, [r7, #28]
 800209c:	f7ff fbf5 	bl	800188a <lfs_tag_size>
 80020a0:	4603      	mov	r3, r0
 80020a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fe82 	bl	8000dae <lfs_min>
 80020aa:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80020b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020b6:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80020b8:	3204      	adds	r2, #4
 80020ba:	6979      	ldr	r1, [r7, #20]
 80020bc:	9103      	str	r1, [sp, #12]
 80020be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020c0:	9102      	str	r1, [sp, #8]
 80020c2:	9201      	str	r2, [sp, #4]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	4602      	mov	r2, r0
 80020ca:	2100      	movs	r1, #0
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7fe ff41 	bl	8000f54 <lfs_bd_read>
 80020d2:	61b8      	str	r0, [r7, #24]
            if (err) {
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <lfs_dir_getslice+0x18a>
                return err;
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	e019      	b.n	8002112 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80020de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	18d0      	adds	r0, r2, r3
 80020e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	2100      	movs	r1, #0
 80020ee:	f00a fb63 	bl	800c7b8 <memset>

            return tag + gdiff;
 80020f2:	6a3a      	ldr	r2, [r7, #32]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4413      	add	r3, r2
 80020f8:	e00b      	b.n	8002112 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fbd0 	bl	80018a2 <lfs_tag_dsize>
 8002102:	4603      	mov	r3, r0
 8002104:	3304      	adds	r3, #4
 8002106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002108:	429a      	cmp	r2, r3
 800210a:	f4bf af57 	bcs.w	8001fbc <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800210e:	f06f 0301 	mvn.w	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	372c      	adds	r7, #44	; 0x2c
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	bf00      	nop
 800211c:	000ffc00 	.word	0x000ffc00

08002120 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af04      	add	r7, sp, #16
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800212e:	6838      	ldr	r0, [r7, #0]
 8002130:	f7ff fbab 	bl	800188a <lfs_tag_size>
 8002134:	4603      	mov	r3, r0
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2300      	movs	r3, #0
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7ff ff04 	bl	8001f54 <lfs_dir_getslice>
 800214c:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b08c      	sub	sp, #48	; 0x30
 800215a:	af04      	add	r7, sp, #16
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8002164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002166:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8002168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800216a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216c:	441a      	add	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	f240 80c0 	bls.w	80022fa <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800217a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800217e:	e0c1      	b.n	8002304 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8002180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002182:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d03f      	beq.n	800220a <lfs_dir_getread+0xb4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f113 0f02 	cmn.w	r3, #2
 8002192:	d13a      	bne.n	800220a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800219e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d232      	bcs.n	800220a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d324      	bcc.n	80021f8 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b8:	1acb      	subs	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	69b8      	ldr	r0, [r7, #24]
 80021c0:	f7fe fdf5 	bl	8000dae <lfs_min>
 80021c4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021d0:	1acb      	subs	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4619      	mov	r1, r3
 80021d8:	69f8      	ldr	r0, [r7, #28]
 80021da:	f00a fadf 	bl	800c79c <memcpy>

                data += diff;
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	4413      	add	r3, r2
 80021e4:	61fb      	str	r3, [r7, #28]
                off += diff;
 80021e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	4413      	add	r3, r2
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80021ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80021f6:	e080      	b.n	80022fa <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	4619      	mov	r1, r3
 8002202:	69b8      	ldr	r0, [r7, #24]
 8002204:	f7fe fdd3 	bl	8000dae <lfs_min>
 8002208:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f113 0f02 	cmn.w	r3, #2
 8002212:	d13a      	bne.n	800228a <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800221e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002220:	429a      	cmp	r2, r3
 8002222:	d232      	bcs.n	800228a <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800222a:	429a      	cmp	r2, r3
 800222c:	d324      	bcc.n	8002278 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002238:	1acb      	subs	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	4619      	mov	r1, r3
 800223e:	69b8      	ldr	r0, [r7, #24]
 8002240:	f7fe fdb5 	bl	8000dae <lfs_min>
 8002244:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002250:	1acb      	subs	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4619      	mov	r1, r3
 8002258:	69f8      	ldr	r0, [r7, #28]
 800225a:	f00a fa9f 	bl	800c79c <memcpy>

                data += diff;
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4413      	add	r3, r2
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800226e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8002276:	e040      	b.n	80022fa <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	4619      	mov	r1, r3
 8002282:	69b8      	ldr	r0, [r7, #24]
 8002284:	f7fe fd93 	bl	8000dae <lfs_min>
 8002288:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f06f 0201 	mvn.w	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	4619      	mov	r1, r3
 800229a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800229c:	f7fe fd96 	bl	8000dcc <lfs_aligndown>
 80022a0:	4602      	mov	r2, r0
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80022a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	441a      	add	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f7fe fd9d 	bl	8000df4 <lfs_alignup>
 80022ba:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f7fe fd72 	bl	8000dae <lfs_min>
 80022ca:	4602      	mov	r2, r0
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80022d8:	6839      	ldr	r1, [r7, #0]
 80022da:	6889      	ldr	r1, [r1, #8]
 80022dc:	9102      	str	r1, [sp, #8]
 80022de:	9201      	str	r2, [sp, #4]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f7ff fe33 	bl	8001f54 <lfs_dir_getslice>
 80022ee:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	da01      	bge.n	80022fa <lfs_dir_getread+0x1a4>
            return err;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	e004      	b.n	8002304 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80022fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f47f af3f 	bne.w	8002180 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <lfs_dir_traverse_filter+0x1e>
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <lfs_dir_traverse_filter+0xac>)
 8002328:	e000      	b.n	800232c <lfs_dir_traverse_filter+0x20>
 800232a:	4b24      	ldr	r3, [pc, #144]	; (80023bc <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800232c:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	405a      	eors	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d014      	beq.n	8002368 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fa3a 	bl	80017bc <lfs_tag_isdelete>
 8002348:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <lfs_dir_traverse_filter+0xac>)
 8002352:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <lfs_dir_traverse_filter+0xb4>)
 800235a:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800235c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002360:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d104      	bne.n	8002372 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
        return true;
 800236e:	2301      	movs	r3, #1
 8002370:	e01e      	b.n	80023b0 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002372:	68b8      	ldr	r0, [r7, #8]
 8002374:	f7ff fa34 	bl	80017e0 <lfs_tag_type1>
 8002378:	4603      	mov	r3, r0
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d116      	bne.n	80023ae <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8002380:	68b8      	ldr	r0, [r7, #8]
 8002382:	f7ff fa73 	bl	800186c <lfs_tag_id>
 8002386:	4603      	mov	r3, r0
 8002388:	461c      	mov	r4, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fa6c 	bl	800186c <lfs_tag_id>
 8002394:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002396:	429c      	cmp	r4, r3
 8002398:	d809      	bhi.n	80023ae <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	f7ff fa59 	bl	8001852 <lfs_tag_splice>
 80023a0:	4603      	mov	r3, r0
 80023a2:	029a      	lsls	r2, r3, #10
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	441a      	add	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	601a      	str	r2, [r3, #0]
    }

    return false;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}
 80023b8:	7ffffc00 	.word	0x7ffffc00
 80023bc:	700ffc00 	.word	0x700ffc00
 80023c0:	000ffc00 	.word	0x000ffc00

080023c4 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b0c1      	sub	sp, #260	; 0x104
 80023c8:	af04      	add	r7, sp, #16
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 80023d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	f7ff fa5d 	bl	80018a2 <lfs_tag_dsize>
 80023e8:	4602      	mov	r2, r0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	441a      	add	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d237      	bcs.n	8002466 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 80023f6:	6838      	ldr	r0, [r7, #0]
 80023f8:	f7ff fa53 	bl	80018a2 <lfs_tag_dsize>
 80023fc:	4602      	mov	r2, r0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2204      	movs	r2, #4
 800240c:	9203      	str	r2, [sp, #12]
 800240e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002412:	9202      	str	r2, [sp, #8]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	9201      	str	r2, [sp, #4]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2304      	movs	r3, #4
 800241c:	460a      	mov	r2, r1
 800241e:	2100      	movs	r1, #0
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7fe fd97 	bl	8000f54 <lfs_bd_read>
 8002426:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 800242a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <lfs_dir_traverse+0x74>
                    return err;
 8002432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002436:	e3d0      	b.n	8002bda <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8002438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fd38 	bl	8000eb0 <lfs_frombe32>
 8002440:	4602      	mov	r2, r0
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	4053      	eors	r3, r2
 8002446:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800244a:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8002458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800245c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8002460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	e01b      	b.n	800249e <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8002466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800246a:	2b00      	cmp	r3, #0
 800246c:	dd13      	ble.n	8002496 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800246e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8002476:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8002480:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002484:	3308      	adds	r3, #8
 8002486:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 800248a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800248e:	3b01      	subs	r3, #1
 8002490:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002494:	e003      	b.n	800249e <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 800249c:	e2bd      	b.n	8002a1a <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800249e:	4b86      	ldr	r3, [pc, #536]	; (80026b8 <lfs_dir_traverse+0x2f4>)
 80024a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 80024a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024aa:	405a      	eors	r2, r3
 80024ac:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80024b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024b4:	400b      	ands	r3, r1
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 82a1 	bne.w	8002a00 <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 80024be:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80024c2:	f7ff f9d3 	bl	800186c <lfs_tag_id>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80ff 	beq.w	80026cc <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 80024ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d906      	bls.n	80024e4 <lfs_dir_traverse+0x120>
 80024d6:	4b79      	ldr	r3, [pc, #484]	; (80026bc <lfs_dir_traverse+0x2f8>)
 80024d8:	4a79      	ldr	r2, [pc, #484]	; (80026c0 <lfs_dir_traverse+0x2fc>)
 80024da:	f240 319f 	movw	r1, #927	; 0x39f
 80024de:	4879      	ldr	r0, [pc, #484]	; (80026c4 <lfs_dir_traverse+0x300>)
 80024e0:	f00a f8e4 	bl	800c6ac <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80024e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80024f6:	4413      	add	r3, r2
 80024f8:	3b98      	subs	r3, #152	; 0x98
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800250e:	4413      	add	r3, r2
 8002510:	3b94      	subs	r3, #148	; 0x94
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002526:	4413      	add	r3, r2
 8002528:	3b90      	subs	r3, #144	; 0x90
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800253e:	4413      	add	r3, r2
 8002540:	3b8c      	subs	r3, #140	; 0x8c
 8002542:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002558:	4413      	add	r3, r2
 800255a:	3b88      	subs	r3, #136	; 0x88
 800255c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002566:	4613      	mov	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002572:	4413      	add	r3, r2
 8002574:	3b84      	subs	r3, #132	; 0x84
 8002576:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800258c:	4413      	add	r3, r2
 800258e:	3b80      	subs	r3, #128	; 0x80
 8002590:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025a6:	4413      	add	r3, r2
 80025a8:	3b7c      	subs	r3, #124	; 0x7c
 80025aa:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80025ae:	801a      	strh	r2, [r3, #0]
 80025b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025c0:	4413      	add	r3, r2
 80025c2:	3b7a      	subs	r3, #122	; 0x7a
 80025c4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025da:	4413      	add	r3, r2
 80025dc:	3b78      	subs	r3, #120	; 0x78
 80025de:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80025e2:	801a      	strh	r2, [r3, #0]
 80025e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025f4:	4413      	add	r3, r2
 80025f6:	3b74      	subs	r3, #116	; 0x74
 80025f8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800260e:	4413      	add	r3, r2
 8002610:	3b70      	subs	r3, #112	; 0x70
 8002612:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002628:	4413      	add	r3, r2
 800262a:	3b6c      	subs	r3, #108	; 0x6c
 800262c:	6019      	str	r1, [r3, #0]
 800262e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800263e:	4413      	add	r3, r2
 8002640:	3b68      	subs	r3, #104	; 0x68
 8002642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002658:	4413      	add	r3, r2
 800265a:	3b68      	subs	r3, #104	; 0x68
 800265c:	3304      	adds	r3, #4
 800265e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002662:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002666:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800266a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800266e:	3301      	adds	r3, #1
 8002670:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <lfs_dir_traverse+0x304>)
 8002694:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8002698:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	3328      	adds	r3, #40	; 0x28
 80026ac:	440b      	add	r3, r1
 80026ae:	3304      	adds	r3, #4
 80026b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026b4:	e695      	b.n	80023e2 <lfs_dir_traverse+0x1e>
 80026b6:	bf00      	nop
 80026b8:	7ff00000 	.word	0x7ff00000
 80026bc:	080112a4 	.word	0x080112a4
 80026c0:	08011e74 	.word	0x08011e74
 80026c4:	08011198 	.word	0x08011198
 80026c8:	0800230d 	.word	0x0800230d
                continue;
            }
        }

popped:
 80026cc:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 80026ce:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80026d2:	f7ff f8cb 	bl	800186c <lfs_tag_id>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d015      	beq.n	8002708 <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80026dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f8c4 	bl	800186c <lfs_tag_id>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 80026e8:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f200 8189 	bhi.w	8002a04 <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff f8b9 	bl	800186c <lfs_tag_id>
 80026fa:	4603      	mov	r3, r0
 80026fc:	461a      	mov	r2, r3
 80026fe:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002702:	4293      	cmp	r3, r2
 8002704:	f240 817e 	bls.w	8002a04 <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff f886 	bl	800181c <lfs_tag_type3>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	f43f ae65 	beq.w	80023e2 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f87e 	bl	800181c <lfs_tag_type3>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	f240 1301 	movw	r3, #257	; 0x101
 8002728:	429a      	cmp	r2, r3
 800272a:	f040 80ed 	bne.w	8002908 <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800272e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002732:	4ab7      	ldr	r2, [pc, #732]	; (8002a10 <lfs_dir_traverse+0x64c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	f000 8167 	beq.w	8002a08 <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800273a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800273e:	4613      	mov	r3, r2
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800274a:	4413      	add	r3, r2
 800274c:	3b98      	subs	r3, #152	; 0x98
 800274e:	4618      	mov	r0, r3
 8002750:	233c      	movs	r3, #60	; 0x3c
 8002752:	461a      	mov	r2, r3
 8002754:	2100      	movs	r1, #0
 8002756:	f00a f82f 	bl	800c7b8 <memset>
 800275a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800276a:	4413      	add	r3, r2
 800276c:	3b98      	subs	r3, #152	; 0x98
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002782:	4413      	add	r3, r2
 8002784:	3b94      	subs	r3, #148	; 0x94
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800279a:	4413      	add	r3, r2
 800279c:	3b90      	subs	r3, #144	; 0x90
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027b2:	4413      	add	r3, r2
 80027b4:	3b8c      	subs	r3, #140	; 0x8c
 80027b6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027cc:	4413      	add	r3, r2
 80027ce:	3b88      	subs	r3, #136	; 0x88
 80027d0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027e6:	4413      	add	r3, r2
 80027e8:	3b84      	subs	r3, #132	; 0x84
 80027ea:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002800:	4413      	add	r3, r2
 8002802:	3b80      	subs	r3, #128	; 0x80
 8002804:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800280e:	4613      	mov	r3, r2
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800281a:	4413      	add	r3, r2
 800281c:	3b7c      	subs	r3, #124	; 0x7c
 800281e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8002822:	801a      	strh	r2, [r3, #0]
 8002824:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002834:	4413      	add	r3, r2
 8002836:	3b7a      	subs	r3, #122	; 0x7a
 8002838:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800284e:	4413      	add	r3, r2
 8002850:	3b78      	subs	r3, #120	; 0x78
 8002852:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002868:	4413      	add	r3, r2
 800286a:	3b74      	subs	r3, #116	; 0x74
 800286c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002882:	4413      	add	r3, r2
 8002884:	3b70      	subs	r3, #112	; 0x70
 8002886:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800288a:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800288c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002890:	3301      	adds	r3, #1
 8002892:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fff6 	bl	800188a <lfs_tag_size>
 800289e:	4603      	mov	r3, r0
 80028a0:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80028a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe ffe0 	bl	800186c <lfs_tag_id>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80028b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b6:	60bb      	str	r3, [r7, #8]
            off = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295
 80028c0:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <lfs_dir_traverse+0x650>)
 80028d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80028d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80028d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 80028dc:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80028e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 80028e4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80028e8:	3301      	adds	r3, #1
 80028ea:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 80028ee:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80028f2:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80028fe:	4413      	add	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8002906:	e56c      	b.n	80023e2 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe ff86 	bl	800181c <lfs_tag_type3>
 8002910:	4603      	mov	r3, r0
 8002912:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002916:	d159      	bne.n	80029cc <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800291e:	e04b      	b.n	80029b8 <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 8002920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002928:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	461a      	mov	r2, r3
 8002936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800293a:	4413      	add	r3, r2
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002942:	051c      	lsls	r4, r3, #20
 8002944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe ff90 	bl	800186c <lfs_tag_id>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002954:	4413      	add	r3, r2
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	ea44 0103 	orr.w	r1, r4, r3
 800295c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	461a      	mov	r2, r3
 800296a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800296e:	4413      	add	r3, r2
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8002974:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	461a      	mov	r2, r3
 8002982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002986:	4413      	add	r3, r2
 8002988:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800298a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800298e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002992:	4798      	blx	r3
 8002994:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8002998:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800299c:	2b00      	cmp	r3, #0
 800299e:	da02      	bge.n	80029a6 <lfs_dir_traverse+0x5e2>
                    return res;
 80029a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029a4:	e119      	b.n	8002bda <lfs_dir_traverse+0x816>
                }

                if (res) {
 80029a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d12e      	bne.n	8002a0c <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80029ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b2:	3301      	adds	r3, #1
 80029b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe ff65 	bl	800188a <lfs_tag_size>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d3aa      	bcc.n	8002920 <lfs_dir_traverse+0x55c>
 80029ca:	e50a      	b.n	80023e2 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80029cc:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80029d0:	029a      	lsls	r2, r3, #10
 80029d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d4:	18d1      	adds	r1, r2, r3
 80029d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029de:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80029e2:	4798      	blx	r3
 80029e4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 80029e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da02      	bge.n	80029f6 <lfs_dir_traverse+0x632>
                return res;
 80029f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029f4:	e0f1      	b.n	8002bda <lfs_dir_traverse+0x816>
            }

            if (res) {
 80029f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <lfs_dir_traverse+0x654>
 80029fe:	e4f0      	b.n	80023e2 <lfs_dir_traverse+0x1e>
                continue;
 8002a00:	bf00      	nop
 8002a02:	e4ee      	b.n	80023e2 <lfs_dir_traverse+0x1e>
            continue;
 8002a04:	bf00      	nop
 8002a06:	e4ec      	b.n	80023e2 <lfs_dir_traverse+0x1e>
                continue;
 8002a08:	bf00      	nop
 8002a0a:	e4ea      	b.n	80023e2 <lfs_dir_traverse+0x1e>
                    break;
 8002a0c:	bf00      	nop
        {
 8002a0e:	e4e8      	b.n	80023e2 <lfs_dir_traverse+0x1e>
 8002a10:	0800230d 	.word	0x0800230d
 8002a14:	600ffc00 	.word	0x600ffc00
                break;
 8002a18:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8002a1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80d9 	beq.w	8002bd6 <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002a24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a28:	1e5a      	subs	r2, r3, #1
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a36:	4413      	add	r3, r2
 8002a38:	3b98      	subs	r3, #152	; 0x98
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8002a3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a50:	4413      	add	r3, r2
 8002a52:	3b94      	subs	r3, #148	; 0x94
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8002a58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a5c:	1e5a      	subs	r2, r3, #1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b90      	subs	r3, #144	; 0x90
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8002a72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a84:	4413      	add	r3, r2
 8002a86:	3b8c      	subs	r3, #140	; 0x8c
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8002a8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a92:	1e5a      	subs	r2, r3, #1
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b88      	subs	r3, #136	; 0x88
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8002aaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002aae:	1e5a      	subs	r2, r3, #1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002abc:	4413      	add	r3, r2
 8002abe:	3b84      	subs	r3, #132	; 0x84
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8002ac6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002ad8:	4413      	add	r3, r2
 8002ada:	3b80      	subs	r3, #128	; 0x80
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8002ae2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002ae6:	1e5a      	subs	r2, r3, #1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002af4:	4413      	add	r3, r2
 8002af6:	3b7c      	subs	r3, #124	; 0x7c
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8002afe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b02:	1e5a      	subs	r2, r3, #1
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002b10:	4413      	add	r3, r2
 8002b12:	3b7a      	subs	r3, #122	; 0x7a
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8002b1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b78      	subs	r3, #120	; 0x78
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8002b36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b74      	subs	r3, #116	; 0x74
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8002b52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002b64:	4413      	add	r3, r2
 8002b66:	3b70      	subs	r3, #112	; 0x70
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8002b6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002b80:	4413      	add	r3, r2
 8002b82:	3b6c      	subs	r3, #108	; 0x6c
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8002b88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b8c:	1e5a      	subs	r2, r3, #1
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b68      	subs	r3, #104	; 0x68
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8002ba4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002ba8:	1e5a      	subs	r2, r3, #1
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8002bbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bc0:	3204      	adds	r2, #4
 8002bc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bc6:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002bca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8002bd4:	e57b      	b.n	80026ce <lfs_dir_traverse+0x30a>
    } else {
        return res;
 8002bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	37f4      	adds	r7, #244	; 0xf4
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}
 8002be2:	bf00      	nop

08002be4 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be6:	b0a5      	sub	sp, #148	; 0x94
 8002be8:	af04      	add	r7, sp, #16
 8002bea:	6178      	str	r0, [r7, #20]
 8002bec:	6139      	str	r1, [r7, #16]
 8002bee:	60fa      	str	r2, [r7, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00f      	beq.n	8002c20 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d206      	bcs.n	8002c1a <lfs_dir_fetchmatch+0x36>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 8002c1a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002c1e:	e39d      	b.n	800335c <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002c20:	2300      	movs	r3, #0
 8002c22:	647b      	str	r3, [r7, #68]	; 0x44
 8002c24:	2300      	movs	r3, #0
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	677b      	str	r3, [r7, #116]	; 0x74
 8002c30:	e056      	b.n	8002ce0 <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 8002c32:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002c3c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002c3e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002c42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c44:	0092      	lsls	r2, r2, #2
 8002c46:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002c48:	2104      	movs	r1, #4
 8002c4a:	9103      	str	r1, [sp, #12]
 8002c4c:	9202      	str	r2, [sp, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	9201      	str	r2, [sp, #4]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2304      	movs	r3, #4
 8002c56:	4602      	mov	r2, r0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7fe f97a 	bl	8000f54 <lfs_bd_read>
 8002c60:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8002c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe f907 	bl	8000e84 <lfs_fromle32>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c80:	440b      	add	r3, r1
 8002c82:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8002c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <lfs_dir_fetchmatch+0xb4>
 8002c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c92:	d001      	beq.n	8002c98 <lfs_dir_fetchmatch+0xb4>
            return err;
 8002c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c96:	e361      	b.n	800335c <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c9e:	d01c      	beq.n	8002cda <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002ca8:	4413      	add	r3, r2
 8002caa:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	bfb8      	it	lt
 8002cba:	425b      	neglt	r3, r3
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f7fe f8cd 	bl	8000e6a <lfs_scmp>
 8002cd0:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	dd01      	ble.n	8002cda <lfs_dir_fetchmatch+0xf6>
            r = i;
 8002cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd8:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8002cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cdc:	3301      	adds	r3, #1
 8002cde:	677b      	str	r3, [r7, #116]	; 0x74
 8002ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	dda5      	ble.n	8002c32 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	bfb8      	it	lt
 8002cf0:	425b      	neglt	r3, r3
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8002cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d00:	3301      	adds	r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	bfb8      	it	lt
 8002d0a:	425b      	neglt	r3, r3
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4413      	add	r3, r2
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	bfb8      	it	lt
 8002d22:	425b      	neglt	r3, r3
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d3e:	e2f9      	b.n	8003334 <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002d50:	4aa8      	ldr	r2, [pc, #672]	; (8002ff4 <lfs_dir_fetchmatch+0x410>)
 8002d52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d5a:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 8002d64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d66:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe f88d 	bl	8000e98 <lfs_tole32>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	3308      	adds	r3, #8
 8002d88:	2204      	movs	r2, #4
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	f004 ffe4 	bl	8007d5c <lfs_crc>
 8002d94:	4603      	mov	r3, r0
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe f871 	bl	8000e84 <lfs_fromle32>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002da8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002daa:	f7fe fd7a 	bl	80018a2 <lfs_tag_dsize>
 8002dae:	4602      	mov	r2, r0
 8002db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db2:	4413      	add	r3, r2
 8002db4:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8002db6:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002dbc:	69d8      	ldr	r0, [r3, #28]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	9203      	str	r2, [sp, #12]
 8002dc6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002dca:	9202      	str	r2, [sp, #8]
 8002dcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dce:	9201      	str	r2, [sp, #4]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	460a      	mov	r2, r1
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	6978      	ldr	r0, [r7, #20]
 8002dda:	f7fe f8bb 	bl	8000f54 <lfs_bd_read>
 8002dde:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8002de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002dec:	f000 81d5 	beq.w	800319a <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 8002df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df2:	e2b3      	b.n	800335c <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 ffad 	bl	8007d5c <lfs_crc>
 8002e02:	4603      	mov	r3, r0
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe f851 	bl	8000eb0 <lfs_frombe32>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e12:	4053      	eors	r3, r2
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fcc2 	bl	80017a2 <lfs_tag_isvalid>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f083 0301 	eor.w	r3, r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8002e2a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002e2c:	f7fe fce7 	bl	80017fe <lfs_tag_type2>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 8002e40:	e1ba      	b.n	80031b8 <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fd2c 	bl	80018a2 <lfs_tag_dsize>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4e:	441a      	add	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	f200 81a1 	bhi.w	800319e <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fccb 	bl	80017fe <lfs_tag_type2>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e6e:	d15e      	bne.n	8002f2e <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8002e70:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002e76:	69dc      	ldr	r4, [r3, #28]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e7e:	3204      	adds	r2, #4
 8002e80:	2104      	movs	r1, #4
 8002e82:	9103      	str	r1, [sp, #12]
 8002e84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e88:	9102      	str	r1, [sp, #8]
 8002e8a:	9201      	str	r2, [sp, #4]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	4623      	mov	r3, r4
 8002e90:	4602      	mov	r2, r0
 8002e92:	2100      	movs	r1, #0
 8002e94:	6978      	ldr	r0, [r7, #20]
 8002e96:	f7fe f85d 	bl	8000f54 <lfs_bd_read>
 8002e9a:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8002e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 8002ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002ea8:	f000 817b 	beq.w	80031a2 <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 8002eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 8002eae:	e255      	b.n	800335c <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd ffe6 	bl	8000e84 <lfs_fromle32>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	f040 8170 	bne.w	80031a6 <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fcb6 	bl	800183a <lfs_tag_chunk>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	07db      	lsls	r3, r3, #31
 8002ed2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ed4:	4053      	eors	r3, r2
 8002ed6:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 ff3a 	bl	8007d5c <lfs_crc>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef0:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fcd4 	bl	80018a2 <lfs_tag_dsize>
 8002efa:	4602      	mov	r2, r0
 8002efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efe:	441a      	add	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f08:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f10:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002f12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002f18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002f24:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2c:	e73c      	b.n	8002da8 <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8002f2e:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	681c      	ldr	r4, [r3, #0]
 8002f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3e:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fcad 	bl	80018a2 <lfs_tag_dsize>
 8002f48:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002f50:	9203      	str	r2, [sp, #12]
 8002f52:	9302      	str	r3, [sp, #8]
 8002f54:	9501      	str	r5, [sp, #4]
 8002f56:	9400      	str	r4, [sp, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4632      	mov	r2, r6
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7fe f995 	bl	800128e <lfs_bd_crc>
 8002f64:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8002f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d006      	beq.n	8002f7a <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 8002f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f6e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002f72:	f000 811a 	beq.w	80031aa <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 8002f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f78:	e1f0      	b.n	800335c <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fc2f 	bl	80017e0 <lfs_tag_type1>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fc6e 	bl	800186c <lfs_tag_id>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	f200 80b5 	bhi.w	8003108 <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe fc63 	bl	800186c <lfs_tag_id>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002fae:	e0ab      	b.n	8003108 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fc14 	bl	80017e0 <lfs_tag_type1>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbe:	d139      	bne.n	8003034 <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fc45 	bl	8001852 <lfs_tag_splice>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002fd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fd8:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <lfs_dir_fetchmatch+0x414>)
 8002fda:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002fdc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002fe0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 8002fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ff2:	e089      	b.n	8003108 <lfs_dir_fetchmatch+0x524>
 8002ff4:	080112e4 	.word	0x080112e4
 8002ff8:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8002ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	f000 8081 	beq.w	8003108 <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fc2f 	bl	800186c <lfs_tag_id>
 800300e:	4603      	mov	r3, r0
 8003010:	461c      	mov	r4, r3
 8003012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fc29 	bl	800186c <lfs_tag_id>
 800301a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800301c:	429c      	cmp	r4, r3
 800301e:	d873      	bhi.n	8003108 <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fc15 	bl	8001852 <lfs_tag_splice>
 8003028:	4603      	mov	r3, r0
 800302a:	029a      	lsls	r2, r3, #10
 800302c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800302e:	4413      	add	r3, r2
 8003030:	663b      	str	r3, [r7, #96]	; 0x60
 8003032:	e069      	b.n	8003108 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fbd2 	bl	80017e0 <lfs_tag_type1>
 800303c:	4603      	mov	r3, r0
 800303e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003042:	d132      	bne.n	80030aa <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fbf7 	bl	800183a <lfs_tag_chunk>
 800304c:	4603      	mov	r3, r0
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 800305e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8003064:	69dc      	ldr	r4, [r3, #28]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800306c:	3204      	adds	r2, #4
 800306e:	2108      	movs	r1, #8
 8003070:	9103      	str	r1, [sp, #12]
 8003072:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003076:	9102      	str	r1, [sp, #8]
 8003078:	9201      	str	r2, [sp, #4]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	4623      	mov	r3, r4
 800307e:	4602      	mov	r2, r0
 8003080:	2100      	movs	r1, #0
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f7fd ff66 	bl	8000f54 <lfs_bd_read>
 8003088:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800308a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 8003090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003092:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003096:	f000 808a 	beq.w	80031ae <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800309a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309c:	e15e      	b.n	800335c <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 800309e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fb49 	bl	800173a <lfs_pair_fromle32>
 80030a8:	e02e      	b.n	8003108 <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fbb5 	bl	800181c <lfs_tag_type3>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d124      	bne.n	8003108 <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 80030be:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80030c4:	69dc      	ldr	r4, [r3, #28]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030cc:	3204      	adds	r2, #4
 80030ce:	2108      	movs	r1, #8
 80030d0:	9103      	str	r1, [sp, #12]
 80030d2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80030d6:	9102      	str	r1, [sp, #8]
 80030d8:	9201      	str	r2, [sp, #4]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	4623      	mov	r3, r4
 80030de:	4602      	mov	r2, r0
 80030e0:	2100      	movs	r1, #0
 80030e2:	6978      	ldr	r0, [r7, #20]
 80030e4:	f7fd ff36 	bl	8000f54 <lfs_bd_read>
 80030e8:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 80030ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 80030f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80030f6:	d05c      	beq.n	80031b2 <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 80030f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fccd 	bl	8001a9c <lfs_fcrc_fromle32>
                hasfcrc = true;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8003108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800310e:	405a      	eors	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	f47f ae47 	bne.w	8002da8 <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800311a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003120:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
 8003128:	f107 0220 	add.w	r2, r7, #32
 800312c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003130:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003134:	4798      	blx	r3
 8003136:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8003138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313a:	2b00      	cmp	r3, #0
 800313c:	da05      	bge.n	800314a <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 800313e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003140:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003144:	d037      	beq.n	80031b6 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 8003146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8003148:	e108      	b.n	800335c <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 800314a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	663b      	str	r3, [r7, #96]	; 0x60
 8003154:	e628      	b.n	8002da8 <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8003156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800315a:	405a      	eors	r2, r3
 800315c:	4b81      	ldr	r3, [pc, #516]	; (8003364 <lfs_dir_fetchmatch+0x780>)
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8003164:	f04f 33ff 	mov.w	r3, #4294967295
 8003168:	663b      	str	r3, [r7, #96]	; 0x60
 800316a:	e61d      	b.n	8002da8 <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 800316c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800316e:	2b02      	cmp	r3, #2
 8003170:	f47f ae1a 	bne.w	8002da8 <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fb78 	bl	800186c <lfs_tag_id>
 800317c:	4603      	mov	r3, r0
 800317e:	461c      	mov	r4, r3
 8003180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe fb72 	bl	800186c <lfs_tag_id>
 8003188:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800318a:	429c      	cmp	r4, r3
 800318c:	f63f ae0c 	bhi.w	8002da8 <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003196:	663b      	str	r3, [r7, #96]	; 0x60
 8003198:	e606      	b.n	8002da8 <lfs_dir_fetchmatch+0x1c4>
                    break;
 800319a:	bf00      	nop
 800319c:	e00c      	b.n	80031b8 <lfs_dir_fetchmatch+0x5d4>
                break;
 800319e:	bf00      	nop
 80031a0:	e00a      	b.n	80031b8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80031a2:	bf00      	nop
 80031a4:	e008      	b.n	80031b8 <lfs_dir_fetchmatch+0x5d4>
                    break;
 80031a6:	bf00      	nop
 80031a8:	e006      	b.n	80031b8 <lfs_dir_fetchmatch+0x5d4>
                    break;
 80031aa:	bf00      	nop
 80031ac:	e004      	b.n	80031b8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80031ae:	bf00      	nop
 80031b0:	e002      	b.n	80031b8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80031b2:	bf00      	nop
 80031b4:	e000      	b.n	80031b8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80031b6:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d000      	beq.n	80031c2 <lfs_dir_fetchmatch+0x5de>
 80031c0:	e016      	b.n	80031f0 <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fa35 	bl	8001634 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 80031ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031cc:	3301      	adds	r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	bfb8      	it	lt
 80031d6:	425b      	neglt	r3, r3
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80031de:	4413      	add	r3, r2
 80031e0:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 80031e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ea:	3301      	adds	r3, #1
 80031ec:	673b      	str	r3, [r7, #112]	; 0x70
 80031ee:	e0a1      	b.n	8003334 <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2200      	movs	r2, #0
 80031f4:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 80031f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d03a      	beq.n	8003274 <lfs_dir_fetchmatch+0x690>
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003206:	6992      	ldr	r2, [r2, #24]
 8003208:	fbb3 f1f2 	udiv	r1, r3, r2
 800320c:	fb02 f201 	mul.w	r2, r2, r1
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d12e      	bne.n	8003274 <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8003216:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800321a:	2b00      	cmp	r3, #0
 800321c:	d02a      	beq.n	8003274 <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8003224:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 800322a:	69dd      	ldr	r5, [r3, #28]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	68d2      	ldr	r2, [r2, #12]
 8003234:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003236:	f107 001c 	add.w	r0, r7, #28
 800323a:	9003      	str	r0, [sp, #12]
 800323c:	9102      	str	r1, [sp, #8]
 800323e:	9201      	str	r2, [sp, #4]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	462b      	mov	r3, r5
 8003244:	4622      	mov	r2, r4
 8003246:	2100      	movs	r1, #0
 8003248:	6978      	ldr	r0, [r7, #20]
 800324a:	f7fe f820 	bl	800128e <lfs_bd_crc>
 800324e:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8003250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <lfs_dir_fetchmatch+0x67e>
 8003256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003258:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800325c:	d001      	beq.n	8003262 <lfs_dir_fetchmatch+0x67e>
                    return err;
 800325e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003260:	e07c      	b.n	800335c <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8003262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	429a      	cmp	r2, r3
 8003268:	bf0c      	ite	eq
 800326a:	2301      	moveq	r3, #1
 800326c:	2300      	movne	r3, #0
 800326e:	b2da      	uxtb	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	333c      	adds	r3, #60	; 0x3c
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fbad 	bl	80019dc <lfs_gstate_hasmovehere>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d028      	beq.n	80032da <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe faed 	bl	800186c <lfs_tag_id>
 8003292:	4603      	mov	r3, r0
 8003294:	461c      	mov	r4, r3
 8003296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fae7 	bl	800186c <lfs_tag_id>
 800329e:	4603      	mov	r3, r0
 80032a0:	429c      	cmp	r4, r3
 80032a2:	d104      	bne.n	80032ae <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 80032a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032ac:	e015      	b.n	80032da <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 80032ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d011      	beq.n	80032da <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fad6 	bl	800186c <lfs_tag_id>
 80032c0:	4603      	mov	r3, r0
 80032c2:	461c      	mov	r4, r3
 80032c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fad0 	bl	800186c <lfs_tag_id>
 80032cc:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 80032ce:	429c      	cmp	r4, r3
 80032d0:	d203      	bcs.n	80032da <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 80032d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80032d8:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 80032da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80032e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fac1 	bl	800186c <lfs_tag_id>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	8a9b      	ldrh	r3, [r3, #20]
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7fd fd5a 	bl	8000dae <lfs_min>
 80032fa:	4603      	mov	r3, r0
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003302:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8003304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fa4b 	bl	80017a2 <lfs_tag_isvalid>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <lfs_dir_fetchmatch+0x732>
            return besttag;
 8003312:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003314:	e022      	b.n	800335c <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8003316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe faa7 	bl	800186c <lfs_tag_id>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	8a9b      	ldrh	r3, [r3, #20]
 8003326:	429a      	cmp	r2, r3
 8003328:	d202      	bcs.n	8003330 <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 800332a:	f06f 0301 	mvn.w	r3, #1
 800332e:	e015      	b.n	800335c <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 8003330:	2300      	movs	r3, #0
 8003332:	e013      	b.n	800335c <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 8003334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003336:	2b01      	cmp	r3, #1
 8003338:	f77f ad02 	ble.w	8002d40 <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4908      	ldr	r1, [pc, #32]	; (8003368 <lfs_dir_fetchmatch+0x784>)
 8003346:	9101      	str	r1, [sp, #4]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	f240 5242 	movw	r2, #1346	; 0x542
 8003350:	4906      	ldr	r1, [pc, #24]	; (800336c <lfs_dir_fetchmatch+0x788>)
 8003352:	4807      	ldr	r0, [pc, #28]	; (8003370 <lfs_dir_fetchmatch+0x78c>)
 8003354:	f00a faa8 	bl	800d8a8 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8003358:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800335c:	4618      	mov	r0, r3
 800335e:	3784      	adds	r7, #132	; 0x84
 8003360:	46bd      	mov	sp, r7
 8003362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003364:	7ffffc00 	.word	0x7ffffc00
 8003368:	080112a0 	.word	0x080112a0
 800336c:	08011198 	.word	0x08011198
 8003370:	080112ac 	.word	0x080112ac

08003374 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af04      	add	r7, sp, #16
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8003380:	2300      	movs	r3, #0
 8003382:	9303      	str	r3, [sp, #12]
 8003384:	2300      	movs	r3, #0
 8003386:	9302      	str	r3, [sp, #8]
 8003388:	2300      	movs	r3, #0
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	f04f 33ff 	mov.w	r3, #4294967295
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff fc22 	bl	8002be4 <lfs_dir_fetchmatch>
 80033a0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80033b8:	f107 0310 	add.w	r3, r7, #16
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <lfs_dir_getgstate+0x5c>)
 80033c0:	4a12      	ldr	r2, [pc, #72]	; (800340c <lfs_dir_getgstate+0x60>)
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7fe feab 	bl	8002120 <lfs_dir_get>
 80033ca:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	da05      	bge.n	80033de <lfs_dir_getgstate+0x32>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f113 0f02 	cmn.w	r3, #2
 80033d8:	d001      	beq.n	80033de <lfs_dir_getgstate+0x32>
        return res;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	e00f      	b.n	80033fe <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f113 0f02 	cmn.w	r3, #2
 80033e4:	d00a      	beq.n	80033fc <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80033e6:	f107 0310 	add.w	r3, r7, #16
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fb16 	bl	8001a1c <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80033f0:	f107 0310 	add.w	r3, r7, #16
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fa67 	bl	80018ca <lfs_gstate_xor>
    }

    return 0;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	7ff0000c 	.word	0x7ff0000c
 800340c:	7ff00000 	.word	0x7ff00000

08003410 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003426:	4293      	cmp	r3, r2
 8003428:	d10b      	bne.n	8003442 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	3308      	adds	r3, #8
 800342e:	4932      	ldr	r1, [pc, #200]	; (80034f8 <lfs_dir_getinfo+0xe8>)
 8003430:	461a      	mov	r2, r3
 8003432:	460b      	mov	r3, r1
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2202      	movs	r2, #2
 800343c:	701a      	strb	r2, [r3, #0]
        return 0;
 800343e:	2300      	movs	r3, #0
 8003440:	e055      	b.n	80034ee <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	029a      	lsls	r2, r3, #10
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800344c:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	4a29      	ldr	r2, [pc, #164]	; (80034fc <lfs_dir_getinfo+0xec>)
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7fe fe60 	bl	8002120 <lfs_dir_get>
 8003460:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	da01      	bge.n	800346c <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	e040      	b.n	80034ee <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe f9d4 	bl	800181c <lfs_tag_type3>
 8003474:	4603      	mov	r3, r0
 8003476:	b2da      	uxtb	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	f107 0214 	add.w	r2, r7, #20
 800348c:	9200      	str	r2, [sp, #0]
 800348e:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <lfs_dir_getinfo+0xf0>)
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7fe fe44 	bl	8002120 <lfs_dir_get>
 8003498:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	2b00      	cmp	r3, #0
 800349e:	da01      	bge.n	80034a4 <lfs_dir_getinfo+0x94>
        return (int)tag;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	e024      	b.n	80034ee <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fb27 	bl	8001afc <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe f9b3 	bl	800181c <lfs_tag_type3>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	f240 2302 	movw	r3, #514	; 0x202
 80034be:	429a      	cmp	r2, r3
 80034c0:	d103      	bne.n	80034ca <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	e010      	b.n	80034ec <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe f9a5 	bl	800181c <lfs_tag_type3>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	f240 2301 	movw	r3, #513	; 0x201
 80034da:	429a      	cmp	r2, r3
 80034dc:	d106      	bne.n	80034ec <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe f9d2 	bl	800188a <lfs_tag_size>
 80034e6:	4602      	mov	r2, r0
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	605a      	str	r2, [r3, #4]
    }

    return 0;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	080112ec 	.word	0x080112ec
 80034fc:	780ffc00 	.word	0x780ffc00
 8003500:	700ffc00 	.word	0x700ffc00

08003504 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b08f      	sub	sp, #60	; 0x3c
 8003508:	af04      	add	r7, sp, #16
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	689c      	ldr	r4, [r3, #8]
 8003522:	68b8      	ldr	r0, [r7, #8]
 8003524:	f7fe f9b1 	bl	800188a <lfs_tag_size>
 8003528:	4603      	mov	r3, r0
 800352a:	4619      	mov	r1, r3
 800352c:	4620      	mov	r0, r4
 800352e:	f7fd fc3e 	bl	8000dae <lfs_min>
 8003532:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8003534:	6a3c      	ldr	r4, [r7, #32]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	6852      	ldr	r2, [r2, #4]
 800353e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003540:	6849      	ldr	r1, [r1, #4]
 8003542:	69b8      	ldr	r0, [r7, #24]
 8003544:	9003      	str	r0, [sp, #12]
 8003546:	9102      	str	r1, [sp, #8]
 8003548:	9201      	str	r2, [sp, #4]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4622      	mov	r2, r4
 8003550:	2100      	movs	r1, #0
 8003552:	6a38      	ldr	r0, [r7, #32]
 8003554:	f7fd fe4a 	bl	80011ec <lfs_bd_cmp>
 8003558:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <lfs_dir_find_match+0x60>
        return res;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	e014      	b.n	800358e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	689c      	ldr	r4, [r3, #8]
 8003568:	68b8      	ldr	r0, [r7, #8]
 800356a:	f7fe f98e 	bl	800188a <lfs_tag_size>
 800356e:	4603      	mov	r3, r0
 8003570:	429c      	cmp	r4, r3
 8003572:	d00b      	beq.n	800358c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	689c      	ldr	r4, [r3, #8]
 8003578:	68b8      	ldr	r0, [r7, #8]
 800357a:	f7fe f986 	bl	800188a <lfs_tag_size>
 800357e:	4603      	mov	r3, r0
 8003580:	429c      	cmp	r4, r3
 8003582:	d201      	bcs.n	8003588 <lfs_dir_find_match+0x84>
 8003584:	2301      	movs	r3, #1
 8003586:	e002      	b.n	800358e <lfs_dir_find_match+0x8a>
 8003588:	2302      	movs	r3, #2
 800358a:	e000      	b.n	800358e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	372c      	adds	r7, #44	; 0x2c
 8003592:	46bd      	mov	sp, r7
 8003594:	bd90      	pop	{r4, r7, pc}
	...

08003598 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b093      	sub	sp, #76	; 0x4c
 800359c:	af04      	add	r7, sp, #16
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <lfs_dir_find+0x22>
        *id = 0x3ff;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80035b8:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 80035ba:	4b6e      	ldr	r3, [pc, #440]	; (8003774 <lfs_dir_find+0x1dc>)
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 80035ce:	496a      	ldr	r1, [pc, #424]	; (8003778 <lfs_dir_find+0x1e0>)
 80035d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035d2:	f00a fa7d 	bl	800dad0 <strspn>
 80035d6:	4602      	mov	r2, r0
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	4413      	add	r3, r2
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 80035de:	4966      	ldr	r1, [pc, #408]	; (8003778 <lfs_dir_find+0x1e0>)
 80035e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035e2:	f00a fa64 	bl	800daae <strcspn>
 80035e6:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <lfs_dir_find+0x62>
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	4b62      	ldr	r3, [pc, #392]	; (800377c <lfs_dir_find+0x1e4>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d00a      	beq.n	8003610 <lfs_dir_find+0x78>
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d10c      	bne.n	800361a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8003600:	2202      	movs	r2, #2
 8003602:	495f      	ldr	r1, [pc, #380]	; (8003780 <lfs_dir_find+0x1e8>)
 8003604:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003606:	f009 f8bb 	bl	800c780 <memcmp>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <lfs_dir_find+0x82>
            name += namelen;
 8003610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	4413      	add	r3, r2
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8003618:	e7d9      	b.n	80035ce <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800361a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	4413      	add	r3, r2
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8003626:	4954      	ldr	r1, [pc, #336]	; (8003778 <lfs_dir_find+0x1e0>)
 8003628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800362a:	f00a fa51 	bl	800dad0 <strspn>
 800362e:	4602      	mov	r2, r0
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	4413      	add	r3, r2
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8003636:	4950      	ldr	r1, [pc, #320]	; (8003778 <lfs_dir_find+0x1e0>)
 8003638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800363a:	f00a fa38 	bl	800daae <strcspn>
 800363e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01d      	beq.n	8003682 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d112      	bne.n	8003672 <lfs_dir_find+0xda>
 800364c:	2202      	movs	r2, #2
 800364e:	494c      	ldr	r1, [pc, #304]	; (8003780 <lfs_dir_find+0x1e8>)
 8003650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003652:	f009 f895 	bl	800c780 <memcmp>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <lfs_dir_find+0xda>
                depth -= 1;
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	3b01      	subs	r3, #1
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8003668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	4413      	add	r3, r2
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8003670:	e7ad      	b.n	80035ce <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	3301      	adds	r3, #1
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8003678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	4413      	add	r3, r2
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8003680:	e7d1      	b.n	8003626 <lfs_dir_find+0x8e>
                break;
 8003682:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8003684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <lfs_dir_find+0xf8>
            return tag;
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	e06c      	b.n	800376a <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003694:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe f8bf 	bl	800181c <lfs_tag_type3>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d002      	beq.n	80036aa <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80036a4:	f06f 0313 	mvn.w	r3, #19
 80036a8:	e05f      	b.n	800376a <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe f8dd 	bl	800186c <lfs_tag_id>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d01c      	beq.n	80036f8 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe f8d3 	bl	800186c <lfs_tag_id>
 80036c6:	4603      	mov	r3, r0
 80036c8:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80036ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036ce:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80036d6:	9200      	str	r2, [sp, #0]
 80036d8:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <lfs_dir_find+0x1ec>)
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7fe fd1f 	bl	8002120 <lfs_dir_get>
 80036e2:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da01      	bge.n	80036ee <lfs_dir_find+0x156>
                return res;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	e03d      	b.n	800376a <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	3318      	adds	r3, #24
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe f821 	bl	800173a <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 80036fe:	212f      	movs	r1, #47	; 0x2f
 8003700:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003702:	f00a f9c7 	bl	800da94 <strchr>
 8003706:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <lfs_dir_find+0x178>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	e000      	b.n	8003712 <lfs_dir_find+0x17a>
 8003710:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	613a      	str	r2, [r7, #16]
 8003716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003718:	617a      	str	r2, [r7, #20]
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800371e:	f107 0210 	add.w	r2, r7, #16
 8003722:	9203      	str	r2, [sp, #12]
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <lfs_dir_find+0x1f0>)
 8003726:	9202      	str	r2, [sp, #8]
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8003732:	4622      	mov	r2, r4
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fa54 	bl	8002be4 <lfs_dir_fetchmatch>
 800373c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	2b00      	cmp	r3, #0
 8003742:	da01      	bge.n	8003748 <lfs_dir_find+0x1b0>
                return tag;
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	e010      	b.n	800376a <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800374e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	4413      	add	r3, r2
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8003756:	e73a      	b.n	80035ce <lfs_dir_find+0x36>
            if (!dir->split) {
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	7ddb      	ldrb	r3, [r3, #23]
 800375c:	f083 0301 	eor.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0c8      	beq.n	80036f8 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8003766:	f06f 0301 	mvn.w	r3, #1
    }
}
 800376a:	4618      	mov	r0, r3
 800376c:	373c      	adds	r7, #60	; 0x3c
 800376e:	46bd      	mov	sp, r7
 8003770:	bd90      	pop	{r4, r7, pc}
 8003772:	bf00      	nop
 8003774:	002ffc00 	.word	0x002ffc00
 8003778:	080112ec 	.word	0x080112ec
 800377c:	080112f0 	.word	0x080112f0
 8003780:	080112f4 	.word	0x080112f4
 8003784:	700ffc00 	.word	0x700ffc00
 8003788:	08003505 	.word	0x08003505

0800378c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b08b      	sub	sp, #44	; 0x2c
 8003790:	af04      	add	r7, sp, #16
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f103 0010 	add.w	r0, r3, #16
 80037a0:	68fc      	ldr	r4, [r7, #12]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	6852      	ldr	r2, [r2, #4]
 80037aa:	6839      	ldr	r1, [r7, #0]
 80037ac:	9103      	str	r1, [sp, #12]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	9102      	str	r1, [sp, #8]
 80037b2:	9201      	str	r2, [sp, #4]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	2300      	movs	r3, #0
 80037b8:	4622      	mov	r2, r4
 80037ba:	4601      	mov	r1, r0
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7fd fe5b 	bl	8001478 <lfs_bd_prog>
 80037c2:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <lfs_dir_commitprog+0x42>
        return err;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	e010      	b.n	80037f0 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f004 fac0 	bl	8007d5c <lfs_crc>
 80037dc:	4602      	mov	r2, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	60da      	str	r2, [r3, #12]
    commit->off += size;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	441a      	add	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	605a      	str	r2, [r3, #4]
    return 0;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd90      	pop	{r4, r7, pc}

080037f8 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b08f      	sub	sp, #60	; 0x3c
 80037fc:	af04      	add	r7, sp, #16
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fe f84b 	bl	80018a2 <lfs_tag_dsize>
 800380c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	441a      	add	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	429a      	cmp	r2, r3
 800381c:	d902      	bls.n	8003824 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800381e:	f06f 031b 	mvn.w	r3, #27
 8003822:	e065      	b.n	80038f0 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4053      	eors	r3, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd fb48 	bl	8000ec6 <lfs_tobe32>
 8003836:	4603      	mov	r3, r0
 8003838:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800383a:	f107 0214 	add.w	r2, r7, #20
 800383e:	2304      	movs	r3, #4
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff ffa2 	bl	800378c <lfs_dir_commitprog>
 8003848:	61f8      	str	r0, [r7, #28]
    if (err) {
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <lfs_dir_commitattr+0x5c>
        return err;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	e04d      	b.n	80038f0 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	db0c      	blt.n	8003874 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	3b04      	subs	r3, #4
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff ff92 	bl	800378c <lfs_dir_commitprog>
 8003868:	61f8      	str	r0, [r7, #28]
        if (err) {
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d039      	beq.n	80038e4 <lfs_dir_commitattr+0xec>
            return err;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	e03d      	b.n	80038f0 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	e02d      	b.n	80038da <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800387e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003886:	1f1c      	subs	r4, r3, #4
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8003890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003892:	440a      	add	r2, r1
 8003894:	2101      	movs	r1, #1
 8003896:	9103      	str	r1, [sp, #12]
 8003898:	f107 0113 	add.w	r1, r7, #19
 800389c:	9102      	str	r1, [sp, #8]
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4623      	mov	r3, r4
 80038a4:	4602      	mov	r2, r0
 80038a6:	2100      	movs	r1, #0
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7fd fb53 	bl	8000f54 <lfs_bd_read>
 80038ae:	61f8      	str	r0, [r7, #28]
            if (err) {
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <lfs_dir_commitattr+0xc2>
                return err;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	e01a      	b.n	80038f0 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 80038ba:	f107 0213 	add.w	r2, r7, #19
 80038be:	2301      	movs	r3, #1
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f7ff ff62 	bl	800378c <lfs_dir_commitprog>
 80038c8:	61f8      	str	r0, [r7, #28]
            if (err) {
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <lfs_dir_commitattr+0xdc>
                return err;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	e00d      	b.n	80038f0 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	3301      	adds	r3, #1
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	3b04      	subs	r3, #4
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3cc      	bcc.n	800387e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	609a      	str	r2, [r3, #8]
    return 0;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	372c      	adds	r7, #44	; 0x2c
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd90      	pop	{r4, r7, pc}

080038f8 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b097      	sub	sp, #92	; 0x5c
 80038fc:	af04      	add	r7, sp, #16
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8003906:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f7fd fa4b 	bl	8000dae <lfs_min>
 8003918:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f7fd fa66 	bl	8000df4 <lfs_alignup>
 8003928:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8003932:	e0fe      	b.n	8003b32 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	3b04      	subs	r3, #4
 800393e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fa33 	bl	8000dae <lfs_min>
 8003948:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4413      	add	r3, r2
        lfs_off_t noff = (
 8003950:	3304      	adds	r3, #4
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8003954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003958:	429a      	cmp	r2, r3
 800395a:	d206      	bcs.n	800396a <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	3b14      	subs	r3, #20
 8003960:	4619      	mov	r1, r3
 8003962:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003964:	f7fd fa23 	bl	8000dae <lfs_min>
 8003968:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800396a:	23ff      	movs	r3, #255	; 0xff
 800396c:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800396e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003972:	429a      	cmp	r2, r3
 8003974:	d35f      	bcc.n	8003a36 <lfs_dir_commitcrc+0x13e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003986:	429a      	cmp	r2, r3
 8003988:	d855      	bhi.n	8003a36 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800398a:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8003990:	6998      	ldr	r0, [r3, #24]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2201      	movs	r2, #1
 8003998:	9203      	str	r2, [sp, #12]
 800399a:	f107 021b 	add.w	r2, r7, #27
 800399e:	9202      	str	r2, [sp, #8]
 80039a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039a2:	9201      	str	r2, [sp, #4]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	4603      	mov	r3, r0
 80039a8:	460a      	mov	r2, r1
 80039aa:	2100      	movs	r1, #0
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd fad1 	bl	8000f54 <lfs_bd_read>
 80039b2:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <lfs_dir_commitcrc+0xce>
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80039c0:	d001      	beq.n	80039c6 <lfs_dir_commitcrc+0xce>
                return err;
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	e101      	b.n	8003bca <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ca:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
 80039d2:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 80039d4:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 80039da:	699c      	ldr	r4, [r3, #24]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	f107 0108 	add.w	r1, r7, #8
 80039e6:	3104      	adds	r1, #4
 80039e8:	9103      	str	r1, [sp, #12]
 80039ea:	9202      	str	r2, [sp, #8]
 80039ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ee:	9201      	str	r2, [sp, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	4623      	mov	r3, r4
 80039f4:	4602      	mov	r2, r0
 80039f6:	2100      	movs	r1, #0
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fd fc48 	bl	800128e <lfs_bd_crc>
 80039fe:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <lfs_dir_commitcrc+0x11a>
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003a0c:	d001      	beq.n	8003a12 <lfs_dir_commitcrc+0x11a>
                    return err;
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	e0db      	b.n	8003bca <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8003a12:	f107 0308 	add.w	r3, r7, #8
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe f858 	bl	8001acc <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	4a6c      	ldr	r2, [pc, #432]	; (8003bd4 <lfs_dir_commitcrc+0x2dc>)
 8003a22:	6839      	ldr	r1, [r7, #0]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fee7 	bl	80037f8 <lfs_dir_commitattr>
 8003a2a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <lfs_dir_commitcrc+0x13e>
                    return err;
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	e0c9      	b.n	8003bca <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8003a36:	7efb      	ldrb	r3, [r7, #27]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	09db      	lsrs	r3, r3, #7
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	051a      	lsls	r2, r3, #20
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a4c:	1acb      	subs	r3, r1, r3
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8003a56:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	4053      	eors	r3, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fd fa2e 	bl	8000ec6 <lfs_tobe32>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f107 0110 	add.w	r1, r7, #16
 8003a76:	2204      	movs	r2, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f004 f96f 	bl	8007d5c <lfs_crc>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd fa05 	bl	8000e98 <lfs_tole32>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f103 0010 	add.w	r0, r3, #16
 8003a98:	687c      	ldr	r4, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	6852      	ldr	r2, [r2, #4]
 8003aa2:	2108      	movs	r1, #8
 8003aa4:	9103      	str	r1, [sp, #12]
 8003aa6:	f107 0110 	add.w	r1, r7, #16
 8003aaa:	9102      	str	r1, [sp, #8]
 8003aac:	9201      	str	r2, [sp, #4]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	4601      	mov	r1, r0
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fcde 	bl	8001478 <lfs_bd_prog>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <lfs_dir_commitcrc+0x1d0>
            return err;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	e080      	b.n	8003bca <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ae0:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8003ae2:	7efb      	ldrb	r3, [r7, #27]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	405a      	eors	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f04f 32ff 	mov.w	r2, #4294967295
 8003afa:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8003afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d208      	bcs.n	8003b16 <lfs_dir_commitcrc+0x21e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	4413      	add	r3, r2
 8003b10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d30d      	bcc.n	8003b32 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f103 0110 	add.w	r1, r3, #16
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fd fc75 	bl	8001410 <lfs_bd_sync>
 8003b26:	6238      	str	r0, [r7, #32]
            if (err) {
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <lfs_dir_commitcrc+0x23a>
                return err;
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	e04b      	b.n	8003bca <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	f63f aefb 	bhi.w	8003934 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
 8003b48:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4e:	1d1c      	adds	r4, r3, #4
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b58:	1a8a      	subs	r2, r1, r2
 8003b5a:	f107 011c 	add.w	r1, r7, #28
 8003b5e:	9103      	str	r1, [sp, #12]
 8003b60:	9202      	str	r2, [sp, #8]
 8003b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b64:	9201      	str	r2, [sp, #4]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	4623      	mov	r3, r4
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fb8d 	bl	800128e <lfs_bd_crc>
 8003b74:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <lfs_dir_commitcrc+0x288>
        return err;
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	e024      	b.n	8003bca <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d002      	beq.n	8003b8e <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8003b88:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003b8c:	e01d      	b.n	8003bca <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f107 021c 	add.w	r2, r7, #28
 8003b98:	9203      	str	r2, [sp, #12]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	9202      	str	r2, [sp, #8]
 8003b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba0:	9201      	str	r2, [sp, #4]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	2100      	movs	r1, #0
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd fb6f 	bl	800128e <lfs_bd_crc>
 8003bb0:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <lfs_dir_commitcrc+0x2c4>
        return err;
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	e006      	b.n	8003bca <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8003bc2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003bc6:	e000      	b.n	8003bca <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	374c      	adds	r7, #76	; 0x4c
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd90      	pop	{r4, r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	5ffffc08 	.word	0x5ffffc08

08003bd8 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af04      	add	r7, sp, #16
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e016      	b.n	8003c16 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3301      	adds	r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	bfb8      	it	lt
 8003bf4:	425b      	neglt	r3, r3
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe f926 	bl	8001e50 <lfs_alloc>
 8003c04:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <lfs_dir_alloc+0x38>
            return err;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	e058      	b.n	8003cc2 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3301      	adds	r3, #1
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	dde5      	ble.n	8003be8 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8003c2c:	2004      	movs	r0, #4
 8003c2e:	9003      	str	r0, [sp, #12]
 8003c30:	9202      	str	r2, [sp, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	9201      	str	r2, [sp, #4]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2304      	movs	r3, #4
 8003c3a:	460a      	mov	r2, r1
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd f988 	bl	8000f54 <lfs_bd_read>
 8003c44:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fd f91a 	bl	8000e84 <lfs_fromle32>
 8003c50:	4602      	mov	r2, r0
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <lfs_dir_alloc+0x90>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003c62:	d001      	beq.n	8003c68 <lfs_dir_alloc+0x90>
        return err;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	e02c      	b.n	8003cc2 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	dd0e      	ble.n	8003c90 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f7fd f8b5 	bl	8000df4 <lfs_alignup>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2204      	movs	r2, #4
 8003c94:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8003caa:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb2:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b092      	sub	sp, #72	; 0x48
 8003cce:	af04      	add	r7, sp, #16
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003cd8:	f107 0310 	add.w	r3, r7, #16
 8003cdc:	4619      	mov	r1, r3
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7ff ff7a 	bl	8003bd8 <lfs_dir_alloc>
 8003ce4:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <lfs_dir_split+0x26>
        return err;
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	e03c      	b.n	8003d6a <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	7ddb      	ldrb	r3, [r3, #23]
 8003cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003d04:	f107 0110 	add.w	r1, r7, #16
 8003d08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d0c:	9302      	str	r3, [sp, #8]
 8003d0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f879 	bl	8003e14 <lfs_dir_compact>
 8003d22:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da01      	bge.n	8003d2e <lfs_dir_split+0x64>
        return res;
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	e01d      	b.n	8003d6a <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3320      	adds	r3, #32
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f7fd fca1 	bl	8001690 <lfs_pair_cmp>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <lfs_dir_split+0x9e>
 8003d54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3738      	adds	r7, #56	; 0x38
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8003d82:	68b8      	ldr	r0, [r7, #8]
 8003d84:	f7fd fd8d 	bl	80018a2 <lfs_tag_dsize>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	441a      	add	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	601a      	str	r2, [r3, #0]
    return 0;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	6859      	ldr	r1, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	f7ff fd1d 	bl	80037f8 <lfs_dir_commitattr>
 8003dbe:	4603      	mov	r3, r0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	dd11      	ble.n	8003e00 <lfs_dir_needsrelocation+0x38>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	3301      	adds	r3, #1
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003de6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003de8:	3201      	adds	r2, #1
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	fbb3 f1f2 	udiv	r1, r3, r2
 8003df2:	fb02 f201 	mul.w	r2, r2, r1
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <lfs_dir_needsrelocation+0x38>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <lfs_dir_needsrelocation+0x3a>
 8003e00:	2300      	movs	r3, #0
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr
	...

08003e14 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b0a4      	sub	sp, #144	; 0x90
 8003e18:	af0a      	add	r7, sp, #40	; 0x28
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff ffcc 	bl	8003dc8 <lfs_dir_needsrelocation>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003e40:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <lfs_dir_compact+0x52>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	657a      	str	r2, [r7, #84]	; 0x54
 8003e4e:	2201      	movs	r2, #1
 8003e50:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e52:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fd fc19 	bl	8001690 <lfs_pair_cmp>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 8155 	bne.w	8004110 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8003e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
 8003e74:	647b      	str	r3, [r7, #68]	; 0x44
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d004      	beq.n	8003e94 <lfs_dir_compact+0x80>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e90:	3b08      	subs	r3, #8
 8003e92:	e003      	b.n	8003e9c <lfs_dir_compact+0x88>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003e9c:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7fd fb93 	bl	80015d0 <lfs_bd_erase>
 8003eaa:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003eb8:	f000 812c 	beq.w	8004114 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ebe:	e187      	b.n	80041d0 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fc ffe7 	bl	8000e98 <lfs_tole32>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003ed6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003eda:	2304      	movs	r3, #4
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7ff fc55 	bl	800378c <lfs_dir_commitprog>
 8003ee2:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc ffcb 	bl	8000e84 <lfs_fromle32>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]
            if (err) {
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8003efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003f00:	f000 810a 	beq.w	8004118 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f06:	e163      	b.n	80041d0 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003f08:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003f0c:	425b      	negs	r3, r3
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	637a      	str	r2, [r7, #52]	; 0x34
 8003f16:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003f1a:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003f1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f20:	9208      	str	r2, [sp, #32]
 8003f22:	4aad      	ldr	r2, [pc, #692]	; (80041d8 <lfs_dir_compact+0x3c4>)
 8003f24:	9207      	str	r2, [sp, #28]
 8003f26:	9306      	str	r3, [sp, #24]
 8003f28:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003f2c:	9305      	str	r3, [sp, #20]
 8003f2e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003f32:	9304      	str	r3, [sp, #16]
 8003f34:	2300      	movs	r3, #0
 8003f36:	9303      	str	r3, [sp, #12]
 8003f38:	4ba8      	ldr	r3, [pc, #672]	; (80041dc <lfs_dir_compact+0x3c8>)
 8003f3a:	9302      	str	r3, [sp, #8]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	2200      	movs	r2, #0
 8003f4a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7fe fa39 	bl	80023c4 <lfs_dir_traverse>
 8003f52:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8003f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003f60:	f000 80dc 	beq.w	800411c <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f66:	e133      	b.n	80041d0 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3318      	adds	r3, #24
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd fb75 	bl	800165c <lfs_pair_isnull>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f083 0301 	eor.w	r3, r3, #1
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d022      	beq.n	8003fc4 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3318      	adds	r3, #24
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd fbf3 	bl	800176e <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	7ddb      	ldrb	r3, [r3, #23]
 8003f8c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003f90:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003f92:	4a93      	ldr	r2, [pc, #588]	; (80041e0 <lfs_dir_compact+0x3cc>)
 8003f94:	431a      	orrs	r2, r3
                        dir->tail);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003f9a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fc2a 	bl	80037f8 <lfs_dir_commitattr>
 8003fa4:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3318      	adds	r3, #24
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd fbc5 	bl	800173a <lfs_pair_fromle32>
                if (err) {
 8003fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003fbc:	f000 80b0 	beq.w	8004120 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc2:	e105      	b.n	80041d0 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003fd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003fd4:	f083 0301 	eor.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d011      	beq.n	8004002 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003fe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd fc6d 	bl	80018ca <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fd fc64 	bl	80018ca <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd fc5b 	bl	80018ca <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004024:	461a      	mov	r2, r3
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7ff f9bf 	bl	80033ac <lfs_dir_getgstate>
 800402e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8004030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <lfs_dir_compact+0x226>
                return err;
 8004036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004038:	e0ca      	b.n	80041d0 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800403a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fc67 	bl	8001912 <lfs_gstate_iszero>
 8004044:	4603      	mov	r3, r0
 8004046:	f083 0301 	eor.w	r3, r3, #1
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d016      	beq.n	800407e <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8004050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004054:	4618      	mov	r0, r3
 8004056:	f7fd fd01 	bl	8001a5c <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800405a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800405e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004062:	4a60      	ldr	r2, [pc, #384]	; (80041e4 <lfs_dir_compact+0x3d0>)
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7ff fbc7 	bl	80037f8 <lfs_dir_commitattr>
 800406a:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800406c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8004072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004074:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004078:	d054      	beq.n	8004124 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800407a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407c:	e0a8      	b.n	80041d0 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800407e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004082:	4619      	mov	r1, r3
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7ff fc37 	bl	80038f8 <lfs_dir_commitcrc>
 800408a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800408c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8004092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004094:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004098:	d046      	beq.n	8004128 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800409a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800409c:	e098      	b.n	80041d0 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800409e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040a4:	6992      	ldr	r2, [r2, #24]
 80040a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80040aa:	fb02 f201 	mul.w	r2, r2, r1
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d006      	beq.n	80040c2 <lfs_dir_compact+0x2ae>
 80040b4:	4b4c      	ldr	r3, [pc, #304]	; (80041e8 <lfs_dir_compact+0x3d4>)
 80040b6:	4a4d      	ldr	r2, [pc, #308]	; (80041ec <lfs_dir_compact+0x3d8>)
 80040b8:	f240 71ef 	movw	r1, #2031	; 0x7ef
 80040bc:	484c      	ldr	r0, [pc, #304]	; (80041f0 <lfs_dir_compact+0x3dc>)
 80040be:	f008 faf5 	bl	800c6ac <__assert_func>
            lfs_pair_swap(dir->pair);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fd fab5 	bl	8001634 <lfs_pair_swap>
            dir->count = end - begin;
 80040ca:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80040ce:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80040da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80040e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3348      	adds	r3, #72	; 0x48
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80040f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80040f6:	f083 0301 	eor.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d064      	beq.n	80041ca <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	333c      	adds	r3, #60	; 0x3c
 8004106:	3230      	adds	r2, #48	; 0x30
 8004108:	ca07      	ldmia	r2, {r0, r1, r2}
 800410a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800410e:	e05c      	b.n	80041ca <lfs_dir_compact+0x3b6>
        goto relocate;
 8004110:	bf00      	nop
 8004112:	e00a      	b.n	800412a <lfs_dir_compact+0x316>
                    goto relocate;
 8004114:	bf00      	nop
 8004116:	e008      	b.n	800412a <lfs_dir_compact+0x316>
                    goto relocate;
 8004118:	bf00      	nop
 800411a:	e006      	b.n	800412a <lfs_dir_compact+0x316>
                    goto relocate;
 800411c:	bf00      	nop
 800411e:	e004      	b.n	800412a <lfs_dir_compact+0x316>
                        goto relocate;
 8004120:	bf00      	nop
 8004122:	e002      	b.n	800412a <lfs_dir_compact+0x316>
                        goto relocate;
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <lfs_dir_compact+0x316>
                    goto relocate;
 8004128:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3310      	adds	r3, #16
 8004134:	4619      	mov	r1, r3
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7fc fee8 	bl	8000f0c <lfs_cache_drop>
        if (!tired) {
 800413c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004140:	f083 0301 	eor.w	r3, r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <lfs_dir_compact+0x3e0>)
 8004150:	9200      	str	r2, [sp, #0]
 8004152:	f640 0201 	movw	r2, #2049	; 0x801
 8004156:	4926      	ldr	r1, [pc, #152]	; (80041f0 <lfs_dir_compact+0x3dc>)
 8004158:	4827      	ldr	r0, [pc, #156]	; (80041f8 <lfs_dir_compact+0x3e4>)
 800415a:	f009 fba5 	bl	800d8a8 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2200      	movs	r2, #0
 8004162:	617a      	str	r2, [r7, #20]
 8004164:	2201      	movs	r2, #1
 8004166:	61ba      	str	r2, [r7, #24]
 8004168:	f107 0214 	add.w	r2, r7, #20
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fa8e 	bl	8001690 <lfs_pair_cmp>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <lfs_dir_compact+0x3e0>)
 8004180:	9200      	str	r2, [sp, #0]
 8004182:	f640 0206 	movw	r2, #2054	; 0x806
 8004186:	491a      	ldr	r1, [pc, #104]	; (80041f0 <lfs_dir_compact+0x3dc>)
 8004188:	481c      	ldr	r0, [pc, #112]	; (80041fc <lfs_dir_compact+0x3e8>)
 800418a:	f009 fb8d 	bl	800d8a8 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800418e:	f06f 031b 	mvn.w	r3, #27
 8004192:	e01d      	b.n	80041d0 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7fd fe58 	bl	8001e50 <lfs_alloc>
 80041a0:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80041a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00c      	beq.n	80041c2 <lfs_dir_compact+0x3ae>
 80041a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041aa:	f113 0f1c 	cmn.w	r3, #28
 80041ae:	d106      	bne.n	80041be <lfs_dir_compact+0x3aa>
 80041b0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <lfs_dir_compact+0x3ae>
            return err;
 80041be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c0:	e006      	b.n	80041d0 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 80041c8:	e64d      	b.n	8003e66 <lfs_dir_compact+0x52>
        break;
 80041ca:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80041cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3768      	adds	r7, #104	; 0x68
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	08003d9f 	.word	0x08003d9f
 80041dc:	400ffc00 	.word	0x400ffc00
 80041e0:	000ffc08 	.word	0x000ffc08
 80041e4:	7ffffc0c 	.word	0x7ffffc0c
 80041e8:	080112f8 	.word	0x080112f8
 80041ec:	08011e88 	.word	0x08011e88
 80041f0:	08011198 	.word	0x08011198
 80041f4:	080112a0 	.word	0x080112a0
 80041f8:	08011320 	.word	0x08011320
 80041fc:	08011344 	.word	0x08011344

08004200 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b097      	sub	sp, #92	; 0x5c
 8004204:	af0a      	add	r7, sp, #40	; 0x28
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800420e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8004214:	e058      	b.n	80042c8 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	b29b      	uxth	r3, r3
 800421e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004220:	b292      	uxth	r2, r2
 8004222:	4252      	negs	r2, r2
 8004224:	b292      	uxth	r2, r2
 8004226:	b212      	sxth	r2, r2
 8004228:	f107 0118 	add.w	r1, r7, #24
 800422c:	9108      	str	r1, [sp, #32]
 800422e:	4978      	ldr	r1, [pc, #480]	; (8004410 <lfs_dir_splittingcompact+0x210>)
 8004230:	9107      	str	r1, [sp, #28]
 8004232:	9206      	str	r2, [sp, #24]
 8004234:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004238:	9205      	str	r2, [sp, #20]
 800423a:	9304      	str	r3, [sp, #16]
 800423c:	2300      	movs	r3, #0
 800423e:	9303      	str	r3, [sp, #12]
 8004240:	4b74      	ldr	r3, [pc, #464]	; (8004414 <lfs_dir_splittingcompact+0x214>)
 8004242:	9302      	str	r3, [sp, #8]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	f04f 33ff 	mov.w	r3, #4294967295
 8004250:	2200      	movs	r2, #0
 8004252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7fe f8b5 	bl	80023c4 <lfs_dir_traverse>
 800425a:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <lfs_dir_splittingcompact+0x66>
                return err;
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	e0d0      	b.n	8004408 <lfs_dir_splittingcompact+0x208>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8004266:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2bfe      	cmp	r3, #254	; 0xfe
 8004270:	d822      	bhi.n	80042b8 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004276:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8004278:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8004282:	2b00      	cmp	r3, #0
 8004284:	d004      	beq.n	8004290 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	e003      	b.n	8004298 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004294:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8004296:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 800429c:	6992      	ldr	r2, [r2, #24]
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc fda7 	bl	8000df4 <lfs_alignup>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4619      	mov	r1, r3
 80042aa:	4620      	mov	r0, r4
 80042ac:	f7fc fd7f 	bl	8000dae <lfs_min>
 80042b0:	4602      	mov	r2, r0
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d20e      	bcs.n	80042d6 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80042b8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c4:	4413      	add	r3, r2
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80042c8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d8a0      	bhi.n	8004216 <lfs_dir_splittingcompact+0x16>
 80042d4:	e000      	b.n	80042d8 <lfs_dir_splittingcompact+0xd8>
                break;
 80042d6:	bf00      	nop
        }

        if (split == begin) {
 80042d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042de:	429a      	cmp	r2, r3
 80042e0:	d02d      	beq.n	800433e <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80042ea:	9202      	str	r2, [sp, #8]
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fce6 	bl	8003cca <lfs_dir_split>
 80042fe:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <lfs_dir_splittingcompact+0x112>
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	f113 0f1c 	cmn.w	r3, #28
 800430c:	d001      	beq.n	8004312 <lfs_dir_splittingcompact+0x112>
            return err;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	e07a      	b.n	8004408 <lfs_dir_splittingcompact+0x208>
        }

        if (err) {
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00e      	beq.n	8004336 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	493d      	ldr	r1, [pc, #244]	; (8004418 <lfs_dir_splittingcompact+0x218>)
 8004322:	9101      	str	r1, [sp, #4]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	f640 0259 	movw	r2, #2137	; 0x859
 800432c:	493b      	ldr	r1, [pc, #236]	; (800441c <lfs_dir_splittingcompact+0x21c>)
 800432e:	483c      	ldr	r0, [pc, #240]	; (8004420 <lfs_dir_splittingcompact+0x220>)
 8004330:	f009 faba 	bl	800d8a8 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8004334:	e004      	b.n	8004340 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 800433c:	e767      	b.n	800420e <lfs_dir_splittingcompact+0xe>
            break;
 800433e:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7ff fd40 	bl	8003dc8 <lfs_dir_needsrelocation>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d04d      	beq.n	80043ea <lfs_dir_splittingcompact+0x1ea>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	613a      	str	r2, [r7, #16]
 8004354:	2201      	movs	r2, #1
 8004356:	617a      	str	r2, [r7, #20]
 8004358:	f107 0210 	add.w	r2, r7, #16
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd f996 	bl	8001690 <lfs_pair_cmp>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d13f      	bne.n	80043ea <lfs_dir_splittingcompact+0x1ea>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f003 fb50 	bl	8007a10 <lfs_fs_rawsize>
 8004370:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	2b00      	cmp	r3, #0
 8004376:	da01      	bge.n	800437c <lfs_dir_splittingcompact+0x17c>
            return size;
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	e045      	b.n	8004408 <lfs_dir_splittingcompact+0x208>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->block_count/2) {
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004380:	085a      	lsrs	r2, r3, #1
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	429a      	cmp	r2, r3
 8004386:	d930      	bls.n	80043ea <lfs_dir_splittingcompact+0x1ea>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <lfs_dir_splittingcompact+0x218>)
 800438e:	9200      	str	r2, [sp, #0]
 8004390:	f640 026d 	movw	r2, #2157	; 0x86d
 8004394:	4921      	ldr	r1, [pc, #132]	; (800441c <lfs_dir_splittingcompact+0x21c>)
 8004396:	4823      	ldr	r0, [pc, #140]	; (8004424 <lfs_dir_splittingcompact+0x224>)
 8004398:	f009 fa86 	bl	800d8a8 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800439c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043a0:	9302      	str	r3, [sp, #8]
 80043a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff fc89 	bl	8003cca <lfs_dir_split>
 80043b8:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <lfs_dir_splittingcompact+0x1cc>
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f113 0f1c 	cmn.w	r3, #28
 80043c6:	d001      	beq.n	80043cc <lfs_dir_splittingcompact+0x1cc>
                return err;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	e01d      	b.n	8004408 <lfs_dir_splittingcompact+0x208>
            }

            if (err) {
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <lfs_dir_splittingcompact+0x1e2>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <lfs_dir_splittingcompact+0x218>)
 80043d4:	f640 0277 	movw	r2, #2167	; 0x877
 80043d8:	4910      	ldr	r1, [pc, #64]	; (800441c <lfs_dir_splittingcompact+0x21c>)
 80043da:	4813      	ldr	r0, [pc, #76]	; (8004428 <lfs_dir_splittingcompact+0x228>)
 80043dc:	f009 fa64 	bl	800d8a8 <iprintf>
 80043e0:	e003      	b.n	80043ea <lfs_dir_splittingcompact+0x1ea>
            } else {
                end = begin;
 80043e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80043e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80043ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043ee:	9302      	str	r3, [sp, #8]
 80043f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff fd07 	bl	8003e14 <lfs_dir_compact>
 8004406:	4603      	mov	r3, r0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3734      	adds	r7, #52	; 0x34
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}
 8004410:	08003d73 	.word	0x08003d73
 8004414:	400ffc00 	.word	0x400ffc00
 8004418:	080112a0 	.word	0x080112a0
 800441c:	08011198 	.word	0x08011198
 8004420:	0801137c 	.word	0x0801137c
 8004424:	080113ac 	.word	0x080113ac
 8004428:	080113dc 	.word	0x080113dc

0800442c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 800442c:	b5b0      	push	{r4, r5, r7, lr}
 800442e:	b0a6      	sub	sp, #152	; 0x98
 8004430:	af0a      	add	r7, sp, #40	; 0x28
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
    int state = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8004444:	2300      	movs	r3, #0
 8004446:	667b      	str	r3, [r7, #100]	; 0x64
 8004448:	e06d      	b.n	8004526 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800444a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4413      	add	r3, r2
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd f9e1 	bl	800181c <lfs_tag_type3>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	f240 4301 	movw	r3, #1025	; 0x401
 8004462:	429a      	cmp	r2, r3
 8004464:	d106      	bne.n	8004474 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	8a9b      	ldrh	r3, [r3, #20]
 800446a:	3301      	adds	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	829a      	strh	r2, [r3, #20]
 8004472:	e055      	b.n	8004520 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8004474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	4413      	add	r3, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fd f9cc 	bl	800181c <lfs_tag_type3>
 8004484:	4603      	mov	r3, r0
 8004486:	461a      	mov	r2, r3
 8004488:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800448c:	429a      	cmp	r2, r3
 800448e:	d114      	bne.n	80044ba <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	8a9b      	ldrh	r3, [r3, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <lfs_dir_relocatingcommit+0x7a>
 8004498:	4ba4      	ldr	r3, [pc, #656]	; (800472c <lfs_dir_relocatingcommit+0x300>)
 800449a:	4aa5      	ldr	r2, [pc, #660]	; (8004730 <lfs_dir_relocatingcommit+0x304>)
 800449c:	f640 018f 	movw	r1, #2191	; 0x88f
 80044a0:	48a4      	ldr	r0, [pc, #656]	; (8004734 <lfs_dir_relocatingcommit+0x308>)
 80044a2:	f008 f903 	bl	800c6ac <__assert_func>
            dir->count -= 1;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	8a9b      	ldrh	r3, [r3, #20]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80044b8:	e032      	b.n	8004520 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80044ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	4413      	add	r3, r2
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fd f98b 	bl	80017e0 <lfs_tag_type1>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044d0:	d126      	bne.n	8004520 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80044d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80044e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80044f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fd f99c 	bl	800183a <lfs_tag_chunk>
 8004502:	4603      	mov	r3, r0
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3318      	adds	r3, #24
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd f90d 	bl	800173a <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8004520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004522:	3301      	adds	r3, #1
 8004524:	667b      	str	r3, [r7, #100]	; 0x64
 8004526:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800452c:	429a      	cmp	r2, r3
 800452e:	db8c      	blt.n	800444a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8004530:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8004534:	2b00      	cmp	r3, #0
 8004536:	d02b      	beq.n	8004590 <lfs_dir_relocatingcommit+0x164>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	8a9b      	ldrh	r3, [r3, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d127      	bne.n	8004590 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8004540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <lfs_dir_relocatingcommit+0x12a>
 8004548:	4b7b      	ldr	r3, [pc, #492]	; (8004738 <lfs_dir_relocatingcommit+0x30c>)
 800454a:	4a79      	ldr	r2, [pc, #484]	; (8004730 <lfs_dir_relocatingcommit+0x304>)
 800454c:	f640 019c 	movw	r1, #2204	; 0x89c
 8004550:	4878      	ldr	r0, [pc, #480]	; (8004734 <lfs_dir_relocatingcommit+0x308>)
 8004552:	f008 f8ab 	bl	800c6ac <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800455c:	4619      	mov	r1, r3
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f002 fdb4 	bl	80070cc <lfs_fs_pred>
 8004564:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8004566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <lfs_dir_relocatingcommit+0x14c>
 800456c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800456e:	f113 0f02 	cmn.w	r3, #2
 8004572:	d001      	beq.n	8004578 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8004574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004576:	e203      	b.n	8004980 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8004578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457a:	f113 0f02 	cmn.w	r3, #2
 800457e:	d007      	beq.n	8004590 <lfs_dir_relocatingcommit+0x164>
 8004580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004584:	7ddb      	ldrb	r3, [r3, #23]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800458a:	2302      	movs	r3, #2
 800458c:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 800458e:	e121      	b.n	80047d4 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	7d9b      	ldrb	r3, [r3, #22]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80fb 	beq.w	8004790 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80045b6:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <lfs_dir_relocatingcommit+0x1a0>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c8:	3b08      	subs	r3, #8
 80045ca:	e003      	b.n	80045d4 <lfs_dir_relocatingcommit+0x1a8>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 80045d4:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	3318      	adds	r3, #24
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd f8c7 	bl	800176e <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 80045f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045f6:	9308      	str	r3, [sp, #32]
 80045f8:	4b50      	ldr	r3, [pc, #320]	; (800473c <lfs_dir_relocatingcommit+0x310>)
 80045fa:	9307      	str	r3, [sp, #28]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9306      	str	r3, [sp, #24]
 8004600:	2300      	movs	r3, #0
 8004602:	9305      	str	r3, [sp, #20]
 8004604:	2300      	movs	r3, #0
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	2300      	movs	r3, #0
 800460a:	9303      	str	r3, [sp, #12]
 800460c:	2300      	movs	r3, #0
 800460e:	9302      	str	r3, [sp, #8]
 8004610:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	460b      	mov	r3, r1
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7fd fed0 	bl	80023c4 <lfs_dir_traverse>
 8004624:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3318      	adds	r3, #24
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd f885 	bl	800173a <lfs_pair_fromle32>
        if (err) {
 8004630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004638:	f113 0f1c 	cmn.w	r3, #28
 800463c:	f000 80aa 	beq.w	8004794 <lfs_dir_relocatingcommit+0x368>
 8004640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004642:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004646:	f000 80a5 	beq.w	8004794 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	e198      	b.n	8004980 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800464e:	f107 031c 	add.w	r3, r7, #28
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004660:	f107 031c 	add.w	r3, r7, #28
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd f92f 	bl	80018ca <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004672:	f107 031c 	add.w	r3, r7, #28
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f7fd f926 	bl	80018ca <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004684:	f107 031c 	add.w	r3, r7, #28
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f7fd f91d 	bl	80018ca <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 800469c:	f107 031c 	add.w	r3, r7, #28
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fd f936 	bl	8001912 <lfs_gstate_iszero>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f083 0301 	eor.w	r3, r3, #1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d027      	beq.n	8004702 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80046b2:	f107 031c 	add.w	r3, r7, #28
 80046b6:	461a      	mov	r2, r3
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7fe fe76 	bl	80033ac <lfs_dir_getgstate>
 80046c0:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 80046c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <lfs_dir_relocatingcommit+0x2a0>
                return err;
 80046c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ca:	e159      	b.n	8004980 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 80046cc:	f107 031c 	add.w	r3, r7, #28
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fd f9c3 	bl	8001a5c <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 80046d6:	f107 031c 	add.w	r3, r7, #28
 80046da:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80046de:	4a18      	ldr	r2, [pc, #96]	; (8004740 <lfs_dir_relocatingcommit+0x314>)
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff f889 	bl	80037f8 <lfs_dir_commitattr>
 80046e6:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80046e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80046ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f0:	f113 0f1c 	cmn.w	r3, #28
 80046f4:	d050      	beq.n	8004798 <lfs_dir_relocatingcommit+0x36c>
 80046f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80046fc:	d04c      	beq.n	8004798 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80046fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004700:	e13e      	b.n	8004980 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8004702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004706:	4619      	mov	r1, r3
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff f8f5 	bl	80038f8 <lfs_dir_commitcrc>
 800470e:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8004710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004718:	f113 0f1c 	cmn.w	r3, #28
 800471c:	d03e      	beq.n	800479c <lfs_dir_relocatingcommit+0x370>
 800471e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004720:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004724:	d03a      	beq.n	800479c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8004726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004728:	e12a      	b.n	8004980 <lfs_dir_relocatingcommit+0x554>
 800472a:	bf00      	nop
 800472c:	08011408 	.word	0x08011408
 8004730:	08011e98 	.word	0x08011e98
 8004734:	08011198 	.word	0x08011198
 8004738:	08011418 	.word	0x08011418
 800473c:	08003d9f 	.word	0x08003d9f
 8004740:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8004744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800474a:	6992      	ldr	r2, [r2, #24]
 800474c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004750:	fb02 f201 	mul.w	r2, r2, r1
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <lfs_dir_relocatingcommit+0x33c>
 800475a:	4b8b      	ldr	r3, [pc, #556]	; (8004988 <lfs_dir_relocatingcommit+0x55c>)
 800475c:	4a8b      	ldr	r2, [pc, #556]	; (800498c <lfs_dir_relocatingcommit+0x560>)
 800475e:	f640 01e6 	movw	r1, #2278	; 0x8e6
 8004762:	488b      	ldr	r0, [pc, #556]	; (8004990 <lfs_dir_relocatingcommit+0x564>)
 8004764:	f007 ffa2 	bl	800c6ac <__assert_func>
        dir->off = commit.off;
 8004768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800476e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	333c      	adds	r3, #60	; 0x3c
 800477a:	3230      	adds	r2, #48	; 0x30
 800477c:	ca07      	ldmia	r2, {r0, r1, r2}
 800477e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3348      	adds	r3, #72	; 0x48
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	605a      	str	r2, [r3, #4]
 800478c:	609a      	str	r2, [r3, #8]
 800478e:	e021      	b.n	80047d4 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8004790:	bf00      	nop
 8004792:	e004      	b.n	800479e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004794:	bf00      	nop
 8004796:	e002      	b.n	800479e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8004798:	bf00      	nop
 800479a:	e000      	b.n	800479e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800479c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3310      	adds	r3, #16
 80047a2:	4619      	mov	r1, r3
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7fc fbb1 	bl	8000f0c <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	8a9b      	ldrh	r3, [r3, #20]
 80047ae:	9302      	str	r3, [sp, #8]
 80047b0:	2300      	movs	r3, #0
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7ff fd1d 	bl	8004200 <lfs_dir_splittingcompact>
 80047c6:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 80047c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da01      	bge.n	80047d2 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 80047ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d0:	e0d6      	b.n	8004980 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 80047d2:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	663b      	str	r3, [r7, #96]	; 0x60
 80047e6:	e0c6      	b.n	8004976 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80047e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ea:	3308      	adds	r3, #8
 80047ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fc ff4c 	bl	8001690 <lfs_pair_cmp>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 80b8 	bne.w	8004970 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8004800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	f103 0408 	add.w	r4, r3, #8
 8004808:	4615      	mov	r5, r2
 800480a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800480c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800480e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8004816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004818:	3308      	adds	r3, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	f000 809d 	beq.w	800495c <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8004822:	2300      	movs	r3, #0
 8004824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004826:	e07b      	b.n	8004920 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	4413      	add	r3, r2
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fc fff2 	bl	800181c <lfs_tag_type3>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004840:	429a      	cmp	r2, r3
 8004842:	d115      	bne.n	8004870 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8004844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004846:	889c      	ldrh	r4, [r3, #4]
 8004848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	4413      	add	r3, r2
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd f80a 	bl	800186c <lfs_tag_id>
 8004858:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800485a:	429c      	cmp	r4, r3
 800485c:	d108      	bne.n	8004870 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 800485e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004860:	f04f 32ff 	mov.w	r2, #4294967295
 8004864:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8004866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004868:	f04f 32ff 	mov.w	r2, #4294967295
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	e054      	b.n	800491a <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	4413      	add	r3, r2
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fc ffce 	bl	800181c <lfs_tag_type3>
 8004880:	4603      	mov	r3, r0
 8004882:	461a      	mov	r2, r3
 8004884:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004888:	429a      	cmp	r2, r3
 800488a:	d11c      	bne.n	80048c6 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800488c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800488e:	889c      	ldrh	r4, [r3, #4]
 8004890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	4413      	add	r3, r2
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fc ffe6 	bl	800186c <lfs_tag_id>
 80048a0:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80048a2:	429c      	cmp	r4, r3
 80048a4:	d90f      	bls.n	80048c6 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 80048a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a8:	889b      	ldrh	r3, [r3, #4]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b0:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80048b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b4:	799b      	ldrb	r3, [r3, #6]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d12f      	bne.n	800491a <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 80048ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	1e5a      	subs	r2, r3, #1
 80048c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 80048c4:	e029      	b.n	800491a <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80048c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	4413      	add	r3, r2
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fc ffa3 	bl	800181c <lfs_tag_type3>
 80048d6:	4603      	mov	r3, r0
 80048d8:	461a      	mov	r2, r3
 80048da:	f240 4301 	movw	r3, #1025	; 0x401
 80048de:	429a      	cmp	r2, r3
 80048e0:	d11b      	bne.n	800491a <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80048e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e4:	889c      	ldrh	r4, [r3, #4]
 80048e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	4413      	add	r3, r2
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fc ffbb 	bl	800186c <lfs_tag_id>
 80048f6:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d30e      	bcc.n	800491a <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 80048fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048fe:	889b      	ldrh	r3, [r3, #4]
 8004900:	3301      	adds	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004906:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800490a:	799b      	ldrb	r3, [r3, #6]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d104      	bne.n	800491a <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8004910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004918:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 800491a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491c:	3301      	adds	r3, #1
 800491e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004920:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004926:	429a      	cmp	r2, r3
 8004928:	f6ff af7e 	blt.w	8004828 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800492c:	e016      	b.n	800495c <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 800492e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004930:	889a      	ldrh	r2, [r3, #4]
 8004932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004934:	8b9b      	ldrh	r3, [r3, #28]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	b29a      	uxth	r2, r3
 800493a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800493c:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800493e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004940:	f103 0108 	add.w	r1, r3, #8
 8004944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004946:	3320      	adds	r3, #32
 8004948:	461a      	mov	r2, r3
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f7fe fd12 	bl	8003374 <lfs_dir_fetch>
 8004950:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8004952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <lfs_dir_relocatingcommit+0x530>
                    return err;
 8004958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495a:	e011      	b.n	8004980 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 800495c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800495e:	889a      	ldrh	r2, [r3, #4]
 8004960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004962:	8b9b      	ldrh	r3, [r3, #28]
 8004964:	429a      	cmp	r2, r3
 8004966:	d303      	bcc.n	8004970 <lfs_dir_relocatingcommit+0x544>
 8004968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800496a:	7fdb      	ldrb	r3, [r3, #31]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1de      	bne.n	800492e <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	663b      	str	r3, [r7, #96]	; 0x60
 8004976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004978:	2b00      	cmp	r3, #0
 800497a:	f47f af35 	bne.w	80047e8 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8004980:	4618      	mov	r0, r3
 8004982:	3770      	adds	r7, #112	; 0x70
 8004984:	46bd      	mov	sp, r7
 8004986:	bdb0      	pop	{r4, r5, r7, pc}
 8004988:	080112f8 	.word	0x080112f8
 800498c:	08011e98 	.word	0x08011e98
 8004990:	08011198 	.word	0x08011198

08004994 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b0bc      	sub	sp, #240	; 0xf0
 8004998:	af04      	add	r7, sp, #16
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049aa:	e045      	b.n	8004a38 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80049ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b0:	3308      	adds	r3, #8
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d03a      	beq.n	8004a2e <lfs_dir_orphaningcommit+0x9a>
 80049b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049bc:	3308      	adds	r3, #8
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fc fe64 	bl	8001690 <lfs_pair_cmp>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d12f      	bne.n	8004a2e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80049ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d2:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d12a      	bne.n	8004a2e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80049d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d023      	beq.n	8004a2e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80049e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d91b      	bls.n	8004a2e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80049f6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f001 f900 	bl	8005c00 <lfs_file_outline>
 8004a00:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004a04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8004a0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a10:	e2ad      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8004a12:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f001 f914 	bl	8005c44 <lfs_file_flush>
 8004a1c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004a20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8004a28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a2c:	e29f      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1b5      	bne.n	80049ac <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004a56:	461d      	mov	r5, r3
 8004a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8004a6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff fcd8 	bl	800442c <lfs_dir_relocatingcommit>
 8004a7c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8004a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	da02      	bge.n	8004a8e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a8c:	e26f      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc fdfa 	bl	8001690 <lfs_pair_cmp>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	461d      	mov	r5, r3
 8004aa6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ab2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d14a      	bne.n	8004b54 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3348      	adds	r3, #72	; 0x48
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7fe fc70 	bl	80033ac <lfs_dir_getgstate>
 8004acc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8004ad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <lfs_dir_orphaningcommit+0x14a>
            return err;
 8004ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004adc:	e247      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8004ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3318      	adds	r3, #24
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fc fe3d 	bl	800176e <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	7ddb      	ldrb	r3, [r3, #23]
 8004af8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004afc:	051a      	lsls	r2, r3, #20
 8004afe:	4bc2      	ldr	r3, [pc, #776]	; (8004e08 <lfs_dir_orphaningcommit+0x474>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	667b      	str	r3, [r7, #100]	; 0x64
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	3318      	adds	r3, #24
 8004b08:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b0e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004b12:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004b16:	2000      	movs	r0, #0
 8004b18:	9001      	str	r0, [sp, #4]
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	9000      	str	r0, [sp, #0]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f7ff fc84 	bl	800442c <lfs_dir_relocatingcommit>
 8004b24:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3318      	adds	r3, #24
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fc fe04 	bl	800173a <lfs_pair_fromle32>
        if (state < 0) {
 8004b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	da02      	bge.n	8004b40 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8004b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b3e:	e216      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8004b40:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004b44:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8004b5a:	e1fc      	b.n	8004f56 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8004b5c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004b60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b64:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004b68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b6c:	4ca7      	ldr	r4, [pc, #668]	; (8004e0c <lfs_dir_orphaningcommit+0x478>)
 8004b6e:	9403      	str	r4, [sp, #12]
 8004b70:	9102      	str	r1, [sp, #8]
 8004b72:	9201      	str	r2, [sp, #4]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	4603      	mov	r3, r0
 8004b78:	f44f 6217 	mov.w	r2, #2416	; 0x970
 8004b7c:	49a4      	ldr	r1, [pc, #656]	; (8004e10 <lfs_dir_orphaningcommit+0x47c>)
 8004b7e:	48a5      	ldr	r0, [pc, #660]	; (8004e14 <lfs_dir_orphaningcommit+0x480>)
 8004b80:	f008 fe92 	bl	800d8a8 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f103 0220 	add.w	r2, r3, #32
 8004b90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fc fd7a 	bl	8001690 <lfs_pair_cmp>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8004ba2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004baa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bba:	e037      	b.n	8004c2c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004bbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bc0:	f103 0208 	add.w	r2, r3, #8
 8004bc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc fd60 	bl	8001690 <lfs_pair_cmp>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8004bd6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004bda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bde:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004be0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004be4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004be8:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8004bea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bee:	799b      	ldrb	r3, [r3, #6]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d116      	bne.n	8004c22 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004bf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bf8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004bfc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c00:	4611      	mov	r1, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fc fd44 	bl	8001690 <lfs_pair_cmp>
 8004c08:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8004c0e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004c12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8004c18:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004c1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004c22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1c3      	bne.n	8004bbc <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8004c34:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004c38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f002 faf6 	bl	8007230 <lfs_fs_parent>
 8004c44:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8004c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da07      	bge.n	8004c60 <lfs_dir_orphaningcommit+0x2cc>
 8004c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c54:	f113 0f02 	cmn.w	r3, #2
 8004c58:	d002      	beq.n	8004c60 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8004c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c5e:	e186      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8004c60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c64:	f113 0f02 	cmn.w	r3, #2
 8004c68:	bf14      	ite	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	2300      	moveq	r3, #0
 8004c6e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8004c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c76:	f113 0f02 	cmn.w	r3, #2
 8004c7a:	f000 809e 	beq.w	8004dba <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8004c7e:	2101      	movs	r1, #1
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f002 fb6b 	bl	800735c <lfs_fs_preporphans>
 8004c86:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8004c8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <lfs_dir_orphaningcommit+0x304>
                return err;
 8004c92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c96:	e16a      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004c98:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004c9c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3330      	adds	r3, #48	; 0x30
 8004ca4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fc fe96 	bl	80019dc <lfs_gstate_hasmovehere>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02d      	beq.n	8004d12 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc fdd6 	bl	800186c <lfs_tag_id>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004cc6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cca:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8004cce:	484f      	ldr	r0, [pc, #316]	; (8004e0c <lfs_dir_orphaningcommit+0x478>)
 8004cd0:	9002      	str	r0, [sp, #8]
 8004cd2:	9201      	str	r2, [sp, #4]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	f640 129d 	movw	r2, #2461	; 0x99d
 8004cdc:	494c      	ldr	r1, [pc, #304]	; (8004e10 <lfs_dir_orphaningcommit+0x47c>)
 8004cde:	484e      	ldr	r0, [pc, #312]	; (8004e18 <lfs_dir_orphaningcommit+0x484>)
 8004ce0:	f008 fde2 	bl	800d8a8 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f002 fb86 	bl	80073fc <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8004cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fc fdb9 	bl	800186c <lfs_tag_id>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d205      	bcs.n	8004d12 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004d06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d0a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004d0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8004d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d14:	657b      	str	r3, [r7, #84]	; 0x54
 8004d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d18:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8004d1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fc fd25 	bl	800176e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8004d24:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004d28:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <lfs_dir_orphaningcommit+0x3ac>
 8004d30:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004d3a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004d3e:	e000      	b.n	8004d42 <lfs_dir_orphaningcommit+0x3ae>
 8004d40:	2300      	movs	r3, #0
 8004d42:	647b      	str	r3, [r7, #68]	; 0x44
 8004d44:	2300      	movs	r3, #0
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d4e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004d52:	653b      	str	r3, [r7, #80]	; 0x50
 8004d54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d58:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004d5c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004d60:	2000      	movs	r0, #0
 8004d62:	9001      	str	r0, [sp, #4]
 8004d64:	2002      	movs	r0, #2
 8004d66:	9000      	str	r0, [sp, #0]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff fb5f 	bl	800442c <lfs_dir_relocatingcommit>
 8004d6e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004d72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fc fcdf 	bl	800173a <lfs_pair_fromle32>
            if (state < 0) {
 8004d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	da02      	bge.n	8004d8a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004d84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d88:	e0f1      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8004d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d113      	bne.n	8004dba <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8004d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8004d9e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004da2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004daa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004db8:	e0cd      	b.n	8004f56 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004dba:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004dbe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f002 f981 	bl	80070cc <lfs_fs_pred>
 8004dca:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8004dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <lfs_dir_orphaningcommit+0x452>
 8004dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004dda:	f113 0f02 	cmn.w	r3, #2
 8004dde:	d002      	beq.n	8004de6 <lfs_dir_orphaningcommit+0x452>
            return err;
 8004de0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004de4:	e0c3      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004de6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01a      	beq.n	8004e24 <lfs_dir_orphaningcommit+0x490>
 8004dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004df2:	f113 0f02 	cmn.w	r3, #2
 8004df6:	d115      	bne.n	8004e24 <lfs_dir_orphaningcommit+0x490>
 8004df8:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <lfs_dir_orphaningcommit+0x488>)
 8004dfa:	4a09      	ldr	r2, [pc, #36]	; (8004e20 <lfs_dir_orphaningcommit+0x48c>)
 8004dfc:	f44f 611c 	mov.w	r1, #2496	; 0x9c0
 8004e00:	4803      	ldr	r0, [pc, #12]	; (8004e10 <lfs_dir_orphaningcommit+0x47c>)
 8004e02:	f007 fc53 	bl	800c6ac <__assert_func>
 8004e06:	bf00      	nop
 8004e08:	000ffc08 	.word	0x000ffc08
 8004e0c:	080112a0 	.word	0x080112a0
 8004e10:	08011198 	.word	0x08011198
 8004e14:	08011420 	.word	0x08011420
 8004e18:	0801145c 	.word	0x0801145c
 8004e1c:	080114a0 	.word	0x080114a0
 8004e20:	08011eb4 	.word	0x08011eb4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8004e24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e28:	f113 0f02 	cmn.w	r3, #2
 8004e2c:	f000 8093 	beq.w	8004f56 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3330      	adds	r3, #48	; 0x30
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fc fd88 	bl	800194a <lfs_gstate_hasorphans>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d011      	beq.n	8004e64 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8004e40:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004e44:	425b      	negs	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f002 fa85 	bl	800735c <lfs_fs_preporphans>
 8004e52:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8004e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8004e5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e62:	e084      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004e64:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004e68:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3330      	adds	r3, #48	; 0x30
 8004e70:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004e74:	4611      	mov	r1, r2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fc fdb0 	bl	80019dc <lfs_gstate_hasmovehere>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01c      	beq.n	8004ebc <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fc fcf0 	bl	800186c <lfs_tag_id>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8004e92:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e96:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004e9a:	4837      	ldr	r0, [pc, #220]	; (8004f78 <lfs_dir_orphaningcommit+0x5e4>)
 8004e9c:	9002      	str	r0, [sp, #8]
 8004e9e:	9201      	str	r2, [sp, #4]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	f640 12d1 	movw	r2, #2513	; 0x9d1
 8004ea8:	4934      	ldr	r1, [pc, #208]	; (8004f7c <lfs_dir_orphaningcommit+0x5e8>)
 8004eaa:	4835      	ldr	r0, [pc, #212]	; (8004f80 <lfs_dir_orphaningcommit+0x5ec>)
 8004eac:	f008 fcfc 	bl	800d8a8 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f002 faa0 	bl	80073fc <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8004ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004ec8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fc fc4e 	bl	800176e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004ed2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004ed6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <lfs_dir_orphaningcommit+0x55a>
 8004ede:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004ee2:	029b      	lsls	r3, r3, #10
 8004ee4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004ee8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004eec:	e000      	b.n	8004ef0 <lfs_dir_orphaningcommit+0x55c>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004efa:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004efe:	051a      	lsls	r2, r3, #20
 8004f00:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <lfs_dir_orphaningcommit+0x5f0>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f06:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f10:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004f14:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004f18:	2000      	movs	r0, #0
 8004f1a:	9001      	str	r0, [sp, #4]
 8004f1c:	2002      	movs	r0, #2
 8004f1e:	9000      	str	r0, [sp, #0]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff fa83 	bl	800442c <lfs_dir_relocatingcommit>
 8004f26:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004f2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fc fc03 	bl	800173a <lfs_pair_fromle32>
            if (state < 0) {
 8004f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	da02      	bge.n	8004f42 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8004f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f40:	e015      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8004f42:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004f46:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	f43f adfe 	beq.w	8004b5c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004f60:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <lfs_dir_orphaningcommit+0x5d8>
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e000      	b.n	8004f6e <lfs_dir_orphaningcommit+0x5da>
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	37e0      	adds	r7, #224	; 0xe0
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bdb0      	pop	{r4, r5, r7, pc}
 8004f76:	bf00      	nop
 8004f78:	080112a0 	.word	0x080112a0
 8004f7c:	08011198 	.word	0x08011198
 8004f80:	0801145c 	.word	0x0801145c
 8004f84:	000ffc08 	.word	0x000ffc08

08004f88 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7ff fcf9 	bl	8004994 <lfs_dir_orphaningcommit>
 8004fa2:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	da01      	bge.n	8004fae <lfs_dir_commit+0x26>
        return orphans;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	e00d      	b.n	8004fca <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f002 fb42 	bl	8007640 <lfs_fs_deorphan>
 8004fbc:	6138      	str	r0, [r7, #16]
        if (err) {
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <lfs_dir_commit+0x40>
            return err;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	e000      	b.n	8004fca <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <lfs_dir_rawopen>:

    return 0;
}
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b08d      	sub	sp, #52	; 0x34
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f103 0108 	add.w	r1, r3, #8
 8004fe6:	1d3a      	adds	r2, r7, #4
 8004fe8:	2300      	movs	r3, #0
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7fe fad4 	bl	8003598 <lfs_dir_find>
 8004ff0:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	da01      	bge.n	8004ffc <lfs_dir_rawopen+0x28>
        return tag;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	e05e      	b.n	80050ba <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fc fc0c 	bl	800181c <lfs_tag_type3>
 8005004:	4603      	mov	r3, r0
 8005006:	2b02      	cmp	r3, #2
 8005008:	d002      	beq.n	8005010 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 800500a:	f06f 0313 	mvn.w	r3, #19
 800500e:	e054      	b.n	80050ba <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	4618      	mov	r0, r3
 8005014:	f7fc fc2a 	bl	800186c <lfs_tag_id>
 8005018:	4603      	mov	r3, r0
 800501a:	461a      	mov	r2, r3
 800501c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005020:	429a      	cmp	r2, r3
 8005022:	d106      	bne.n	8005032 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e01f      	b.n	8005072 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	4618      	mov	r0, r3
 800503c:	f7fc fc16 	bl	800186c <lfs_tag_id>
 8005040:	4603      	mov	r3, r0
 8005042:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005044:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005048:	f043 0308 	orr.w	r3, r3, #8
 800504c:	f107 0214 	add.w	r2, r7, #20
 8005050:	9200      	str	r2, [sp, #0]
 8005052:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <lfs_dir_rawopen+0xf0>)
 8005054:	4621      	mov	r1, r4
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7fd f862 	bl	8002120 <lfs_dir_get>
 800505c:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	2b00      	cmp	r3, #0
 8005062:	da01      	bge.n	8005068 <lfs_dir_rawopen+0x94>
            return res;
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	e028      	b.n	80050ba <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8005068:	f107 0314 	add.w	r3, r7, #20
 800506c:	4618      	mov	r0, r3
 800506e:	f7fc fb64 	bl	800173a <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3308      	adds	r3, #8
 8005076:	f107 0214 	add.w	r2, r7, #20
 800507a:	4619      	mov	r1, r3
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7fe f979 	bl	8003374 <lfs_dir_fetch>
 8005082:	61f8      	str	r0, [r7, #28]
    if (err) {
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <lfs_dir_rawopen+0xba>
        return err;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	e015      	b.n	80050ba <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2200      	movs	r2, #0
 80050a2:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2202      	movs	r2, #2
 80050ae:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7fc fdff 	bl	8001cb6 <lfs_mlist_append>

    return 0;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	372c      	adds	r7, #44	; 0x2c
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd90      	pop	{r4, r7, pc}
 80050c2:	bf00      	nop
 80050c4:	700ffc00 	.word	0x700ffc00

080050c8 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fc fdcd 	bl	8001c74 <lfs_mlist_remove>

    return 0;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 80050f0:	f44f 7284 	mov.w	r2, #264	; 0x108
 80050f4:	2100      	movs	r1, #0
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f007 fb5e 	bl	800c7b8 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	2b00      	cmp	r3, #0
 8005102:	d110      	bne.n	8005126 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3308      	adds	r3, #8
 800510e:	4935      	ldr	r1, [pc, #212]	; (80051e4 <lfs_dir_rawread+0x100>)
 8005110:	461a      	mov	r2, r3
 8005112:	460b      	mov	r3, r1
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8005122:	2301      	movs	r3, #1
 8005124:	e05a      	b.n	80051dc <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	2b01      	cmp	r3, #1
 800512c:	d110      	bne.n	8005150 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3308      	adds	r3, #8
 8005138:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <lfs_dir_rawread+0x104>)
 800513a:	8811      	ldrh	r1, [r2, #0]
 800513c:	7892      	ldrb	r2, [r2, #2]
 800513e:	8019      	strh	r1, [r3, #0]
 8005140:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 800514c:	2301      	movs	r3, #1
 800514e:	e045      	b.n	80051dc <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	889a      	ldrh	r2, [r3, #4]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	8b9b      	ldrh	r3, [r3, #28]
 8005158:	429a      	cmp	r2, r3
 800515a:	d11a      	bne.n	8005192 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	7fdb      	ldrb	r3, [r3, #31]
 8005160:	f083 0301 	eor.w	r3, r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <lfs_dir_rawread+0x8a>
                return false;
 800516a:	2300      	movs	r3, #0
 800516c:	e036      	b.n	80051dc <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f103 0108 	add.w	r1, r3, #8
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	3320      	adds	r3, #32
 8005178:	461a      	mov	r2, r3
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7fe f8fa 	bl	8003374 <lfs_dir_fetch>
 8005180:	6178      	str	r0, [r7, #20]
            if (err) {
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <lfs_dir_rawread+0xa8>
                return err;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	e027      	b.n	80051dc <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f103 0108 	add.w	r1, r3, #8
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	889a      	ldrh	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7fe f936 	bl	8003410 <lfs_dir_getinfo>
 80051a4:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <lfs_dir_rawread+0xd4>
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f113 0f02 	cmn.w	r3, #2
 80051b2:	d001      	beq.n	80051b8 <lfs_dir_rawread+0xd4>
            return err;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	e011      	b.n	80051dc <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	889b      	ldrh	r3, [r3, #4]
 80051bc:	3301      	adds	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f113 0f02 	cmn.w	r3, #2
 80051ca:	d100      	bne.n	80051ce <lfs_dir_rawread+0xea>
    while (true) {
 80051cc:	e7c0      	b.n	8005150 <lfs_dir_rawread+0x6c>
            break;
 80051ce:	bf00      	nop
        }
    }

    dir->pos += 1;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80051da:	2301      	movs	r3, #1
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	080112f0 	.word	0x080112f0
 80051e8:	080112f4 	.word	0x080112f4

080051ec <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	3b08      	subs	r3, #8
 8005204:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	fbb2 f3f3 	udiv	r3, r2, r3
 800520e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <lfs_ctz_index+0x2e>
        return 0;
 8005216:	2300      	movs	r3, #0
 8005218:	e01c      	b.n	8005254 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3b01      	subs	r3, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb fe17 	bl	8000e52 <lfs_popc>
 8005224:	4603      	mov	r3, r0
 8005226:	3302      	adds	r3, #2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	1ad2      	subs	r2, r2, r3
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	fb02 f303 	mul.w	r3, r2, r3
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	1ad4      	subs	r4, r2, r3
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7fb fe05 	bl	8000e52 <lfs_popc>
 8005248:	4603      	mov	r3, r0
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	1ae2      	subs	r2, r4, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	601a      	str	r2, [r3, #0]
    return i;
 8005252:	68fb      	ldr	r3, [r7, #12]
}
 8005254:	4618      	mov	r0, r3
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd90      	pop	{r4, r7, pc}

0800525c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b08f      	sub	sp, #60	; 0x3c
 8005260:	af04      	add	r7, sp, #16
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2b00      	cmp	r3, #0
 800526e:	d108      	bne.n	8005282 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8005270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	601a      	str	r2, [r3, #0]
        *off = 0;
 8005278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
        return 0;
 800527e:	2300      	movs	r3, #0
 8005280:	e053      	b.n	800532a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	3b01      	subs	r3, #1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	f107 0314 	add.w	r3, r7, #20
 800528c:	4619      	mov	r1, r3
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f7ff ffac 	bl	80051ec <lfs_ctz_index>
 8005294:	4603      	mov	r3, r0
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8005298:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800529c:	4619      	mov	r1, r3
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff ffa4 	bl	80051ec <lfs_ctz_index>
 80052a4:	4603      	mov	r3, r0
 80052a6:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80052a8:	e034      	b.n	8005314 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80052aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	3301      	adds	r3, #1
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb fdb0 	bl	8000e18 <lfs_npw2>
 80052b8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80052ba:	1e5c      	subs	r4, r3, #1
 80052bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052be:	f7fb fdba 	bl	8000e36 <lfs_ctz>
 80052c2:	4603      	mov	r3, r0
 80052c4:	4619      	mov	r1, r3
 80052c6:	4620      	mov	r0, r4
 80052c8:	f7fb fd71 	bl	8000dae <lfs_min>
 80052cc:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	0092      	lsls	r2, r2, #2
 80052d4:	2104      	movs	r1, #4
 80052d6:	9103      	str	r1, [sp, #12]
 80052d8:	4639      	mov	r1, r7
 80052da:	9102      	str	r1, [sp, #8]
 80052dc:	9201      	str	r2, [sp, #4]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	2304      	movs	r3, #4
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7fb fe34 	bl	8000f54 <lfs_bd_read>
 80052ec:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fb fdc7 	bl	8000e84 <lfs_fromle32>
 80052f6:	4603      	mov	r3, r0
 80052f8:	603b      	str	r3, [r7, #0]
        if (err) {
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <lfs_ctz_find+0xa8>
            return err;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	e012      	b.n	800532a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8005304:	2201      	movs	r2, #1
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	461a      	mov	r2, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8005314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	429a      	cmp	r2, r3
 800531a:	d8c6      	bhi.n	80052aa <lfs_ctz_find+0x4e>
    }

    *block = head;
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005320:	601a      	str	r2, [r3, #0]
    *off = pos;
 8005322:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	601a      	str	r2, [r3, #0]
    return 0;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	372c      	adds	r7, #44	; 0x2c
 800532e:	46bd      	mov	sp, r7
 8005330:	bd90      	pop	{r4, r7, pc}
	...

08005334 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b092      	sub	sp, #72	; 0x48
 8005338:	af04      	add	r7, sp, #16
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005342:	f107 0320 	add.w	r3, r7, #32
 8005346:	4619      	mov	r1, r3
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7fc fd81 	bl	8001e50 <lfs_alloc>
 800534e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <lfs_ctz_extend+0x26>
            return err;
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	e0e9      	b.n	800552e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	4619      	mov	r1, r3
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7fc f936 	bl	80015d0 <lfs_bd_erase>
 8005364:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d006      	beq.n	800537a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005372:	f000 80cb 	beq.w	800550c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	e0d9      	b.n	800552e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800537a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d107      	bne.n	8005390 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8005380:	6a3a      	ldr	r2, [r7, #32]
 8005382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005384:	601a      	str	r2, [r3, #0]
                *off = 0;
 8005386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
                return 0;
 800538c:	2300      	movs	r3, #0
 800538e:	e0ce      	b.n	800552e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8005390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005392:	3b01      	subs	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8005396:	f107 031c 	add.w	r3, r7, #28
 800539a:	4619      	mov	r1, r3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff ff25 	bl	80051ec <lfs_ctz_index>
 80053a2:	4603      	mov	r3, r0
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3301      	adds	r3, #1
 80053aa:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d044      	beq.n	8005442 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 80053b8:	2300      	movs	r3, #0
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
 80053bc:	e035      	b.n	800542a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	1ad2      	subs	r2, r2, r3
 80053c4:	2301      	movs	r3, #1
 80053c6:	9303      	str	r3, [sp, #12]
 80053c8:	f107 0317 	add.w	r3, r7, #23
 80053cc:	9302      	str	r3, [sp, #8]
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	4613      	mov	r3, r2
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	2100      	movs	r1, #0
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7fb fdb9 	bl	8000f54 <lfs_bd_read>
 80053e2:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <lfs_ctz_extend+0xba>
                        return err;
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	e09f      	b.n	800552e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	2201      	movs	r2, #1
 80053f2:	9203      	str	r2, [sp, #12]
 80053f4:	f107 0217 	add.w	r2, r7, #23
 80053f8:	9202      	str	r2, [sp, #8]
 80053fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053fc:	9201      	str	r2, [sp, #4]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2301      	movs	r3, #1
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7fc f836 	bl	8001478 <lfs_bd_prog>
 800540c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800541a:	d101      	bne.n	8005420 <lfs_ctz_extend+0xec>
                            goto relocate;
 800541c:	bf00      	nop
                    goto relocate;
 800541e:	e075      	b.n	800550c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8005422:	e084      	b.n	800552e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005426:	3301      	adds	r3, #1
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542e:	429a      	cmp	r2, r3
 8005430:	d3c5      	bcc.n	80053be <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8005432:	6a3a      	ldr	r2, [r7, #32]
 8005434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005436:	601a      	str	r2, [r3, #0]
                *off = noff;
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543c:	601a      	str	r2, [r3, #0]
                return 0;
 800543e:	2300      	movs	r3, #0
 8005440:	e075      	b.n	800552e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	3301      	adds	r3, #1
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8005448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800544a:	f7fb fcf4 	bl	8000e36 <lfs_ctz>
 800544e:	4603      	mov	r3, r0
 8005450:	3301      	adds	r3, #1
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8005458:	2300      	movs	r3, #0
 800545a:	633b      	str	r3, [r7, #48]	; 0x30
 800545c:	e049      	b.n	80054f2 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	4618      	mov	r0, r3
 8005462:	f7fb fd19 	bl	8000e98 <lfs_tole32>
 8005466:	4603      	mov	r3, r0
 8005468:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546e:	0092      	lsls	r2, r2, #2
 8005470:	2104      	movs	r1, #4
 8005472:	9103      	str	r1, [sp, #12]
 8005474:	f107 0118 	add.w	r1, r7, #24
 8005478:	9102      	str	r1, [sp, #8]
 800547a:	9201      	str	r2, [sp, #4]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	2301      	movs	r3, #1
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7fb fff7 	bl	8001478 <lfs_bd_prog>
 800548a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	4618      	mov	r0, r3
 8005490:	f7fb fcf8 	bl	8000e84 <lfs_fromle32>
 8005494:	4603      	mov	r3, r0
 8005496:	61bb      	str	r3, [r7, #24]
                if (err) {
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80054a4:	d034      	beq.n	8005510 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	e041      	b.n	800552e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	3b01      	subs	r3, #1
 80054ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d01b      	beq.n	80054ec <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b8:	0092      	lsls	r2, r2, #2
 80054ba:	2104      	movs	r1, #4
 80054bc:	9103      	str	r1, [sp, #12]
 80054be:	f107 0118 	add.w	r1, r7, #24
 80054c2:	9102      	str	r1, [sp, #8]
 80054c4:	9201      	str	r2, [sp, #4]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2304      	movs	r3, #4
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	2100      	movs	r1, #0
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7fb fd40 	bl	8000f54 <lfs_bd_read>
 80054d4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fb fcd3 	bl	8000e84 <lfs_fromle32>
 80054de:	4603      	mov	r3, r0
 80054e0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <lfs_ctz_extend+0x1b8>
                        return err;
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	e020      	b.n	800552e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	3301      	adds	r3, #1
 80054f0:	633b      	str	r3, [r7, #48]	; 0x30
 80054f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d3b1      	bcc.n	800545e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fe:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	009a      	lsls	r2, r3, #2
 8005504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005506:	601a      	str	r2, [r3, #0]
            return 0;
 8005508:	2300      	movs	r3, #0
 800550a:	e010      	b.n	800552e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800550c:	bf00      	nop
 800550e:	e000      	b.n	8005512 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8005510:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	4a08      	ldr	r2, [pc, #32]	; (8005538 <lfs_ctz_extend+0x204>)
 8005516:	9200      	str	r2, [sp, #0]
 8005518:	f640 328a 	movw	r2, #2954	; 0xb8a
 800551c:	4907      	ldr	r1, [pc, #28]	; (800553c <lfs_ctz_extend+0x208>)
 800551e:	4808      	ldr	r0, [pc, #32]	; (8005540 <lfs_ctz_extend+0x20c>)
 8005520:	f008 f9c2 	bl	800d8a8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7fb fcf0 	bl	8000f0c <lfs_cache_drop>
    while (true) {
 800552c:	e709      	b.n	8005342 <lfs_ctz_extend+0xe>
    }
}
 800552e:	4618      	mov	r0, r3
 8005530:	3738      	adds	r7, #56	; 0x38
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	080112a0 	.word	0x080112a0
 800553c:	08011198 	.word	0x08011198
 8005540:	08011320 	.word	0x08011320

08005544 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b090      	sub	sp, #64	; 0x40
 8005548:	af04      	add	r7, sp, #16
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <lfs_ctz_traverse+0x18>
        return 0;
 8005558:	2300      	movs	r3, #0
 800555a:	e06d      	b.n	8005638 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	3b01      	subs	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	f107 031c 	add.w	r3, r7, #28
 8005566:	4619      	mov	r1, r3
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff fe3f 	bl	80051ec <lfs_ctz_index>
 800556e:	4603      	mov	r3, r0
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005578:	4798      	blx	r3
 800557a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <lfs_ctz_traverse+0x42>
            return err;
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	e058      	b.n	8005638 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <lfs_ctz_traverse+0x4c>
            return 0;
 800558c:	2300      	movs	r3, #0
 800558e:	e053      	b.n	8005638 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	f1c3 0302 	rsb	r3, r3, #2
 800559a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800559c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800559e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80055a0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80055a2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80055a4:	9303      	str	r3, [sp, #12]
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	2300      	movs	r3, #0
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7fb fcca 	bl	8000f54 <lfs_bd_read>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fb fc5d 	bl	8000e84 <lfs_fromle32>
 80055ca:	4603      	mov	r3, r0
 80055cc:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fb fc57 	bl	8000e84 <lfs_fromle32>
 80055d6:	4603      	mov	r3, r0
 80055d8:	61bb      	str	r3, [r7, #24]
        if (err) {
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <lfs_ctz_traverse+0xa0>
            return err;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	e029      	b.n	8005638 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 80055e4:	2300      	movs	r3, #0
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e8:	e013      	b.n	8005612 <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80055f2:	4413      	add	r3, r2
 80055f4:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	4611      	mov	r1, r2
 80055fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80055fe:	4798      	blx	r3
 8005600:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <lfs_ctz_traverse+0xc8>
                return err;
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	e015      	b.n	8005638 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	3301      	adds	r3, #1
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	3b01      	subs	r3, #1
 8005616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005618:	429a      	cmp	r2, r3
 800561a:	dbe6      	blt.n	80055ea <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	3b01      	subs	r3, #1
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005626:	4413      	add	r3, r2
 8005628:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800562c:	603b      	str	r3, [r7, #0]
        index -= count;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8005636:	e79c      	b.n	8005572 <lfs_ctz_traverse+0x2e>
    }
}
 8005638:	4618      	mov	r0, r3
 800563a:	3730      	adds	r7, #48	; 0x30
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8005640:	b5b0      	push	{r4, r5, r7, lr}
 8005642:	b09a      	sub	sp, #104	; 0x68
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f002 f9a1 	bl	80079a0 <lfs_fs_forceconsistency>
 800565e:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8005660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <lfs_file_rawopencfg+0x2a>
            return err;
 8005666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005668:	e1b0      	b.n	80059cc <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800566e:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2200      	movs	r2, #0
 800567a:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2200      	movs	r2, #0
 8005680:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2200      	movs	r2, #0
 8005686:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f103 0108 	add.w	r1, r3, #8
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	3304      	adds	r3, #4
 8005692:	1d3a      	adds	r2, r7, #4
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7fd ff7f 	bl	8003598 <lfs_dir_find>
 800569a:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800569c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800569e:	2b00      	cmp	r3, #0
 80056a0:	da0c      	bge.n	80056bc <lfs_file_rawopencfg+0x7c>
 80056a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a4:	f113 0f02 	cmn.w	r3, #2
 80056a8:	d105      	bne.n	80056b6 <lfs_file_rawopencfg+0x76>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	889b      	ldrh	r3, [r3, #4]
 80056ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d102      	bne.n	80056bc <lfs_file_rawopencfg+0x7c>
        err = tag;
 80056b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b8:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80056ba:	e17c      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2201      	movs	r2, #1
 80056c0:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7fc faf6 	bl	8001cb6 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80056ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056cc:	f113 0f02 	cmn.w	r3, #2
 80056d0:	d14e      	bne.n	8005770 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 80056dc:	f06f 0301 	mvn.w	r3, #1
 80056e0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80056e2:	e168      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fa fd3c 	bl	8000164 <strlen>
 80056ec:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d903      	bls.n	8005700 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80056f8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80056fc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80056fe:	e15a      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f103 0108 	add.w	r1, r3, #8
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	889b      	ldrh	r3, [r3, #4]
 800570a:	029b      	lsls	r3, r3, #10
 800570c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005716:	2300      	movs	r3, #0
 8005718:	633b      	str	r3, [r7, #48]	; 0x30
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	889b      	ldrh	r3, [r3, #4]
 800571e:	029a      	lsls	r2, r3, #10
 8005720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005722:	4313      	orrs	r3, r2
 8005724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	63bb      	str	r3, [r7, #56]	; 0x38
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	889b      	ldrh	r3, [r3, #4]
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573e:	2300      	movs	r3, #0
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
 8005742:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005746:	2303      	movs	r3, #3
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f7ff fc1d 	bl	8004f88 <lfs_dir_commit>
 800574e:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8005750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005752:	f113 0f1c 	cmn.w	r3, #28
 8005756:	d001      	beq.n	800575c <lfs_file_rawopencfg+0x11c>
 8005758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800575a:	e001      	b.n	8005760 <lfs_file_rawopencfg+0x120>
 800575c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005760:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8005762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 8125 	bne.w	80059b4 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800576a:	4b9a      	ldr	r3, [pc, #616]	; (80059d4 <lfs_file_rawopencfg+0x394>)
 800576c:	65bb      	str	r3, [r7, #88]	; 0x58
 800576e:	e044      	b.n	80057fa <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 800577a:	f06f 0310 	mvn.w	r3, #16
 800577e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005780:	e119      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8005782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005784:	4618      	mov	r0, r3
 8005786:	f7fc f849 	bl	800181c <lfs_tag_type3>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d003      	beq.n	8005798 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8005790:	f06f 0314 	mvn.w	r3, #20
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005796:	e10e      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00e      	beq.n	80057c0 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	889b      	ldrh	r3, [r3, #4]
 80057a6:	029b      	lsls	r3, r3, #10
 80057a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057b0:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30
 80057be:	e01c      	b.n	80057fa <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	889b      	ldrh	r3, [r3, #4]
 80057ca:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80057cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d0:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80057d8:	9200      	str	r2, [sp, #0]
 80057da:	4a7f      	ldr	r2, [pc, #508]	; (80059d8 <lfs_file_rawopencfg+0x398>)
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7fc fc9f 	bl	8002120 <lfs_dir_get>
 80057e2:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 80057e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da02      	bge.n	80057f0 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 80057ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ec:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80057ee:	e0e2      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	3328      	adds	r3, #40	; 0x28
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fc f981 	bl	8001afc <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80057fa:	2300      	movs	r3, #0
 80057fc:	657b      	str	r3, [r7, #84]	; 0x54
 80057fe:	e063      	b.n	80058c8 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d03c      	beq.n	8005886 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800582a:	051a      	lsls	r2, r3, #20
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	889b      	ldrh	r3, [r3, #4]
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	ea42 0103 	orr.w	r1, r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583a:	6858      	ldr	r0, [r3, #4]
 800583c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800583e:	4613      	mov	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4403      	add	r3, r0
 8005848:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800584a:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005856:	4613      	mov	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	4603      	mov	r3, r0
 8005866:	4a5d      	ldr	r2, [pc, #372]	; (80059dc <lfs_file_rawopencfg+0x39c>)
 8005868:	4621      	mov	r1, r4
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7fc fc58 	bl	8002120 <lfs_dir_get>
 8005870:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8005872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005874:	2b00      	cmp	r3, #0
 8005876:	da06      	bge.n	8005886 <lfs_file_rawopencfg+0x246>
 8005878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587a:	f113 0f02 	cmn.w	r3, #2
 800587e:	d002      	beq.n	8005886 <lfs_file_rawopencfg+0x246>
                err = res;
 8005880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005882:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005884:	e097      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d017      	beq.n	80058c2 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005896:	6859      	ldr	r1, [r3, #4]
 8005898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800589a:	4613      	mov	r3, r2
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d903      	bls.n	80058b6 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 80058ae:	f06f 031b 	mvn.w	r3, #27
 80058b2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80058b4:	e07f      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80058c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c4:	3301      	adds	r3, #1
 80058c6:	657b      	str	r3, [r7, #84]	; 0x54
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d395      	bcc.n	8005800 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80058e8:	e010      	b.n	800590c <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fb faf4 	bl	8000ede <lfs_malloc>
 80058f6:	4602      	mov	r2, r0
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8005904:	f06f 030b 	mvn.w	r3, #11
 8005908:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800590a:	e054      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	3340      	adds	r3, #64	; 0x40
 8005910:	4619      	mov	r1, r3
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7fb fb08 	bl	8000f28 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8005918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800591a:	4618      	mov	r0, r3
 800591c:	f7fb ff7e 	bl	800181c <lfs_tag_type3>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	f240 2301 	movw	r3, #513	; 0x201
 8005928:	429a      	cmp	r2, r3
 800592a:	d141      	bne.n	80059b0 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f06f 0201 	mvn.w	r2, #1
 8005932:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8005934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005936:	4618      	mov	r0, r3
 8005938:	f7fb ffa7 	bl	800188a <lfs_tag_size>
 800593c:	4602      	mov	r2, r0
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2200      	movs	r2, #0
 800595a:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d020      	beq.n	80059b0 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	889b      	ldrh	r3, [r3, #4]
 8005978:	029c      	lsls	r4, r3, #10
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800597e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005982:	4618      	mov	r0, r3
 8005984:	f7fb fa13 	bl	8000dae <lfs_min>
 8005988:	4603      	mov	r3, r0
 800598a:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800598c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	4613      	mov	r3, r2
 8005998:	4a0f      	ldr	r2, [pc, #60]	; (80059d8 <lfs_file_rawopencfg+0x398>)
 800599a:	4629      	mov	r1, r5
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7fc fbbf 	bl	8002120 <lfs_dir_get>
 80059a2:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80059a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	da02      	bge.n	80059b0 <lfs_file_rawopencfg+0x370>
                err = res;
 80059aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80059ae:	e002      	b.n	80059b6 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e00b      	b.n	80059cc <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80059b4:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f823 	bl	8005a10 <lfs_file_rawclose>
    return err;
 80059ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3760      	adds	r7, #96	; 0x60
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bdb0      	pop	{r4, r5, r7, pc}
 80059d4:	20100000 	.word	0x20100000
 80059d8:	700ffc00 	.word	0x700ffc00
 80059dc:	7ffffc00 	.word	0x7ffffc00

080059e0 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 80059ee:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <lfs_file_rawopen+0x2c>)
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff fe21 	bl	8005640 <lfs_file_rawopencfg>
 80059fe:	6178      	str	r0, [r7, #20]
    return err;
 8005a00:	697b      	ldr	r3, [r7, #20]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	08011ecc 	.word	0x08011ecc

08005a10 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f9e5 	bl	8005dec <lfs_file_rawsync>
 8005a22:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fc f924 	bl	8001c74 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fb fa5b 	bl	8000ef6 <lfs_free>
    }

    return err;
 8005a40:	68fb      	ldr	r3, [r7, #12]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b08d      	sub	sp, #52	; 0x34
 8005a50:	af06      	add	r7, sp, #24
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005a56:	f107 030c 	add.w	r3, r7, #12
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fc f9f7 	bl	8001e50 <lfs_alloc>
 8005a62:	6138      	str	r0, [r7, #16]
        if (err) {
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <lfs_file_relocate+0x22>
            return err;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	e0bb      	b.n	8005be6 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fb fdac 	bl	80015d0 <lfs_bd_erase>
 8005a78:	6138      	str	r0, [r7, #16]
        if (err) {
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005a86:	f000 809b 	beq.w	8005bc0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	e0ab      	b.n	8005be6 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e069      	b.n	8005b68 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d027      	beq.n	8005af0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f103 0008 	add.w	r0, r3, #8
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	889b      	ldrh	r3, [r3, #4]
 8005ab8:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8005aba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	9105      	str	r1, [sp, #20]
 8005ac6:	f107 010b 	add.w	r1, r7, #11
 8005aca:	9104      	str	r1, [sp, #16]
 8005acc:	6979      	ldr	r1, [r7, #20]
 8005ace:	9103      	str	r1, [sp, #12]
 8005ad0:	9302      	str	r3, [sp, #8]
 8005ad2:	4b47      	ldr	r3, [pc, #284]	; (8005bf0 <lfs_file_relocate+0x1a4>)
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	9200      	str	r2, [sp, #0]
 8005ad8:	4623      	mov	r3, r4
 8005ada:	2200      	movs	r2, #0
 8005adc:	4601      	mov	r1, r0
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fc fb39 	bl	8002156 <lfs_dir_getread>
 8005ae4:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01e      	beq.n	8005b2a <lfs_file_relocate+0xde>
                    return err;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	e07a      	b.n	8005be6 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8005af6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	1ad4      	subs	r4, r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	2201      	movs	r2, #1
 8005b06:	9203      	str	r2, [sp, #12]
 8005b08:	f107 020b 	add.w	r2, r7, #11
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	9201      	str	r2, [sp, #4]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	4623      	mov	r3, r4
 8005b16:	4602      	mov	r2, r0
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7fb fa1b 	bl	8000f54 <lfs_bd_read>
 8005b1e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <lfs_file_relocate+0xde>
                    return err;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	e05d      	b.n	8005be6 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f103 0110 	add.w	r1, r3, #16
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	9203      	str	r2, [sp, #12]
 8005b38:	f107 020b 	add.w	r2, r7, #11
 8005b3c:	9202      	str	r2, [sp, #8]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	9201      	str	r2, [sp, #4]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2301      	movs	r3, #1
 8005b46:	4602      	mov	r2, r0
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fb fc95 	bl	8001478 <lfs_bd_prog>
 8005b4e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005b5c:	d032      	beq.n	8005bc4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	e041      	b.n	8005be6 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	3301      	adds	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d390      	bcc.n	8005a94 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69d9      	ldr	r1, [r3, #28]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	461a      	mov	r2, r3
 8005b82:	f006 fe0b 	bl	800c79c <memcpy>
        file->cache.block = lfs->pcache.block;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695a      	ldr	r2, [r3, #20]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7fb f9bf 	bl	8000f28 <lfs_cache_zero>

        file->block = nblock;
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e012      	b.n	8005be6 <lfs_file_relocate+0x19a>
                goto relocate;
 8005bc0:	bf00      	nop
 8005bc2:	e000      	b.n	8005bc6 <lfs_file_relocate+0x17a>
                    goto relocate;
 8005bc4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <lfs_file_relocate+0x1a8>)
 8005bca:	9200      	str	r2, [sp, #0]
 8005bcc:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8005bd0:	4909      	ldr	r1, [pc, #36]	; (8005bf8 <lfs_file_relocate+0x1ac>)
 8005bd2:	480a      	ldr	r0, [pc, #40]	; (8005bfc <lfs_file_relocate+0x1b0>)
 8005bd4:	f007 fe68 	bl	800d8a8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3310      	adds	r3, #16
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fb f994 	bl	8000f0c <lfs_cache_drop>
    while (true) {
 8005be4:	e737      	b.n	8005a56 <lfs_file_relocate+0xa>
    }
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd90      	pop	{r4, r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	fff7fc00 	.word	0xfff7fc00
 8005bf4:	080112a0 	.word	0x080112a0
 8005bf8:	08011198 	.word	0x08011198
 8005bfc:	08011320 	.word	0x08011320

08005c00 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fc f8bb 	bl	8001d8e <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff ff16 	bl	8005a4c <lfs_file_relocate>
 8005c20:	60f8      	str	r0, [r7, #12]
    if (err) {
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <lfs_file_outline+0x2c>
        return err;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	e006      	b.n	8005c3a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b09f      	sub	sp, #124	; 0x7c
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d011      	beq.n	8005c7e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	3340      	adds	r3, #64	; 0x40
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fb f94d 	bl	8000f0c <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 80a4 	beq.w	8005dd4 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c90:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d176      	bne.n	8005d8c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8005c9e:	f107 030c 	add.w	r3, r7, #12
 8005ca2:	2254      	movs	r2, #84	; 0x54
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f006 fd86 	bl	800c7b8 <memset>
                .ctz.head = file->ctz.head,
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8005cb0:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8005cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cb8:	2301      	movs	r3, #1
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8005cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fb f91a 	bl	8000f0c <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005cd8:	e02b      	b.n	8005d32 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8005cda:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8005cde:	f107 010c 	add.w	r1, r7, #12
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f90d 	bl	8005f04 <lfs_file_flushedread>
 8005cea:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8005cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da01      	bge.n	8005cf6 <lfs_file_flush+0xb2>
                    return res;
 8005cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf4:	e06f      	b.n	8005dd6 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005cf6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa08 	bl	8006114 <lfs_file_flushedwrite>
 8005d04:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8005d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	da01      	bge.n	8005d10 <lfs_file_flush+0xcc>
                    return res;
 8005d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d0e:	e062      	b.n	8005dd6 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d00b      	beq.n	8005d32 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8005d1a:	f107 030c 	add.w	r3, r7, #12
 8005d1e:	3340      	adds	r3, #64	; 0x40
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fb f8f2 	bl	8000f0c <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7fb f8ed 	bl	8000f0c <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3cd      	bcc.n	8005cda <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	2301      	movs	r3, #1
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7fb fae7 	bl	800131c <lfs_bd_flush>
 8005d4e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d026      	beq.n	8005da4 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8005d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d58:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005d5c:	d001      	beq.n	8005d62 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8005d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d60:	e039      	b.n	8005dd6 <lfs_file_flush+0x192>
                        goto relocate;
 8005d62:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <lfs_file_flush+0x19c>)
 8005d6a:	9200      	str	r2, [sp, #0]
 8005d6c:	f640 520f 	movw	r2, #3343	; 0xd0f
 8005d70:	491c      	ldr	r1, [pc, #112]	; (8005de4 <lfs_file_flush+0x1a0>)
 8005d72:	481d      	ldr	r0, [pc, #116]	; (8005de8 <lfs_file_flush+0x1a4>)
 8005d74:	f007 fd98 	bl	800d8a8 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fe66 	bl	8005a4c <lfs_file_relocate>
 8005d80:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0da      	beq.n	8005d3e <lfs_file_flush+0xfa>
                    return err;
 8005d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d8a:	e024      	b.n	8005dd6 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7fa fffa 	bl	8000d90 <lfs_max>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	635a      	str	r2, [r3, #52]	; 0x34
 8005da2:	e000      	b.n	8005da6 <lfs_file_flush+0x162>
                break;
 8005da4:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dd2:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3774      	adds	r7, #116	; 0x74
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd90      	pop	{r4, r7, pc}
 8005dde:	bf00      	nop
 8005de0:	080112a0 	.word	0x080112a0
 8005de4:	08011198 	.word	0x08011198
 8005de8:	08011320 	.word	0x08011320

08005dec <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b090      	sub	sp, #64	; 0x40
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e07a      	b.n	8005efc <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ff1b 	bl	8005c44 <lfs_file_flush>
 8005e0e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	e06a      	b.n	8005efc <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d063      	beq.n	8005efa <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	3308      	adds	r3, #8
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fb fc10 	bl	800165c <lfs_pair_isnull>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f083 0301 	eor.w	r3, r3, #1
 8005e42:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d058      	beq.n	8005efa <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005e54:	f240 2301 	movw	r3, #513	; 0x201
 8005e58:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5e:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
 8005e66:	e014      	b.n	8005e92 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005e68:	f240 2302 	movw	r3, #514	; 0x202
 8005e6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e74:	3228      	adds	r2, #40	; 0x28
 8005e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e7a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8005e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fb fe52 	bl	8001b2c <lfs_ctz_tole32>
            buffer = &ctz;
 8005e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e8c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8005e8e:	2308      	movs	r3, #8
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	f103 0108 	add.w	r1, r3, #8
 8005e98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e9a:	051a      	lsls	r2, r3, #20
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	889b      	ldrh	r3, [r3, #4]
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	889b      	ldrh	r3, [r3, #4]
 8005eb2:	029a      	lsls	r2, r3, #10
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eca:	f107 0218 	add.w	r2, r7, #24
 8005ece:	2302      	movs	r3, #2
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff f859 	bl	8004f88 <lfs_dir_commit>
 8005ed6:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	e006      	b.n	8005efc <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3740      	adds	r7, #64	; 0x40
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005f04:	b5b0      	push	{r4, r5, r7, lr}
 8005f06:	b090      	sub	sp, #64	; 0x40
 8005f08:	af06      	add	r7, sp, #24
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d301      	bcc.n	8005f2a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e0b7      	b.n	800609a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	4619      	mov	r1, r3
 8005f36:	6838      	ldr	r0, [r7, #0]
 8005f38:	f7fa ff39 	bl	8000dae <lfs_min>
 8005f3c:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005f42:	e0a5      	b.n	8006090 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d006      	beq.n	8005f5e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f58:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d130      	bne.n	8005fc0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d11c      	bne.n	8005fa4 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	3138      	adds	r1, #56	; 0x38
 8005f80:	68b8      	ldr	r0, [r7, #8]
 8005f82:	303c      	adds	r0, #60	; 0x3c
 8005f84:	9003      	str	r0, [sp, #12]
 8005f86:	9102      	str	r1, [sp, #8]
 8005f88:	9201      	str	r2, [sp, #4]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	462b      	mov	r3, r5
 8005f8e:	4622      	mov	r2, r4
 8005f90:	2100      	movs	r1, #0
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff f962 	bl	800525c <lfs_ctz_find>
 8005f98:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <lfs_file_flushedread+0xb0>
                    return err;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	e07a      	b.n	800609a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f06f 0201 	mvn.w	r2, #1
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc4:	69da      	ldr	r2, [r3, #28]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6a38      	ldr	r0, [r7, #32]
 8005fd0:	f7fa feed 	bl	8000dae <lfs_min>
 8005fd4:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d026      	beq.n	8006030 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f103 0408 	add.w	r4, r3, #8
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8005ff2:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	889b      	ldrh	r3, [r3, #4]
 8005ff8:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8005ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8006006:	69b8      	ldr	r0, [r7, #24]
 8006008:	9005      	str	r0, [sp, #20]
 800600a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800600c:	9004      	str	r0, [sp, #16]
 800600e:	9103      	str	r1, [sp, #12]
 8006010:	9302      	str	r3, [sp, #8]
 8006012:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <lfs_file_flushedread+0x1a0>)
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	9200      	str	r2, [sp, #0]
 8006018:	462b      	mov	r3, r5
 800601a:	2200      	movs	r2, #0
 800601c:	4621      	mov	r1, r4
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7fc f899 	bl	8002156 <lfs_dir_getread>
 8006024:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01d      	beq.n	8006068 <lfs_file_flushedread+0x164>
                return err;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	e034      	b.n	800609a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800603a:	69dc      	ldr	r4, [r3, #28]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006044:	69b9      	ldr	r1, [r7, #24]
 8006046:	9103      	str	r1, [sp, #12]
 8006048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800604a:	9102      	str	r1, [sp, #8]
 800604c:	9201      	str	r2, [sp, #4]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	4623      	mov	r3, r4
 8006052:	4602      	mov	r2, r0
 8006054:	2100      	movs	r1, #0
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7fa ff7c 	bl	8000f54 <lfs_bd_read>
 800605c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <lfs_file_flushedread+0x164>
                return err;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	e018      	b.n	800609a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	441a      	add	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	441a      	add	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8006080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	4413      	add	r3, r2
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8006088:	6a3a      	ldr	r2, [r7, #32]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f af56 	bne.w	8005f44 <lfs_file_flushedread+0x40>
    }

    return size;
 8006098:	683b      	ldr	r3, [r7, #0]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3728      	adds	r7, #40	; 0x28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bdb0      	pop	{r4, r5, r7, pc}
 80060a2:	bf00      	nop
 80060a4:	fff7fc00 	.word	0xfff7fc00

080060a8 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <lfs_file_rawread+0x28>
 80060c2:	4b11      	ldr	r3, [pc, #68]	; (8006108 <lfs_file_rawread+0x60>)
 80060c4:	4a11      	ldr	r2, [pc, #68]	; (800610c <lfs_file_rawread+0x64>)
 80060c6:	f640 519a 	movw	r1, #3482	; 0xd9a
 80060ca:	4811      	ldr	r0, [pc, #68]	; (8006110 <lfs_file_rawread+0x68>)
 80060cc:	f006 faee 	bl	800c6ac <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff fdb0 	bl	8005c44 <lfs_file_flush>
 80060e4:	6178      	str	r0, [r7, #20]
        if (err) {
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <lfs_file_rawread+0x48>
            return err;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	e006      	b.n	80060fe <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff ff04 	bl	8005f04 <lfs_file_flushedread>
 80060fc:	4603      	mov	r3, r0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	080114c8 	.word	0x080114c8
 800610c:	08011ed8 	.word	0x08011ed8
 8006110:	08011198 	.word	0x08011198

08006114 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006114:	b5b0      	push	{r4, r5, r7, lr}
 8006116:	b090      	sub	sp, #64	; 0x40
 8006118:	af04      	add	r7, sp, #16
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 810e 	beq.w	8006354 <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	441a      	add	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f7fa fe22 	bl	8000d90 <lfs_max>
 800614c:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8006152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8006164:	08db      	lsrs	r3, r3, #3
 8006166:	e003      	b.n	8006170 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616c:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 800616e:	08db      	lsrs	r3, r3, #3
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f7fa fe1b 	bl	8000dae <lfs_min>
 8006178:	4603      	mov	r3, r0
 800617a:	4619      	mov	r1, r3
 800617c:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8006180:	f7fa fe15 	bl	8000dae <lfs_min>
 8006184:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8006186:	429c      	cmp	r4, r3
 8006188:	f240 80e4 	bls.w	8006354 <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff fd36 	bl	8005c00 <lfs_file_outline>
 8006194:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80db 	beq.w	8006354 <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	e0d7      	b.n	800635e <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d006      	beq.n	80061c8 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c2:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d16d      	bne.n	80062a4 <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d159      	bne.n	8006288 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d12f      	bne.n	8006240 <lfs_file_flushedwrite+0x12c>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d02b      	beq.n	8006240 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80061fa:	3a01      	subs	r2, #1
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8006200:	2000      	movs	r0, #0
 8006202:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006204:	f107 0010 	add.w	r0, r7, #16
 8006208:	9003      	str	r0, [sp, #12]
 800620a:	9102      	str	r1, [sp, #8]
 800620c:	9201      	str	r2, [sp, #4]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	462b      	mov	r3, r5
 8006212:	4622      	mov	r2, r4
 8006214:	2100      	movs	r1, #0
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff f820 	bl	800525c <lfs_ctz_find>
 800621c:	6238      	str	r0, [r7, #32]
                    if (err) {
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	e094      	b.n	800635e <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	3340      	adds	r3, #64	; 0x40
 8006238:	4619      	mov	r1, r3
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7fa fe74 	bl	8000f28 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7fb fda4 	bl	8001d8e <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800624c:	68fc      	ldr	r4, [r7, #12]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	3238      	adds	r2, #56	; 0x38
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	313c      	adds	r1, #60	; 0x3c
 800625e:	9102      	str	r1, [sp, #8]
 8006260:	9201      	str	r2, [sp, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	462b      	mov	r3, r5
 8006266:	4622      	mov	r2, r4
 8006268:	4601      	mov	r1, r0
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff f862 	bl	8005334 <lfs_ctz_extend>
 8006270:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00f      	beq.n	8006298 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	e06a      	b.n	800635e <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f06f 0201 	mvn.w	r2, #1
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	4619      	mov	r1, r3
 80062b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062b4:	f7fa fd7b 	bl	8000dae <lfs_min>
 80062b8:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80062c0:	68fc      	ldr	r4, [r7, #12]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062ca:	69b9      	ldr	r1, [r7, #24]
 80062cc:	9103      	str	r1, [sp, #12]
 80062ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062d0:	9102      	str	r1, [sp, #8]
 80062d2:	9201      	str	r2, [sp, #4]
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	2301      	movs	r3, #1
 80062d8:	4622      	mov	r2, r4
 80062da:	4601      	mov	r1, r0
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7fb f8cb 	bl	8001478 <lfs_bd_prog>
 80062e2:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01c      	beq.n	8006324 <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80062f0:	d007      	beq.n	8006302 <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	e02d      	b.n	800635e <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 8006302:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff fba0 	bl	8005a4c <lfs_file_relocate>
 800630c:	6178      	str	r0, [r7, #20]
            if (err) {
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0d2      	beq.n	80062ba <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	e01c      	b.n	800635e <lfs_file_flushedwrite+0x24a>
            break;
 8006324:	bf00      	nop
            }
        }

        file->pos += diff;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	441a      	add	r2, r3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	441a      	add	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800633e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	4413      	add	r3, r2
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8006346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f7fb fd1d 	bl	8001d8e <lfs_alloc_ack>
    while (nsize > 0) {
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	f47f af29 	bne.w	80061ae <lfs_file_flushedwrite+0x9a>
    }

    return size;
 800635c:	683b      	ldr	r3, [r7, #0]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3730      	adds	r7, #48	; 0x30
 8006362:	46bd      	mov	sp, r7
 8006364:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006368 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <lfs_file_rawwrite+0x28>
 8006382:	4b38      	ldr	r3, [pc, #224]	; (8006464 <lfs_file_rawwrite+0xfc>)
 8006384:	4a38      	ldr	r2, [pc, #224]	; (8006468 <lfs_file_rawwrite+0x100>)
 8006386:	f640 6105 	movw	r1, #3589	; 0xe05
 800638a:	4838      	ldr	r0, [pc, #224]	; (800646c <lfs_file_rawwrite+0x104>)
 800638c:	f006 f98e 	bl	800c6ac <__assert_func>

    if (file->flags & LFS_F_READING) {
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff fc50 	bl	8005c44 <lfs_file_flush>
 80063a4:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <lfs_file_rawwrite+0x48>
            return err;
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	e055      	b.n	800645c <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d009      	beq.n	80063d0 <lfs_file_rawwrite+0x68>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d203      	bcs.n	80063d0 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	441a      	add	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063dc:	429a      	cmp	r2, r3
 80063de:	d902      	bls.n	80063e6 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80063e0:	f06f 031a 	mvn.w	r3, #26
 80063e4:	e03a      	b.n	800645c <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d121      	bne.n	8006436 <lfs_file_rawwrite+0xce>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d91b      	bls.n	8006436 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006402:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800640c:	e00e      	b.n	800642c <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]
 8006412:	f107 0217 	add.w	r2, r7, #23
 8006416:	2301      	movs	r3, #1
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff fe7a 	bl	8006114 <lfs_file_flushedwrite>
 8006420:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	2b00      	cmp	r3, #0
 8006426:	da01      	bge.n	800642c <lfs_file_rawwrite+0xc4>
                return res;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	e017      	b.n	800645c <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	6a3a      	ldr	r2, [r7, #32]
 8006432:	429a      	cmp	r2, r3
 8006434:	d8eb      	bhi.n	800640e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7ff fe69 	bl	8006114 <lfs_file_flushedwrite>
 8006442:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	da01      	bge.n	800644e <lfs_file_rawwrite+0xe6>
        return nsize;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	e006      	b.n	800645c <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 800645a:	69bb      	ldr	r3, [r7, #24]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3728      	adds	r7, #40	; 0x28
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	080114f8 	.word	0x080114f8
 8006468:	08011eec 	.word	0x08011eec
 800646c:	08011198 	.word	0x08011198

08006470 <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f7fa fc7d 	bl	8000d90 <lfs_max>
 8006496:	4603      	mov	r3, r0
 8006498:	e001      	b.n	800649e <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <lfs_init+0x34>
 80064ce:	4b98      	ldr	r3, [pc, #608]	; (8006730 <lfs_init+0x288>)
 80064d0:	4a98      	ldr	r2, [pc, #608]	; (8006734 <lfs_init+0x28c>)
 80064d2:	f241 0123 	movw	r1, #4131	; 0x1023
 80064d6:	4898      	ldr	r0, [pc, #608]	; (8006738 <lfs_init+0x290>)
 80064d8:	f006 f8e8 	bl	800c6ac <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <lfs_init+0x4c>
 80064e6:	4b95      	ldr	r3, [pc, #596]	; (800673c <lfs_init+0x294>)
 80064e8:	4a92      	ldr	r2, [pc, #584]	; (8006734 <lfs_init+0x28c>)
 80064ea:	f241 0124 	movw	r1, #4132	; 0x1024
 80064ee:	4892      	ldr	r0, [pc, #584]	; (8006738 <lfs_init+0x290>)
 80064f0:	f006 f8dc 	bl	800c6ac <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <lfs_init+0x64>
 80064fe:	4b90      	ldr	r3, [pc, #576]	; (8006740 <lfs_init+0x298>)
 8006500:	4a8c      	ldr	r2, [pc, #560]	; (8006734 <lfs_init+0x28c>)
 8006502:	f241 0125 	movw	r1, #4133	; 0x1025
 8006506:	488c      	ldr	r0, [pc, #560]	; (8006738 <lfs_init+0x290>)
 8006508:	f006 f8d0 	bl	800c6ac <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006516:	6952      	ldr	r2, [r2, #20]
 8006518:	fbb3 f1f2 	udiv	r1, r3, r2
 800651c:	fb02 f201 	mul.w	r2, r2, r1
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d006      	beq.n	8006534 <lfs_init+0x8c>
 8006526:	4b87      	ldr	r3, [pc, #540]	; (8006744 <lfs_init+0x29c>)
 8006528:	4a82      	ldr	r2, [pc, #520]	; (8006734 <lfs_init+0x28c>)
 800652a:	f241 0129 	movw	r1, #4137	; 0x1029
 800652e:	4882      	ldr	r0, [pc, #520]	; (8006738 <lfs_init+0x290>)
 8006530:	f006 f8bc 	bl	800c6ac <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800653e:	6992      	ldr	r2, [r2, #24]
 8006540:	fbb3 f1f2 	udiv	r1, r3, r2
 8006544:	fb02 f201 	mul.w	r2, r2, r1
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d006      	beq.n	800655c <lfs_init+0xb4>
 800654e:	4b7e      	ldr	r3, [pc, #504]	; (8006748 <lfs_init+0x2a0>)
 8006550:	4a78      	ldr	r2, [pc, #480]	; (8006734 <lfs_init+0x28c>)
 8006552:	f241 012a 	movw	r1, #4138	; 0x102a
 8006556:	4878      	ldr	r0, [pc, #480]	; (8006738 <lfs_init+0x290>)
 8006558:	f006 f8a8 	bl	800c6ac <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006566:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006568:	fbb3 f1f2 	udiv	r1, r3, r2
 800656c:	fb02 f201 	mul.w	r2, r2, r1
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d006      	beq.n	8006584 <lfs_init+0xdc>
 8006576:	4b75      	ldr	r3, [pc, #468]	; (800674c <lfs_init+0x2a4>)
 8006578:	4a6e      	ldr	r2, [pc, #440]	; (8006734 <lfs_init+0x28c>)
 800657a:	f241 012b 	movw	r1, #4139	; 0x102b
 800657e:	486e      	ldr	r0, [pc, #440]	; (8006738 <lfs_init+0x290>)
 8006580:	f006 f894 	bl	800c6ac <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	2b7f      	cmp	r3, #127	; 0x7f
 800658c:	d806      	bhi.n	800659c <lfs_init+0xf4>
 800658e:	4b70      	ldr	r3, [pc, #448]	; (8006750 <lfs_init+0x2a8>)
 8006590:	4a68      	ldr	r2, [pc, #416]	; (8006734 <lfs_init+0x28c>)
 8006592:	f241 012e 	movw	r1, #4142	; 0x102e
 8006596:	4868      	ldr	r0, [pc, #416]	; (8006738 <lfs_init+0x290>)
 8006598:	f006 f888 	bl	800c6ac <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	3b08      	subs	r3, #8
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fa fc33 	bl	8000e18 <lfs_npw2>
 80065b2:	4603      	mov	r3, r0
 80065b4:	009a      	lsls	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d906      	bls.n	80065ce <lfs_init+0x126>
 80065c0:	4b64      	ldr	r3, [pc, #400]	; (8006754 <lfs_init+0x2ac>)
 80065c2:	4a5c      	ldr	r2, [pc, #368]	; (8006734 <lfs_init+0x28c>)
 80065c4:	f241 0131 	movw	r1, #4145	; 0x1031
 80065c8:	485b      	ldr	r0, [pc, #364]	; (8006738 <lfs_init+0x290>)
 80065ca:	f006 f86f 	bl	800c6ac <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <lfs_init+0x13e>
 80065d8:	4b5f      	ldr	r3, [pc, #380]	; (8006758 <lfs_init+0x2b0>)
 80065da:	4a56      	ldr	r2, [pc, #344]	; (8006734 <lfs_init+0x28c>)
 80065dc:	f241 013a 	movw	r1, #4154	; 0x103a
 80065e0:	4855      	ldr	r0, [pc, #340]	; (8006738 <lfs_init+0x290>)
 80065e2:	f006 f863 	bl	800c6ac <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <lfs_init+0x154>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	e010      	b.n	800661e <lfs_init+0x176>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	4618      	mov	r0, r3
 8006604:	f7fa fc6b 	bl	8000ede <lfs_malloc>
 8006608:	4602      	mov	r2, r0
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <lfs_init+0x176>
            err = LFS_ERR_NOMEM;
 8006616:	f06f 030b 	mvn.w	r3, #11
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800661c:	e0ff      	b.n	800681e <lfs_init+0x376>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <lfs_init+0x18c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	61da      	str	r2, [r3, #28]
 8006632:	e010      	b.n	8006656 <lfs_init+0x1ae>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	4618      	mov	r0, r3
 800663c:	f7fa fc4f 	bl	8000ede <lfs_malloc>
 8006640:	4602      	mov	r2, r0
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <lfs_init+0x1ae>
            err = LFS_ERR_NOMEM;
 800664e:	f06f 030b 	mvn.w	r3, #11
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8006654:	e0e3      	b.n	800681e <lfs_init+0x376>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fa fc64 	bl	8000f28 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3310      	adds	r3, #16
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fa fc5e 	bl	8000f28 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <lfs_init+0x1dc>
 8006676:	4b39      	ldr	r3, [pc, #228]	; (800675c <lfs_init+0x2b4>)
 8006678:	4a2e      	ldr	r2, [pc, #184]	; (8006734 <lfs_init+0x28c>)
 800667a:	f241 0158 	movw	r1, #4184	; 0x1058
 800667e:	482e      	ldr	r0, [pc, #184]	; (8006738 <lfs_init+0x290>)
 8006680:	f006 f814 	bl	800c6ac <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <lfs_init+0x1f8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d006      	beq.n	80066ae <lfs_init+0x206>
 80066a0:	4b2f      	ldr	r3, [pc, #188]	; (8006760 <lfs_init+0x2b8>)
 80066a2:	4a24      	ldr	r2, [pc, #144]	; (8006734 <lfs_init+0x28c>)
 80066a4:	f241 0159 	movw	r1, #4185	; 0x1059
 80066a8:	4823      	ldr	r0, [pc, #140]	; (8006738 <lfs_init+0x290>)
 80066aa:	f005 ffff 	bl	800c6ac <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <lfs_init+0x21c>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	665a      	str	r2, [r3, #100]	; 0x64
 80066c2:	e010      	b.n	80066e6 <lfs_init+0x23e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fa fc07 	bl	8000ede <lfs_malloc>
 80066d0:	4602      	mov	r2, r0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <lfs_init+0x23e>
            err = LFS_ERR_NOMEM;
 80066de:	f06f 030b 	mvn.w	r3, #11
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80066e4:	e09b      	b.n	800681e <lfs_init+0x376>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ec:	2bff      	cmp	r3, #255	; 0xff
 80066ee:	d906      	bls.n	80066fe <lfs_init+0x256>
 80066f0:	4b1c      	ldr	r3, [pc, #112]	; (8006764 <lfs_init+0x2bc>)
 80066f2:	4a10      	ldr	r2, [pc, #64]	; (8006734 <lfs_init+0x28c>)
 80066f4:	f241 0166 	movw	r1, #4198	; 0x1066
 80066f8:	480f      	ldr	r0, [pc, #60]	; (8006738 <lfs_init+0x290>)
 80066fa:	f005 ffd7 	bl	800c6ac <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <lfs_init+0x26e>
        lfs->name_max = LFS_NAME_MAX;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	22ff      	movs	r2, #255	; 0xff
 8006714:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	da25      	bge.n	800676c <lfs_init+0x2c4>
 8006720:	4b11      	ldr	r3, [pc, #68]	; (8006768 <lfs_init+0x2c0>)
 8006722:	4a04      	ldr	r2, [pc, #16]	; (8006734 <lfs_init+0x28c>)
 8006724:	f241 016c 	movw	r1, #4204	; 0x106c
 8006728:	4803      	ldr	r0, [pc, #12]	; (8006738 <lfs_init+0x290>)
 800672a:	f005 ffbf 	bl	800c6ac <__assert_func>
 800672e:	bf00      	nop
 8006730:	08011528 	.word	0x08011528
 8006734:	08011f00 	.word	0x08011f00
 8006738:	08011198 	.word	0x08011198
 800673c:	08011544 	.word	0x08011544
 8006740:	08011560 	.word	0x08011560
 8006744:	0801157c 	.word	0x0801157c
 8006748:	080115ac 	.word	0x080115ac
 800674c:	080115dc 	.word	0x080115dc
 8006750:	08011610 	.word	0x08011610
 8006754:	0801162c 	.word	0x0801162c
 8006758:	08011678 	.word	0x08011678
 800675c:	08011694 	.word	0x08011694
 8006760:	080116b4 	.word	0x080116b4
 8006764:	08011708 	.word	0x08011708
 8006768:	08011724 	.word	0x08011724
    lfs->file_max = lfs->cfg->file_max;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <lfs_init+0x2de>
        lfs->file_max = LFS_FILE_MAX;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006784:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006790:	4293      	cmp	r3, r2
 8006792:	d906      	bls.n	80067a2 <lfs_init+0x2fa>
 8006794:	4b26      	ldr	r3, [pc, #152]	; (8006830 <lfs_init+0x388>)
 8006796:	4a27      	ldr	r2, [pc, #156]	; (8006834 <lfs_init+0x38c>)
 8006798:	f241 0172 	movw	r1, #4210	; 0x1072
 800679c:	4826      	ldr	r0, [pc, #152]	; (8006838 <lfs_init+0x390>)
 800679e:	f005 ff85 	bl	800c6ac <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <lfs_init+0x314>
        lfs->attr_max = LFS_ATTR_MAX;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80067ba:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d906      	bls.n	80067da <lfs_init+0x332>
 80067cc:	4b1b      	ldr	r3, [pc, #108]	; (800683c <lfs_init+0x394>)
 80067ce:	4a19      	ldr	r2, [pc, #100]	; (8006834 <lfs_init+0x38c>)
 80067d0:	f241 0178 	movw	r1, #4216	; 0x1078
 80067d4:	4818      	ldr	r0, [pc, #96]	; (8006838 <lfs_init+0x390>)
 80067d6:	f005 ff69 	bl	800c6ac <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f04f 32ff 	mov.w	r2, #4294967295
 80067e0:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f04f 32ff 	mov.w	r2, #4294967295
 80067e8:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	333c      	adds	r3, #60	; 0x3c
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	605a      	str	r2, [r3, #4]
 8006800:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3330      	adds	r3, #48	; 0x30
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	605a      	str	r2, [r3, #4]
 800680c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3348      	adds	r3, #72	; 0x48
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	605a      	str	r2, [r3, #4]
 8006818:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800681a:	2300      	movs	r3, #0
 800681c:	e003      	b.n	8006826 <lfs_init+0x37e>

cleanup:
    lfs_deinit(lfs);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f80e 	bl	8006840 <lfs_deinit>
    return err;
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006826:	4618      	mov	r0, r3
 8006828:	3730      	adds	r7, #48	; 0x30
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	08011748 	.word	0x08011748
 8006834:	08011f00 	.word	0x08011f00
 8006838:	08011198 	.word	0x08011198
 800683c:	08011764 	.word	0x08011764

08006840 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	2b00      	cmp	r3, #0
 8006850:	d104      	bne.n	800685c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	4618      	mov	r0, r3
 8006858:	f7fa fb4d 	bl	8000ef6 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	4618      	mov	r0, r3
 800686c:	f7fa fb43 	bl	8000ef6 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800687e:	4618      	mov	r0, r3
 8006880:	f7fa fb39 	bl	8000ef6 <lfs_free>
    }

    return 0;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <lfs_rawformat>:



#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b0a0      	sub	sp, #128	; 0x80
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
    int err = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff fe01 	bl	80064a8 <lfs_init>
 80068a6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80068a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <lfs_rawformat+0x22>
            return err;
 80068ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068b0:	e08d      	b.n	80069ce <lfs_rawformat+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <lfs_rawformat+0x38>
 80068ba:	4b47      	ldr	r3, [pc, #284]	; (80069d8 <lfs_rawformat+0x148>)
 80068bc:	4a47      	ldr	r2, [pc, #284]	; (80069dc <lfs_rawformat+0x14c>)
 80068be:	f241 01a9 	movw	r1, #4265	; 0x10a9
 80068c2:	4847      	ldr	r0, [pc, #284]	; (80069e0 <lfs_rawformat+0x150>)
 80068c4:	f005 fef2 	bl	800c6ac <__assert_func>

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	461a      	mov	r2, r3
 80068d4:	2100      	movs	r1, #0
 80068d6:	f005 ff6f 	bl	800c7b8 <memset>
        lfs->free.off = 0;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	00da      	lsls	r2, r3, #3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f7fa fa5d 	bl	8000dae <lfs_min>
 80068f4:	4602      	mov	r2, r0
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->free.i = 0;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fb fa44 	bl	8001d8e <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8006906:	f107 030c 	add.w	r3, r7, #12
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fd f963 	bl	8003bd8 <lfs_dir_alloc>
 8006912:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d150      	bne.n	80069bc <lfs_rawformat+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7fb f9dc 	bl	8001cd8 <lfs_fs_disk_version>
 8006920:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8006922:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006928:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 800692a:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8006930:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8006936:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800693c:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 8006942:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8006944:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006948:	4618      	mov	r0, r3
 800694a:	f7fb f93f 	bl	8001bcc <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800694e:	4b25      	ldr	r3, [pc, #148]	; (80069e4 <lfs_rawformat+0x154>)
 8006950:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006952:	2300      	movs	r3, #0
 8006954:	653b      	str	r3, [r7, #80]	; 0x50
 8006956:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <lfs_rawformat+0x158>)
 8006958:	657b      	str	r3, [r7, #84]	; 0x54
 800695a:	4b24      	ldr	r3, [pc, #144]	; (80069ec <lfs_rawformat+0x15c>)
 800695c:	65bb      	str	r3, [r7, #88]	; 0x58
 800695e:	4b24      	ldr	r3, [pc, #144]	; (80069f0 <lfs_rawformat+0x160>)
 8006960:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006962:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006966:	663b      	str	r3, [r7, #96]	; 0x60
 8006968:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800696c:	f107 010c 	add.w	r1, r7, #12
 8006970:	2303      	movs	r3, #3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fe fb08 	bl	8004f88 <lfs_dir_commit>
 8006978:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800697a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11f      	bne.n	80069c0 <lfs_rawformat+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8006980:	2300      	movs	r3, #0
 8006982:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8006986:	f107 010c 	add.w	r1, r7, #12
 800698a:	2300      	movs	r3, #0
 800698c:	2200      	movs	r2, #0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe fafa 	bl	8004f88 <lfs_dir_commit>
 8006994:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d113      	bne.n	80069c4 <lfs_rawformat+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800699c:	2300      	movs	r3, #0
 800699e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a0:	2301      	movs	r3, #1
 80069a2:	633b      	str	r3, [r7, #48]	; 0x30
 80069a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80069a8:	f107 030c 	add.w	r3, r7, #12
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fc fce0 	bl	8003374 <lfs_dir_fetch>
 80069b4:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80069b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	e004      	b.n	80069c6 <lfs_rawformat+0x136>
            goto cleanup;
 80069bc:	bf00      	nop
 80069be:	e002      	b.n	80069c6 <lfs_rawformat+0x136>
            goto cleanup;
 80069c0:	bf00      	nop
 80069c2:	e000      	b.n	80069c6 <lfs_rawformat+0x136>
            goto cleanup;
 80069c4:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff ff3a 	bl	8006840 <lfs_deinit>
    return err;
 80069cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3780      	adds	r7, #128	; 0x80
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	08011794 	.word	0x08011794
 80069dc:	08011f0c 	.word	0x08011f0c
 80069e0:	08011198 	.word	0x08011198
 80069e4:	40100000 	.word	0x40100000
 80069e8:	0ff00008 	.word	0x0ff00008
 80069ec:	080117ac 	.word	0x080117ac
 80069f0:	20100018 	.word	0x20100018

080069f4 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 80069f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069f6:	b09f      	sub	sp, #124	; 0x7c
 80069f8:	af04      	add	r7, sp, #16
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fd51 	bl	80064a8 <lfs_init>
 8006a06:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 8006a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <lfs_rawmount+0x1e>
        return err;
 8006a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a10:	e1f1      	b.n	8006df6 <lfs_rawmount+0x402>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a16:	2220      	movs	r2, #32
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f005 fecc 	bl	800c7b8 <memset>
 8006a20:	2301      	movs	r3, #1
 8006a22:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006a24:	4aa6      	ldr	r2, [pc, #664]	; (8006cc0 <lfs_rawmount+0x2cc>)
 8006a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a2e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8006a3a:	e188      	b.n	8006d4e <lfs_rawmount+0x35a>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006a3c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006a40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a44:	3318      	adds	r3, #24
 8006a46:	4611      	mov	r1, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fa fe4a 	bl	80016e2 <lfs_pair_issync>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 8006a54:	4b9b      	ldr	r3, [pc, #620]	; (8006cc4 <lfs_rawmount+0x2d0>)
 8006a56:	f241 02f2 	movw	r2, #4338	; 0x10f2
 8006a5a:	499b      	ldr	r1, [pc, #620]	; (8006cc8 <lfs_rawmount+0x2d4>)
 8006a5c:	489b      	ldr	r0, [pc, #620]	; (8006ccc <lfs_rawmount+0x2d8>)
 8006a5e:	f006 ff23 	bl	800d8a8 <iprintf>
            err = LFS_ERR_CORRUPT;
 8006a62:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006a66:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8006a68:	e1c1      	b.n	8006dee <lfs_rawmount+0x3fa>
        }
        if (tortoise_i == tortoise_period) {
 8006a6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d108      	bne.n	8006a84 <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 8006a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 8006a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a78:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 8006a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 8006a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a86:	3301      	adds	r3, #1
 8006a88:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	4b90      	ldr	r3, [pc, #576]	; (8006cd0 <lfs_rawmount+0x2dc>)
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
 8006a92:	2308      	movs	r3, #8
 8006a94:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8006a96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a9a:	f103 0218 	add.w	r2, r3, #24
 8006a9e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006aa2:	f107 0320 	add.w	r3, r7, #32
 8006aa6:	9303      	str	r3, [sp, #12]
 8006aa8:	4b8a      	ldr	r3, [pc, #552]	; (8006cd4 <lfs_rawmount+0x2e0>)
 8006aaa:	9302      	str	r3, [sp, #8]
 8006aac:	2300      	movs	r3, #0
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	4b89      	ldr	r3, [pc, #548]	; (8006cd8 <lfs_rawmount+0x2e4>)
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4b89      	ldr	r3, [pc, #548]	; (8006cdc <lfs_rawmount+0x2e8>)
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fc f894 	bl	8002be4 <lfs_dir_fetchmatch>
 8006abc:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	da02      	bge.n	8006aca <lfs_rawmount+0xd6>
            err = tag;
 8006ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ac6:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8006ac8:	e191      	b.n	8006dee <lfs_rawmount+0x3fa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8006aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8131 	beq.w	8006d34 <lfs_rawmount+0x340>
 8006ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fa fe71 	bl	80017bc <lfs_tag_isdelete>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f083 0301 	eor.w	r3, r3, #1
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 8126 	beq.w	8006d34 <lfs_rawmount+0x340>
            // update root
            lfs->root[0] = dir.pair[0];
 8006ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006af4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006af8:	f107 0308 	add.w	r3, r7, #8
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	4b78      	ldr	r3, [pc, #480]	; (8006ce0 <lfs_rawmount+0x2ec>)
 8006b00:	4a76      	ldr	r2, [pc, #472]	; (8006cdc <lfs_rawmount+0x2e8>)
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fb fb0c 	bl	8002120 <lfs_dir_get>
 8006b08:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	da02      	bge.n	8006b16 <lfs_rawmount+0x122>
                err = tag;
 8006b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b12:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006b14:	e16b      	b.n	8006dee <lfs_rawmount+0x3fa>
            }
            lfs_superblock_fromle32(&superblock);
 8006b16:	f107 0308 	add.w	r3, r7, #8
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fb f81e 	bl	8001b5c <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fb f8de 	bl	8001cf0 <lfs_fs_disk_version_major>
 8006b34:	4603      	mov	r3, r0
 8006b36:	461a      	mov	r2, r3
 8006b38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d108      	bne.n	8006b52 <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fb f8e3 	bl	8001d0c <lfs_fs_disk_version_minor>
 8006b46:	4603      	mov	r3, r0
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d91d      	bls.n	8006b8e <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 8006b52:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 8006b56:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fb f8c8 	bl	8001cf0 <lfs_fs_disk_version_major>
 8006b60:	4603      	mov	r3, r0
 8006b62:	461e      	mov	r6, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7fb f8d1 	bl	8001d0c <lfs_fs_disk_version_minor>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4b55      	ldr	r3, [pc, #340]	; (8006cc4 <lfs_rawmount+0x2d0>)
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	9202      	str	r2, [sp, #8]
 8006b74:	9601      	str	r6, [sp, #4]
 8006b76:	9400      	str	r4, [sp, #0]
 8006b78:	462b      	mov	r3, r5
 8006b7a:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 8006b7e:	4952      	ldr	r1, [pc, #328]	; (8006cc8 <lfs_rawmount+0x2d4>)
 8006b80:	4858      	ldr	r0, [pc, #352]	; (8006ce4 <lfs_rawmount+0x2f0>)
 8006b82:	f006 fe91 	bl	800d8a8 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8006b86:	f06f 0315 	mvn.w	r3, #21
 8006b8a:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006b8c:	e0d1      	b.n	8006d32 <lfs_rawmount+0x33e>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fb f8bc 	bl	8001d0c <lfs_fs_disk_version_minor>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d21d      	bcs.n	8006bdc <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 8006ba0:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 8006ba4:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7fb f8a1 	bl	8001cf0 <lfs_fs_disk_version_major>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461e      	mov	r6, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fb f8aa 	bl	8001d0c <lfs_fs_disk_version_minor>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4b41      	ldr	r3, [pc, #260]	; (8006cc4 <lfs_rawmount+0x2d0>)
 8006bbe:	9303      	str	r3, [sp, #12]
 8006bc0:	9202      	str	r2, [sp, #8]
 8006bc2:	9601      	str	r6, [sp, #4]
 8006bc4:	9400      	str	r4, [sp, #0]
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	f241 122e 	movw	r2, #4398	; 0x112e
 8006bcc:	493e      	ldr	r1, [pc, #248]	; (8006cc8 <lfs_rawmount+0x2d4>)
 8006bce:	4846      	ldr	r0, [pc, #280]	; (8006ce8 <lfs_rawmount+0x2f4>)
 8006bd0:	f006 fe6a 	bl	800d8a8 <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fbac 	bl	8007334 <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d018      	beq.n	8006c14 <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d910      	bls.n	8006c0e <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	4934      	ldr	r1, [pc, #208]	; (8006cc4 <lfs_rawmount+0x2d0>)
 8006bf4:	9101      	str	r1, [sp, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	f241 123c 	movw	r2, #4412	; 0x113c
 8006bfe:	4932      	ldr	r1, [pc, #200]	; (8006cc8 <lfs_rawmount+0x2d4>)
 8006c00:	483a      	ldr	r0, [pc, #232]	; (8006cec <lfs_rawmount+0x2f8>)
 8006c02:	f006 fe51 	bl	800d8a8 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006c06:	f06f 0315 	mvn.w	r3, #21
 8006c0a:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006c0c:	e091      	b.n	8006d32 <lfs_rawmount+0x33e>
                }

                lfs->name_max = superblock.name_max;
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d018      	beq.n	8006c4c <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d910      	bls.n	8006c46 <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c2a:	4926      	ldr	r1, [pc, #152]	; (8006cc4 <lfs_rawmount+0x2d0>)
 8006c2c:	9101      	str	r1, [sp, #4]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	f241 1247 	movw	r2, #4423	; 0x1147
 8006c36:	4924      	ldr	r1, [pc, #144]	; (8006cc8 <lfs_rawmount+0x2d4>)
 8006c38:	482d      	ldr	r0, [pc, #180]	; (8006cf0 <lfs_rawmount+0x2fc>)
 8006c3a:	f006 fe35 	bl	800d8a8 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8006c3e:	f06f 0315 	mvn.w	r3, #21
 8006c42:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006c44:	e075      	b.n	8006d32 <lfs_rawmount+0x33e>
                }

                lfs->file_max = superblock.file_max;
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d018      	beq.n	8006c84 <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d910      	bls.n	8006c7e <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006c5c:	69fa      	ldr	r2, [r7, #28]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c62:	4918      	ldr	r1, [pc, #96]	; (8006cc4 <lfs_rawmount+0x2d0>)
 8006c64:	9101      	str	r1, [sp, #4]
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	f241 1252 	movw	r2, #4434	; 0x1152
 8006c6e:	4916      	ldr	r1, [pc, #88]	; (8006cc8 <lfs_rawmount+0x2d4>)
 8006c70:	4820      	ldr	r0, [pc, #128]	; (8006cf4 <lfs_rawmount+0x300>)
 8006c72:	f006 fe19 	bl	800d8a8 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006c76:	f06f 0315 	mvn.w	r3, #21
 8006c7a:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006c7c:	e059      	b.n	8006d32 <lfs_rawmount+0x33e>
                }

                lfs->attr_max = superblock.attr_max;
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	679a      	str	r2, [r3, #120]	; 0x78
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d036      	beq.n	8006cfc <lfs_rawmount+0x308>
                    && superblock.block_count != lfs->cfg->block_count) {
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d030      	beq.n	8006cfc <lfs_rawmount+0x308>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	4908      	ldr	r1, [pc, #32]	; (8006cc4 <lfs_rawmount+0x2d0>)
 8006ca4:	9101      	str	r1, [sp, #4]
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	f241 125e 	movw	r2, #4446	; 0x115e
 8006cae:	4906      	ldr	r1, [pc, #24]	; (8006cc8 <lfs_rawmount+0x2d4>)
 8006cb0:	4811      	ldr	r0, [pc, #68]	; (8006cf8 <lfs_rawmount+0x304>)
 8006cb2:	f006 fdf9 	bl	800d8a8 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006cb6:	f06f 0315 	mvn.w	r3, #21
 8006cba:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006cbc:	e039      	b.n	8006d32 <lfs_rawmount+0x33e>
 8006cbe:	bf00      	nop
 8006cc0:	080112e4 	.word	0x080112e4
 8006cc4:	080112a0 	.word	0x080112a0
 8006cc8:	08011198 	.word	0x08011198
 8006ccc:	080117b8 	.word	0x080117b8
 8006cd0:	080117ac 	.word	0x080117ac
 8006cd4:	08003505 	.word	0x08003505
 8006cd8:	0ff00008 	.word	0x0ff00008
 8006cdc:	7ffffc00 	.word	0x7ffffc00
 8006ce0:	20100018 	.word	0x20100018
 8006ce4:	080117e4 	.word	0x080117e4
 8006ce8:	0801181c 	.word	0x0801181c
 8006cec:	0801185c 	.word	0x0801185c
 8006cf0:	08011890 	.word	0x08011890
 8006cf4:	080118c4 	.word	0x080118c4
 8006cf8:	080118f8 	.word	0x080118f8
            }

            lfs->block_count = superblock.block_count;
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d012      	beq.n	8006d34 <lfs_rawmount+0x340>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	493a      	ldr	r1, [pc, #232]	; (8006e00 <lfs_rawmount+0x40c>)
 8006d18:	9101      	str	r1, [sp, #4]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	f241 1267 	movw	r2, #4455	; 0x1167
 8006d22:	4938      	ldr	r1, [pc, #224]	; (8006e04 <lfs_rawmount+0x410>)
 8006d24:	4838      	ldr	r0, [pc, #224]	; (8006e08 <lfs_rawmount+0x414>)
 8006d26:	f006 fdbf 	bl	800d8a8 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006d2a:	f06f 0315 	mvn.w	r3, #21
 8006d2e:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006d30:	bf00      	nop
            goto cleanup;
 8006d32:	e05c      	b.n	8006dee <lfs_rawmount+0x3fa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7fc fb33 	bl	80033ac <lfs_dir_getgstate>
 8006d46:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 8006d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d14e      	bne.n	8006dec <lfs_rawmount+0x3f8>
    while (!lfs_pair_isnull(dir.tail)) {
 8006d4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006d52:	3318      	adds	r3, #24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fa fc81 	bl	800165c <lfs_pair_isnull>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f083 0301 	eor.w	r3, r3, #1
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f47f ae6a 	bne.w	8006a3c <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3330      	adds	r3, #48	; 0x30
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fa fdd0 	bl	8001912 <lfs_gstate_iszero>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f083 0301 	eor.w	r3, r3, #1
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d010      	beq.n	8006da0 <lfs_rawmount+0x3ac>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d8a:	481d      	ldr	r0, [pc, #116]	; (8006e00 <lfs_rawmount+0x40c>)
 8006d8c:	9002      	str	r0, [sp, #8]
 8006d8e:	9201      	str	r2, [sp, #4]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	460b      	mov	r3, r1
 8006d94:	f241 1277 	movw	r2, #4471	; 0x1177
 8006d98:	491a      	ldr	r1, [pc, #104]	; (8006e04 <lfs_rawmount+0x410>)
 8006d9a:	481c      	ldr	r0, [pc, #112]	; (8006e0c <lfs_rawmount+0x418>)
 8006d9c:	f006 fd84 	bl	800d8a8 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fa fcfc 	bl	80017a2 <lfs_tag_isvalid>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f083 0301 	eor.w	r3, r3, #1
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	441a      	add	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	333c      	adds	r3, #60	; 0x3c
 8006dc4:	3230      	adds	r2, #48	; 0x30
 8006dc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->block_count;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006dd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dd8:	fb02 f201 	mul.w	r2, r2, r1
 8006ddc:	1a9a      	subs	r2, r3, r2
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fa ffe0 	bl	8001da8 <lfs_alloc_drop>

    return 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e004      	b.n	8006df6 <lfs_rawmount+0x402>
            goto cleanup;
 8006dec:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f80e 	bl	8006e10 <lfs_rawunmount>
    return err;
 8006df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	376c      	adds	r7, #108	; 0x6c
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	080112a0 	.word	0x080112a0
 8006e04:	08011198 	.word	0x08011198
 8006e08:	0801192c 	.word	0x0801192c
 8006e0c:	0801195c 	.word	0x0801195c

08006e10 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff fd11 	bl	8006840 <lfs_deinit>
 8006e1e:	4603      	mov	r3, r0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	b0a1      	sub	sp, #132	; 0x84
 8006e2c:	af04      	add	r7, sp, #16
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f005 fcba 	bl	800c7b8 <memset>
 8006e44:	2301      	movs	r3, #1
 8006e46:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006e48:	4a9b      	ldr	r2, [pc, #620]	; (80070b8 <lfs_fs_rawtraverse+0x290>)
 8006e4a:	f107 031c 	add.w	r3, r7, #28
 8006e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e52:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006e56:	2301      	movs	r3, #1
 8006e58:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8006e5e:	e0c1      	b.n	8006fe4 <lfs_fs_rawtraverse+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006e60:	f107 021c 	add.w	r2, r7, #28
 8006e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e68:	3318      	adds	r3, #24
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fa fc38 	bl	80016e2 <lfs_pair_issync>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 8006e78:	4b90      	ldr	r3, [pc, #576]	; (80070bc <lfs_fs_rawtraverse+0x294>)
 8006e7a:	f241 12d2 	movw	r2, #4562	; 0x11d2
 8006e7e:	4990      	ldr	r1, [pc, #576]	; (80070c0 <lfs_fs_rawtraverse+0x298>)
 8006e80:	4890      	ldr	r0, [pc, #576]	; (80070c4 <lfs_fs_rawtraverse+0x29c>)
 8006e82:	f006 fd11 	bl	800d8a8 <iprintf>
            return LFS_ERR_CORRUPT;
 8006e86:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006e8a:	e110      	b.n	80070ae <lfs_fs_rawtraverse+0x286>
        }
        if (tortoise_i == tortoise_period) {
 8006e8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d108      	bne.n	8006ea6 <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 8006e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e96:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8006e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9a:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 8006ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 8006ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8006eac:	2300      	movs	r3, #0
 8006eae:	667b      	str	r3, [r7, #100]	; 0x64
 8006eb0:	e014      	b.n	8006edc <lfs_fs_rawtraverse+0xb4>
            int err = cb(data, dir.tail[i]);
 8006eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb4:	3306      	adds	r3, #6
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	4798      	blx	r3
 8006eca:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8006ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <lfs_fs_rawtraverse+0xae>
                return err;
 8006ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed4:	e0eb      	b.n	80070ae <lfs_fs_rawtraverse+0x286>
        for (int i = 0; i < 2; i++) {
 8006ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ed8:	3301      	adds	r3, #1
 8006eda:	667b      	str	r3, [r7, #100]	; 0x64
 8006edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	dde7      	ble.n	8006eb2 <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8006ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee6:	f103 0218 	add.w	r2, r3, #24
 8006eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7fc fa3f 	bl	8003374 <lfs_dir_fetch>
 8006ef6:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8006ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <lfs_fs_rawtraverse+0xda>
            return err;
 8006efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f00:	e0d5      	b.n	80070ae <lfs_fs_rawtraverse+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006f02:	2300      	movs	r3, #0
 8006f04:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f08:	e067      	b.n	8006fda <lfs_fs_rawtraverse+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006f0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f0e:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f14:	f043 0308 	orr.w	r3, r3, #8
 8006f18:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006f1c:	f107 0214 	add.w	r2, r7, #20
 8006f20:	9200      	str	r2, [sp, #0]
 8006f22:	4a69      	ldr	r2, [pc, #420]	; (80070c8 <lfs_fs_rawtraverse+0x2a0>)
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7fb f8fb 	bl	8002120 <lfs_dir_get>
 8006f2a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8006f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	da05      	bge.n	8006f3e <lfs_fs_rawtraverse+0x116>
                if (tag == LFS_ERR_NOENT) {
 8006f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f34:	f113 0f02 	cmn.w	r3, #2
 8006f38:	d049      	beq.n	8006fce <lfs_fs_rawtraverse+0x1a6>
                    continue;
                }
                return tag;
 8006f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3c:	e0b7      	b.n	80070ae <lfs_fs_rawtraverse+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 8006f3e:	f107 0314 	add.w	r3, r7, #20
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fa fdda 	bl	8001afc <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fa fc66 	bl	800181c <lfs_tag_type3>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461a      	mov	r2, r3
 8006f54:	f240 2302 	movw	r3, #514	; 0x202
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d113      	bne.n	8006f84 <lfs_fs_rawtraverse+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8006f5c:	68f9      	ldr	r1, [r7, #12]
 8006f5e:	6978      	ldr	r0, [r7, #20]
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	460a      	mov	r2, r1
 8006f70:	2100      	movs	r1, #0
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7fe fae6 	bl	8005544 <lfs_ctz_traverse>
 8006f78:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8006f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d027      	beq.n	8006fd0 <lfs_fs_rawtraverse+0x1a8>
                    return err;
 8006f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f82:	e094      	b.n	80070ae <lfs_fs_rawtraverse+0x286>
                }
            } else if (includeorphans &&
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d022      	beq.n	8006fd0 <lfs_fs_rawtraverse+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8006f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fa fc45 	bl	800181c <lfs_tag_type3>
 8006f92:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f98:	d11a      	bne.n	8006fd0 <lfs_fs_rawtraverse+0x1a8>
                for (int i = 0; i < 2; i++) {
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f9e:	e012      	b.n	8006fc6 <lfs_fs_rawtraverse+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 8006fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	f107 0214 	add.w	r2, r7, #20
 8006fa8:	4413      	add	r3, r2
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
 8006fb4:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 8006fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <lfs_fs_rawtraverse+0x198>
                        return err;
 8006fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbe:	e076      	b.n	80070ae <lfs_fs_rawtraverse+0x286>
                for (int i = 0; i < 2; i++) {
 8006fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	dde9      	ble.n	8006fa0 <lfs_fs_rawtraverse+0x178>
 8006fcc:	e000      	b.n	8006fd0 <lfs_fs_rawtraverse+0x1a8>
                    continue;
 8006fce:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006fd0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006fda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006fdc:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d392      	bcc.n	8006f0a <lfs_fs_rawtraverse+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 8006fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe8:	3318      	adds	r3, #24
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fa fb36 	bl	800165c <lfs_pair_isnull>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f083 0301 	eor.w	r3, r3, #1
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f47f af31 	bne.w	8006e60 <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	65bb      	str	r3, [r7, #88]	; 0x58
 8007004:	e04f      	b.n	80070a6 <lfs_fs_rawtraverse+0x27e>
        if (f->type != LFS_TYPE_REG) {
 8007006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007008:	799b      	ldrb	r3, [r3, #6]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d147      	bne.n	800709e <lfs_fs_rawtraverse+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800700e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d01d      	beq.n	8007056 <lfs_fs_rawtraverse+0x22e>
 800701a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d117      	bne.n	8007056 <lfs_fs_rawtraverse+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8007026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007028:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007030:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	9202      	str	r2, [sp, #8]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	9201      	str	r2, [sp, #4]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	4623      	mov	r3, r4
 8007042:	4602      	mov	r2, r0
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7fe fa7d 	bl	8005544 <lfs_ctz_traverse>
 800704a:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800704c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <lfs_fs_rawtraverse+0x22e>
                return err;
 8007052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007054:	e02b      	b.n	80070ae <lfs_fs_rawtraverse+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8007056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01e      	beq.n	80070a0 <lfs_fs_rawtraverse+0x278>
 8007062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d118      	bne.n	80070a0 <lfs_fs_rawtraverse+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800706e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007070:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007078:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800707a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800707c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	9202      	str	r2, [sp, #8]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	9201      	str	r2, [sp, #4]
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	4623      	mov	r3, r4
 800708a:	4602      	mov	r2, r0
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7fe fa59 	bl	8005544 <lfs_ctz_traverse>
 8007092:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8007094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <lfs_fs_rawtraverse+0x278>
                return err;
 800709a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709c:	e007      	b.n	80070ae <lfs_fs_rawtraverse+0x286>
            continue;
 800709e:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80070a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80070a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1ac      	bne.n	8007006 <lfs_fs_rawtraverse+0x1de>
            }
        }
    }
#endif

    return 0;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3774      	adds	r7, #116	; 0x74
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}
 80070b6:	bf00      	nop
 80070b8:	080112e4 	.word	0x080112e4
 80070bc:	080112a0 	.word	0x080112a0
 80070c0:	08011198 	.word	0x08011198
 80070c4:	080117b8 	.word	0x080117b8
 80070c8:	700ffc00 	.word	0x700ffc00

080070cc <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	; 0x28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80070e4:	4a2d      	ldr	r2, [pc, #180]	; (800719c <lfs_fs_pred+0xd0>)
 80070e6:	f107 0314 	add.w	r3, r7, #20
 80070ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070ee:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80070f2:	2301      	movs	r3, #1
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 80070f6:	2301      	movs	r3, #1
 80070f8:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 80070fa:	e03e      	b.n	800717a <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3318      	adds	r3, #24
 8007100:	f107 0214 	add.w	r2, r7, #20
 8007104:	4611      	mov	r1, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f7fa faeb 	bl	80016e2 <lfs_pair_issync>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8007112:	4b23      	ldr	r3, [pc, #140]	; (80071a0 <lfs_fs_pred+0xd4>)
 8007114:	f241 2230 	movw	r2, #4656	; 0x1230
 8007118:	4922      	ldr	r1, [pc, #136]	; (80071a4 <lfs_fs_pred+0xd8>)
 800711a:	4823      	ldr	r0, [pc, #140]	; (80071a8 <lfs_fs_pred+0xdc>)
 800711c:	f006 fbc4 	bl	800d8a8 <iprintf>
            return LFS_ERR_CORRUPT;
 8007120:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007124:	e036      	b.n	8007194 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8007126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	429a      	cmp	r2, r3
 800712c:	d10a      	bne.n	8007144 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	3301      	adds	r3, #1
 8007148:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3318      	adds	r3, #24
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	4618      	mov	r0, r3
 8007152:	f7fa fa9d 	bl	8001690 <lfs_pair_cmp>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <lfs_fs_pred+0x94>
            return 0;
 800715c:	2300      	movs	r3, #0
 800715e:	e019      	b.n	8007194 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3318      	adds	r3, #24
 8007164:	461a      	mov	r2, r3
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7fc f903 	bl	8003374 <lfs_dir_fetch>
 800716e:	61f8      	str	r0, [r7, #28]
        if (err) {
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <lfs_fs_pred+0xae>
            return err;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	e00c      	b.n	8007194 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3318      	adds	r3, #24
 800717e:	4618      	mov	r0, r3
 8007180:	f7fa fa6c 	bl	800165c <lfs_pair_isnull>
 8007184:	4603      	mov	r3, r0
 8007186:	f083 0301 	eor.w	r3, r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1b5      	bne.n	80070fc <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8007190:	f06f 0301 	mvn.w	r3, #1
}
 8007194:	4618      	mov	r0, r3
 8007196:	3728      	adds	r7, #40	; 0x28
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	080112e4 	.word	0x080112e4
 80071a0:	080112a0 	.word	0x080112a0
 80071a4:	08011198 	.word	0x08011198
 80071a8:	080117b8 	.word	0x080117b8

080071ac <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80071ac:	b5b0      	push	{r4, r5, r7, lr}
 80071ae:	b08e      	sub	sp, #56	; 0x38
 80071b0:	af04      	add	r7, sp, #16
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80071cc:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 80071d2:	69dd      	ldr	r5, [r3, #28]
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	6852      	ldr	r2, [r2, #4]
 80071dc:	2108      	movs	r1, #8
 80071de:	9103      	str	r1, [sp, #12]
 80071e0:	f107 0110 	add.w	r1, r7, #16
 80071e4:	9102      	str	r1, [sp, #8]
 80071e6:	9201      	str	r2, [sp, #4]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	462b      	mov	r3, r5
 80071ec:	4622      	mov	r2, r4
 80071ee:	4601      	mov	r1, r0
 80071f0:	6a38      	ldr	r0, [r7, #32]
 80071f2:	f7f9 feaf 	bl	8000f54 <lfs_bd_read>
 80071f6:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <lfs_fs_parent_match+0x56>
        return err;
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	e012      	b.n	8007228 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8007202:	f107 0310 	add.w	r3, r7, #16
 8007206:	4618      	mov	r0, r3
 8007208:	f7fa fa97 	bl	800173a <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	1d1a      	adds	r2, r3, #4
 8007210:	f107 0310 	add.w	r3, r7, #16
 8007214:	4611      	mov	r1, r2
 8007216:	4618      	mov	r0, r3
 8007218:	f7fa fa3a 	bl	8001690 <lfs_pair_cmp>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	bf14      	ite	ne
 8007222:	2301      	movne	r3, #1
 8007224:	2300      	moveq	r3, #0
 8007226:	b2db      	uxtb	r3, r3
}
 8007228:	4618      	mov	r0, r3
 800722a:	3728      	adds	r7, #40	; 0x28
 800722c:	46bd      	mov	sp, r7
 800722e:	bdb0      	pop	{r4, r5, r7, pc}

08007230 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b090      	sub	sp, #64	; 0x40
 8007234:	af04      	add	r7, sp, #16
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8007248:	4a33      	ldr	r2, [pc, #204]	; (8007318 <lfs_fs_parent+0xe8>)
 800724a:	f107 031c 	add.w	r3, r7, #28
 800724e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007252:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8007256:	2301      	movs	r3, #1
 8007258:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 800725a:	2301      	movs	r3, #1
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 800725e:	e049      	b.n	80072f4 <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3318      	adds	r3, #24
 8007264:	f107 021c 	add.w	r2, r7, #28
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7fa fa39 	bl	80016e2 <lfs_pair_issync>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d009      	beq.n	800728a <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8007276:	4b29      	ldr	r3, [pc, #164]	; (800731c <lfs_fs_parent+0xec>)
 8007278:	f241 2271 	movw	r2, #4721	; 0x1271
 800727c:	4928      	ldr	r1, [pc, #160]	; (8007320 <lfs_fs_parent+0xf0>)
 800727e:	4829      	ldr	r0, [pc, #164]	; (8007324 <lfs_fs_parent+0xf4>)
 8007280:	f006 fb12 	bl	800d8a8 <iprintf>
            return LFS_ERR_CORRUPT;
 8007284:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007288:	e041      	b.n	800730e <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 800728a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	429a      	cmp	r2, r3
 8007290:	d10a      	bne.n	80072a8 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	3301      	adds	r3, #1
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80072c4:	f107 0310 	add.w	r3, r7, #16
 80072c8:	9303      	str	r3, [sp, #12]
 80072ca:	4b17      	ldr	r3, [pc, #92]	; (8007328 <lfs_fs_parent+0xf8>)
 80072cc:	9302      	str	r3, [sp, #8]
 80072ce:	2300      	movs	r3, #0
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <lfs_fs_parent+0xfc>)
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	4b16      	ldr	r3, [pc, #88]	; (8007330 <lfs_fs_parent+0x100>)
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f7fb fc82 	bl	8002be4 <lfs_dir_fetchmatch>
 80072e0:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <lfs_fs_parent+0xc4>
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	f113 0f02 	cmn.w	r3, #2
 80072ee:	d001      	beq.n	80072f4 <lfs_fs_parent+0xc4>
            return tag;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	e00c      	b.n	800730e <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3318      	adds	r3, #24
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fa f9af 	bl	800165c <lfs_pair_isnull>
 80072fe:	4603      	mov	r3, r0
 8007300:	f083 0301 	eor.w	r3, r3, #1
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1aa      	bne.n	8007260 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 800730a:	f06f 0301 	mvn.w	r3, #1
}
 800730e:	4618      	mov	r0, r3
 8007310:	3730      	adds	r7, #48	; 0x30
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	080112e4 	.word	0x080112e4
 800731c:	080112a0 	.word	0x080112a0
 8007320:	08011198 	.word	0x08011198
 8007324:	080117b8 	.word	0x080117b8
 8007328:	080071ad 	.word	0x080071ad
 800732c:	20000008 	.word	0x20000008
 8007330:	7ff003ff 	.word	0x7ff003ff

08007334 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	025b      	lsls	r3, r3, #9
 800734c:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800735c:	b590      	push	{r4, r7, lr}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	4618      	mov	r0, r3
 800736e:	f7fa fa8c 	bl	800188a <lfs_tag_size>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <lfs_fs_preporphans+0x32>
 8007378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800737c:	2b00      	cmp	r3, #0
 800737e:	da06      	bge.n	800738e <lfs_fs_preporphans+0x32>
 8007380:	4b1a      	ldr	r3, [pc, #104]	; (80073ec <lfs_fs_preporphans+0x90>)
 8007382:	4a1b      	ldr	r2, [pc, #108]	; (80073f0 <lfs_fs_preporphans+0x94>)
 8007384:	f241 2192 	movw	r1, #4754	; 0x1292
 8007388:	481a      	ldr	r0, [pc, #104]	; (80073f4 <lfs_fs_preporphans+0x98>)
 800738a:	f005 f98f 	bl	800c6ac <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	4618      	mov	r0, r3
 8007394:	f7fa fa79 	bl	800188a <lfs_tag_size>
 8007398:	4603      	mov	r3, r0
 800739a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800739e:	d90a      	bls.n	80073b6 <lfs_fs_preporphans+0x5a>
 80073a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	dd06      	ble.n	80073b6 <lfs_fs_preporphans+0x5a>
 80073a8:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <lfs_fs_preporphans+0x9c>)
 80073aa:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <lfs_fs_preporphans+0x94>)
 80073ac:	f241 2193 	movw	r1, #4755	; 0x1293
 80073b0:	4810      	ldr	r0, [pc, #64]	; (80073f4 <lfs_fs_preporphans+0x98>)
 80073b2:	f005 f97b 	bl	800c6ac <__assert_func>
    lfs->gstate.tag += orphans;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073be:	441a      	add	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3330      	adds	r3, #48	; 0x30
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fa faba 	bl	800194a <lfs_gstate_hasorphans>
 80073d6:	4603      	mov	r3, r0
 80073d8:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80073da:	ea44 0203 	orr.w	r2, r4, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd90      	pop	{r4, r7, pc}
 80073ec:	08011994 	.word	0x08011994
 80073f0:	08011f1c 	.word	0x08011f1c
 80073f4:	08011198 	.word	0x08011198
 80073f8:	080119cc 	.word	0x080119cc

080073fc <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	460b      	mov	r3, r1
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	4a17      	ldr	r2, [pc, #92]	; (800746c <lfs_fs_prepmove+0x70>)
 8007410:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8007412:	897b      	ldrh	r3, [r7, #10]
 8007414:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007418:	428b      	cmp	r3, r1
 800741a:	d006      	beq.n	800742a <lfs_fs_prepmove+0x2e>
 800741c:	897b      	ldrh	r3, [r7, #10]
 800741e:	029b      	lsls	r3, r3, #10
 8007420:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007424:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007428:	e000      	b.n	800742c <lfs_fs_prepmove+0x30>
 800742a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8007432:	897b      	ldrh	r3, [r7, #10]
 8007434:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007438:	4293      	cmp	r3, r2
 800743a:	d002      	beq.n	8007442 <lfs_fs_prepmove+0x46>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	e000      	b.n	8007444 <lfs_fs_prepmove+0x48>
 8007442:	2300      	movs	r3, #0
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8007448:	897b      	ldrh	r3, [r7, #10]
 800744a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800744e:	4293      	cmp	r3, r2
 8007450:	d003      	beq.n	800745a <lfs_fs_prepmove+0x5e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3304      	adds	r3, #4
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	e000      	b.n	800745c <lfs_fs_prepmove+0x60>
 800745a:	2300      	movs	r3, #0
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	800003ff 	.word	0x800003ff

08007470 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b098      	sub	sp, #96	; 0x60
 8007474:	af02      	add	r7, sp, #8
 8007476:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3330      	adds	r3, #48	; 0x30
 800747c:	4618      	mov	r0, r3
 800747e:	f7fa fa99 	bl	80019b4 <lfs_gstate_needssuperblock>
 8007482:	4603      	mov	r3, r0
 8007484:	f083 0301 	eor.w	r3, r3, #1
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <lfs_fs_desuperblock+0x22>
        return 0;
 800748e:	2300      	movs	r3, #0
 8007490:	e04e      	b.n	8007530 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1a      	ldr	r2, [r3, #32]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	4927      	ldr	r1, [pc, #156]	; (8007538 <lfs_fs_desuperblock+0xc8>)
 800749c:	9101      	str	r1, [sp, #4]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	4613      	mov	r3, r2
 80074a2:	f241 22ac 	movw	r2, #4780	; 0x12ac
 80074a6:	4925      	ldr	r1, [pc, #148]	; (800753c <lfs_fs_desuperblock+0xcc>)
 80074a8:	4825      	ldr	r0, [pc, #148]	; (8007540 <lfs_fs_desuperblock+0xd0>)
 80074aa:	f006 f9fd 	bl	800d8a8 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f103 0220 	add.w	r2, r3, #32
 80074b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fb ff5a 	bl	8003374 <lfs_dir_fetch>
 80074c0:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 80074c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <lfs_fs_desuperblock+0x5c>
        return err;
 80074c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ca:	e031      	b.n	8007530 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fa fc03 	bl	8001cd8 <lfs_fs_disk_version>
 80074d2:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 80074d4:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074da:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 80074dc:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 80074ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 80074f4:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 80074f6:	f107 031c 	add.w	r3, r7, #28
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fa fb66 	bl	8001bcc <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <lfs_fs_desuperblock+0xd4>)
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	f107 031c 	add.w	r3, r7, #28
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	f107 0214 	add.w	r2, r7, #20
 800750e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8007512:	2301      	movs	r3, #1
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7fd fd37 	bl	8004f88 <lfs_dir_commit>
 800751a:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 800751c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <lfs_fs_desuperblock+0xb6>
        return err;
 8007522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007524:	e004      	b.n	8007530 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8007526:	2100      	movs	r1, #0
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff ff03 	bl	8007334 <lfs_fs_prepsuperblock>
    return 0;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3758      	adds	r7, #88	; 0x58
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	080112a0 	.word	0x080112a0
 800753c:	08011198 	.word	0x08011198
 8007540:	08011a04 	.word	0x08011a04
 8007544:	20100018 	.word	0x20100018

08007548 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8007548:	b5b0      	push	{r4, r5, r7, lr}
 800754a:	b094      	sub	sp, #80	; 0x50
 800754c:	af04      	add	r7, sp, #16
 800754e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	333c      	adds	r3, #60	; 0x3c
 8007554:	4618      	mov	r0, r3
 8007556:	f7fa fa1a 	bl	800198e <lfs_gstate_hasmove>
 800755a:	4603      	mov	r3, r0
 800755c:	f083 0301 	eor.w	r3, r3, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <lfs_fs_demove+0x22>
        return 0;
 8007566:	2300      	movs	r3, #0
 8007568:	e05b      	b.n	8007622 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007576:	4618      	mov	r0, r3
 8007578:	f7fa f978 	bl	800186c <lfs_tag_id>
 800757c:	4603      	mov	r3, r0
 800757e:	461a      	mov	r2, r3
 8007580:	4b2a      	ldr	r3, [pc, #168]	; (800762c <lfs_fs_demove+0xe4>)
 8007582:	9302      	str	r3, [sp, #8]
 8007584:	9201      	str	r2, [sp, #4]
 8007586:	9400      	str	r4, [sp, #0]
 8007588:	462b      	mov	r3, r5
 800758a:	f241 22d4 	movw	r2, #4820	; 0x12d4
 800758e:	4928      	ldr	r1, [pc, #160]	; (8007630 <lfs_fs_demove+0xe8>)
 8007590:	4828      	ldr	r0, [pc, #160]	; (8007634 <lfs_fs_demove+0xec>)
 8007592:	f006 f989 	bl	800d8a8 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	4618      	mov	r0, r3
 800759c:	f7fa f93e 	bl	800181c <lfs_tag_type3>
 80075a0:	4603      	mov	r3, r0
 80075a2:	461a      	mov	r2, r3
 80075a4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d006      	beq.n	80075ba <lfs_fs_demove+0x72>
 80075ac:	4b22      	ldr	r3, [pc, #136]	; (8007638 <lfs_fs_demove+0xf0>)
 80075ae:	4a23      	ldr	r2, [pc, #140]	; (800763c <lfs_fs_demove+0xf4>)
 80075b0:	f241 21db 	movw	r1, #4827	; 0x12db
 80075b4:	481e      	ldr	r0, [pc, #120]	; (8007630 <lfs_fs_demove+0xe8>)
 80075b6:	f005 f879 	bl	800c6ac <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80075c0:	f107 0318 	add.w	r3, r7, #24
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fb fed4 	bl	8003374 <lfs_dir_fetch>
 80075cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 80075ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <lfs_fs_demove+0x90>
        return err;
 80075d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d6:	e024      	b.n	8007622 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fa f945 	bl	800186c <lfs_tag_id>
 80075e2:	4603      	mov	r3, r0
 80075e4:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80075e6:	2200      	movs	r2, #0
 80075e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff ff05 	bl	80073fc <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80075f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80075f4:	029b      	lsls	r3, r3, #10
 80075f6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80075fa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	2300      	movs	r3, #0
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	f107 0210 	add.w	r2, r7, #16
 8007608:	f107 0118 	add.w	r1, r7, #24
 800760c:	2301      	movs	r3, #1
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fd fcba 	bl	8004f88 <lfs_dir_commit>
 8007614:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8007616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <lfs_fs_demove+0xd8>
        return err;
 800761c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761e:	e000      	b.n	8007622 <lfs_fs_demove+0xda>
    }

    return 0;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3740      	adds	r7, #64	; 0x40
 8007626:	46bd      	mov	sp, r7
 8007628:	bdb0      	pop	{r4, r5, r7, pc}
 800762a:	bf00      	nop
 800762c:	080112a0 	.word	0x080112a0
 8007630:	08011198 	.word	0x08011198
 8007634:	08011a38 	.word	0x08011a38
 8007638:	08011a6c 	.word	0x08011a6c
 800763c:	08011f30 	.word	0x08011f30

08007640 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8007640:	b5b0      	push	{r4, r5, r7, lr}
 8007642:	b0b2      	sub	sp, #200	; 0xc8
 8007644:	af04      	add	r7, sp, #16
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3330      	adds	r3, #48	; 0x30
 8007650:	4618      	mov	r0, r3
 8007652:	f7fa f97a 	bl	800194a <lfs_gstate_hasorphans>
 8007656:	4603      	mov	r3, r0
 8007658:	f083 0301 	eor.w	r3, r3, #1
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <lfs_fs_deorphan+0x26>
        return 0;
 8007662:	2300      	movs	r3, #0
 8007664:	e187      	b.n	8007976 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 800766c:	e170      	b.n	8007950 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800766e:	f107 0308 	add.w	r3, r7, #8
 8007672:	2220      	movs	r2, #32
 8007674:	2100      	movs	r1, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f005 f89e 	bl	800c7b8 <memset>
 800767c:	2301      	movs	r3, #1
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	2301      	movs	r3, #1
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8007684:	2300      	movs	r3, #0
 8007686:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800768a:	e149      	b.n	8007920 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800768c:	f107 0308 	add.w	r3, r7, #8
 8007690:	f103 0218 	add.w	r2, r3, #24
 8007694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fb fe6a 	bl	8003374 <lfs_dir_fetch>
 80076a0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 80076a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <lfs_fs_deorphan+0x72>
                return err;
 80076ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076b0:	e161      	b.n	8007976 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80076b2:	7ffb      	ldrb	r3, [r7, #31]
 80076b4:	f083 0301 	eor.w	r3, r3, #1
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8126 	beq.w	800790c <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80076c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80076c4:	f107 0308 	add.w	r3, r7, #8
 80076c8:	3318      	adds	r3, #24
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff fdaf 	bl	8007230 <lfs_fs_parent>
 80076d2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80076d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da07      	bge.n	80076ee <lfs_fs_deorphan+0xae>
 80076de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076e2:	f113 0f02 	cmn.w	r3, #2
 80076e6:	d002      	beq.n	80076ee <lfs_fs_deorphan+0xae>
                    return tag;
 80076e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076ec:	e143      	b.n	8007976 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 80076ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f040 80ac 	bne.w	8007850 <lfs_fs_deorphan+0x210>
 80076f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076fc:	f113 0f02 	cmn.w	r3, #2
 8007700:	f000 80a6 	beq.w	8007850 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8007704:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007708:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800770c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	4613      	mov	r3, r2
 8007714:	4a9a      	ldr	r2, [pc, #616]	; (8007980 <lfs_fs_deorphan+0x340>)
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fa fd02 	bl	8002120 <lfs_dir_get>
 800771c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8007720:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007724:	2b00      	cmp	r3, #0
 8007726:	da02      	bge.n	800772e <lfs_fs_deorphan+0xee>
                        return state;
 8007728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800772c:	e0eb      	b.n	8007906 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 800772e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007732:	4618      	mov	r0, r3
 8007734:	f7fa f801 	bl	800173a <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8007738:	f107 0308 	add.w	r3, r7, #8
 800773c:	f103 0218 	add.w	r2, r3, #24
 8007740:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f7f9 ffcb 	bl	80016e2 <lfs_pair_issync>
 800774c:	4603      	mov	r3, r0
 800774e:	f083 0301 	eor.w	r3, r3, #1
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d07b      	beq.n	8007850 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8007758:	6a38      	ldr	r0, [r7, #32]
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007760:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8007764:	4c87      	ldr	r4, [pc, #540]	; (8007984 <lfs_fs_deorphan+0x344>)
 8007766:	9403      	str	r4, [sp, #12]
 8007768:	9102      	str	r1, [sp, #8]
 800776a:	9201      	str	r2, [sp, #4]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4603      	mov	r3, r0
 8007770:	f241 3221 	movw	r2, #4897	; 0x1321
 8007774:	4984      	ldr	r1, [pc, #528]	; (8007988 <lfs_fs_deorphan+0x348>)
 8007776:	4885      	ldr	r0, [pc, #532]	; (800798c <lfs_fs_deorphan+0x34c>)
 8007778:	f006 f896 	bl	800d8a8 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800777c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007780:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3330      	adds	r3, #48	; 0x30
 8007788:	f107 0208 	add.w	r2, r7, #8
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f7fa f924 	bl	80019dc <lfs_gstate_hasmovehere>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d01c      	beq.n	80077d4 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fa f864 	bl	800186c <lfs_tag_id>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 80077aa:	68b9      	ldr	r1, [r7, #8]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80077b2:	4874      	ldr	r0, [pc, #464]	; (8007984 <lfs_fs_deorphan+0x344>)
 80077b4:	9002      	str	r0, [sp, #8]
 80077b6:	9201      	str	r2, [sp, #4]
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	460b      	mov	r3, r1
 80077bc:	f241 322c 	movw	r2, #4908	; 0x132c
 80077c0:	4971      	ldr	r1, [pc, #452]	; (8007988 <lfs_fs_deorphan+0x348>)
 80077c2:	4873      	ldr	r0, [pc, #460]	; (8007990 <lfs_fs_deorphan+0x350>)
 80077c4:	f006 f870 	bl	800d8a8 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80077c8:	2200      	movs	r2, #0
 80077ca:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff fe14 	bl	80073fc <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 80077d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80077d8:	4618      	mov	r0, r3
 80077da:	f7f9 ffc8 	bl	800176e <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80077de:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80077e2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d007      	beq.n	80077fa <lfs_fs_deorphan+0x1ba>
 80077ea:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80077ee:	029b      	lsls	r3, r3, #10
 80077f0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80077f4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80077f8:	e000      	b.n	80077fc <lfs_fs_deorphan+0x1bc>
 80077fa:	2300      	movs	r3, #0
 80077fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007800:	2300      	movs	r3, #0
 8007802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007806:	4b63      	ldr	r3, [pc, #396]	; (8007994 <lfs_fs_deorphan+0x354>)
 8007808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800780c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007810:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007814:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007818:	f107 0108 	add.w	r1, r7, #8
 800781c:	2302      	movs	r3, #2
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fd f8b8 	bl	8004994 <lfs_dir_orphaningcommit>
 8007824:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8007828:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800782c:	4618      	mov	r0, r3
 800782e:	f7f9 ff84 	bl	800173a <lfs_pair_fromle32>
                        if (state < 0) {
 8007832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007836:	2b00      	cmp	r3, #0
 8007838:	da02      	bge.n	8007840 <lfs_fs_deorphan+0x200>
                            return state;
 800783a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 800783e:	e062      	b.n	8007906 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8007840:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007844:	2b03      	cmp	r3, #3
 8007846:	d16b      	bne.n	8007920 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800784e:	e067      	b.n	8007920 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8007850:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007854:	2b01      	cmp	r3, #1
 8007856:	d159      	bne.n	800790c <lfs_fs_deorphan+0x2cc>
 8007858:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800785c:	f113 0f02 	cmn.w	r3, #2
 8007860:	d154      	bne.n	800790c <lfs_fs_deorphan+0x2cc>
 8007862:	78fb      	ldrb	r3, [r7, #3]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d051      	beq.n	800790c <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8007868:	6a3a      	ldr	r2, [r7, #32]
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	4945      	ldr	r1, [pc, #276]	; (8007984 <lfs_fs_deorphan+0x344>)
 800786e:	9101      	str	r1, [sp, #4]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	4613      	mov	r3, r2
 8007874:	f241 324c 	movw	r2, #4940	; 0x134c
 8007878:	4943      	ldr	r1, [pc, #268]	; (8007988 <lfs_fs_deorphan+0x348>)
 800787a:	4847      	ldr	r0, [pc, #284]	; (8007998 <lfs_fs_deorphan+0x358>)
 800787c:	f006 f814 	bl	800d8a8 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fb fd8d 	bl	80033ac <lfs_dir_getgstate>
 8007892:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 8007896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <lfs_fs_deorphan+0x264>
                        return err;
 800789e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078a2:	e030      	b.n	8007906 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 80078a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078a8:	3318      	adds	r3, #24
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7f9 ff5f 	bl	800176e <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80078b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078b4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80078b8:	051a      	lsls	r2, r3, #20
 80078ba:	4b38      	ldr	r3, [pc, #224]	; (800799c <lfs_fs_deorphan+0x35c>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	673b      	str	r3, [r7, #112]	; 0x70
 80078c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078c4:	3318      	adds	r3, #24
 80078c6:	677b      	str	r3, [r7, #116]	; 0x74
 80078c8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80078cc:	f107 0108 	add.w	r1, r7, #8
 80078d0:	2301      	movs	r3, #1
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7fd f85e 	bl	8004994 <lfs_dir_orphaningcommit>
 80078d8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 80078dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078e0:	3318      	adds	r3, #24
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7f9 ff29 	bl	800173a <lfs_pair_fromle32>
                    if (state < 0) {
 80078e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	da02      	bge.n	80078f6 <lfs_fs_deorphan+0x2b6>
                        return state;
 80078f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 80078f4:	e03f      	b.n	8007976 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80078f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d104      	bne.n	8007908 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 80078fe:	2301      	movs	r3, #1
 8007900:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8007904:	e00c      	b.n	8007920 <lfs_fs_deorphan+0x2e0>
                return err;
 8007906:	e036      	b.n	8007976 <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 8007908:	bf00      	nop
 800790a:	e009      	b.n	8007920 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 800790c:	f107 0408 	add.w	r4, r7, #8
 8007910:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8007914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007918:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800791c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8007920:	f107 0308 	add.w	r3, r7, #8
 8007924:	3318      	adds	r3, #24
 8007926:	4618      	mov	r0, r3
 8007928:	f7f9 fe98 	bl	800165c <lfs_pair_isnull>
 800792c:	4603      	mov	r3, r0
 800792e:	f083 0301 	eor.w	r3, r3, #1
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	f47f aea9 	bne.w	800768c <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 800793a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <lfs_fs_deorphan+0x306>
 8007942:	2300      	movs	r3, #0
 8007944:	e002      	b.n	800794c <lfs_fs_deorphan+0x30c>
 8007946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800794a:	3301      	adds	r3, #1
 800794c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8007950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007954:	2b01      	cmp	r3, #1
 8007956:	f77f ae8a 	ble.w	800766e <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3330      	adds	r3, #48	; 0x30
 800795e:	4618      	mov	r0, r3
 8007960:	f7fa f806 	bl	8001970 <lfs_gstate_getorphans>
 8007964:	4603      	mov	r3, r0
 8007966:	425b      	negs	r3, r3
 8007968:	b2db      	uxtb	r3, r3
 800796a:	b25b      	sxtb	r3, r3
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff fcf4 	bl	800735c <lfs_fs_preporphans>
 8007974:	4603      	mov	r3, r0
}
 8007976:	4618      	mov	r0, r3
 8007978:	37b8      	adds	r7, #184	; 0xb8
 800797a:	46bd      	mov	sp, r7
 800797c:	bdb0      	pop	{r4, r5, r7, pc}
 800797e:	bf00      	nop
 8007980:	7ffffc00 	.word	0x7ffffc00
 8007984:	080112a0 	.word	0x080112a0
 8007988:	08011198 	.word	0x08011198
 800798c:	08011aa0 	.word	0x08011aa0
 8007990:	08011ae4 	.word	0x08011ae4
 8007994:	600ffc08 	.word	0x600ffc08
 8007998:	08011b2c 	.word	0x08011b2c
 800799c:	000ffc08 	.word	0x000ffc08

080079a0 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff fd61 	bl	8007470 <lfs_fs_desuperblock>
 80079ae:	60f8      	str	r0, [r7, #12]
    if (err) {
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <lfs_fs_forceconsistency+0x1a>
        return err;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	e013      	b.n	80079e2 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fdc4 	bl	8007548 <lfs_fs_demove>
 80079c0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <lfs_fs_forceconsistency+0x2c>
        return err;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	e00a      	b.n	80079e2 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 80079cc:	2101      	movs	r1, #1
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fe36 	bl	8007640 <lfs_fs_deorphan>
 80079d4:	60f8      	str	r0, [r7, #12]
    if (err) {
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <lfs_fs_forceconsistency+0x40>
        return err;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	e000      	b.n	80079e2 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80079ea:	b480      	push	{r7}
 80079ec:	b085      	sub	sp, #20
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	601a      	str	r2, [r3, #0]
    return 0;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr
	...

08007a10 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8007a1c:	f107 0208 	add.w	r2, r7, #8
 8007a20:	2300      	movs	r3, #0
 8007a22:	4907      	ldr	r1, [pc, #28]	; (8007a40 <lfs_fs_rawsize+0x30>)
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff f9ff 	bl	8006e28 <lfs_fs_rawtraverse>
 8007a2a:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <lfs_fs_rawsize+0x26>
        return err;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	e000      	b.n	8007a38 <lfs_fs_rawsize+0x28>
    }

    return size;
 8007a36:	68bb      	ldr	r3, [r7, #8]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	080079eb 	.word	0x080079eb

08007a44 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <lfs_format+0x18>
        return err;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	e005      	b.n	8007a68 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fe ff16 	bl	8006890 <lfs_rawformat>
 8007a64:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007a66:	68fb      	ldr	r3, [r7, #12]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <lfs_mount+0x18>
        return err;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	e005      	b.n	8007a94 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fe ffb2 	bl	80069f4 <lfs_rawmount>
 8007a90:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007a92:	68fb      	ldr	r3, [r7, #12]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <lfs_unmount+0x16>
        return err;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	e004      	b.n	8007abc <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_rawunmount(lfs);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff f9ac 	bl	8006e10 <lfs_rawunmount>
 8007ab8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	617b      	str	r3, [r7, #20]
    if (err) {
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <lfs_file_open+0x1c>
        return err;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	e01a      	b.n	8007b16 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	68b9      	ldr	r1, [r7, #8]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fa f8a8 	bl	8001c3c <lfs_mlist_isopen>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f083 0301 	eor.w	r3, r3, #1
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <lfs_file_open+0x42>
 8007af8:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <lfs_file_open+0x5c>)
 8007afa:	4a0a      	ldr	r2, [pc, #40]	; (8007b24 <lfs_file_open+0x60>)
 8007afc:	f241 712a 	movw	r1, #5930	; 0x172a
 8007b00:	4809      	ldr	r0, [pc, #36]	; (8007b28 <lfs_file_open+0x64>)
 8007b02:	f004 fdd3 	bl	800c6ac <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	68b9      	ldr	r1, [r7, #8]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7fd ff67 	bl	80059e0 <lfs_file_rawopen>
 8007b12:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007b14:	697b      	ldr	r3, [r7, #20]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	08011b7c 	.word	0x08011b7c
 8007b24:	08011f40 	.word	0x08011f40
 8007b28:	08011198 	.word	0x08011198

08007b2c <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <lfs_file_close+0x18>
        return err;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	e015      	b.n	8007b70 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fa f876 	bl	8001c3c <lfs_mlist_isopen>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <lfs_file_close+0x38>
 8007b56:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <lfs_file_close+0x4c>)
 8007b58:	4a08      	ldr	r2, [pc, #32]	; (8007b7c <lfs_file_close+0x50>)
 8007b5a:	f241 714e 	movw	r1, #5966	; 0x174e
 8007b5e:	4808      	ldr	r0, [pc, #32]	; (8007b80 <lfs_file_close+0x54>)
 8007b60:	f004 fda4 	bl	800c6ac <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fd ff52 	bl	8005a10 <lfs_file_rawclose>
 8007b6c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	08011bb4 	.word	0x08011bb4
 8007b7c:	08011f50 	.word	0x08011f50
 8007b80:	08011198 	.word	0x08011198

08007b84 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007b92:	2300      	movs	r3, #0
 8007b94:	617b      	str	r3, [r7, #20]
    if (err) {
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <lfs_file_read+0x1c>
        return err;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	e017      	b.n	8007bd0 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	68b9      	ldr	r1, [r7, #8]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fa f848 	bl	8001c3c <lfs_mlist_isopen>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <lfs_file_read+0x3c>
 8007bb2:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <lfs_file_read+0x54>)
 8007bb4:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <lfs_file_read+0x58>)
 8007bb6:	f241 7170 	movw	r1, #6000	; 0x1770
 8007bba:	4809      	ldr	r0, [pc, #36]	; (8007be0 <lfs_file_read+0x5c>)
 8007bbc:	f004 fd76 	bl	800c6ac <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	68b9      	ldr	r1, [r7, #8]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7fe fa6e 	bl	80060a8 <lfs_file_rawread>
 8007bcc:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007bce:	693b      	ldr	r3, [r7, #16]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	08011bb4 	.word	0x08011bb4
 8007bdc:	08011f60 	.word	0x08011f60
 8007be0:	08011198 	.word	0x08011198

08007be4 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]
    if (err) {
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <lfs_file_write+0x1c>
        return err;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	e017      	b.n	8007c30 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fa f818 	bl	8001c3c <lfs_mlist_isopen>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <lfs_file_write+0x3c>
 8007c12:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <lfs_file_write+0x54>)
 8007c14:	4a09      	ldr	r2, [pc, #36]	; (8007c3c <lfs_file_write+0x58>)
 8007c16:	f241 7182 	movw	r1, #6018	; 0x1782
 8007c1a:	4809      	ldr	r0, [pc, #36]	; (8007c40 <lfs_file_write+0x5c>)
 8007c1c:	f004 fd46 	bl	800c6ac <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7fe fb9e 	bl	8006368 <lfs_file_rawwrite>
 8007c2c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007c2e:	693b      	ldr	r3, [r7, #16]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	08011bb4 	.word	0x08011bb4
 8007c3c:	08011f70 	.word	0x08011f70
 8007c40:	08011198 	.word	0x08011198

08007c44 <lfs_file_size>:
    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <lfs_file_size+0x18>
        return err;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	e015      	b.n	8007c88 <lfs_file_size+0x44>
    }
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7f9 ffea 	bl	8001c3c <lfs_mlist_isopen>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d106      	bne.n	8007c7c <lfs_file_size+0x38>
 8007c6e:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <lfs_file_size+0x4c>)
 8007c70:	4a08      	ldr	r2, [pc, #32]	; (8007c94 <lfs_file_size+0x50>)
 8007c72:	f241 71d2 	movw	r1, #6098	; 0x17d2
 8007c76:	4808      	ldr	r0, [pc, #32]	; (8007c98 <lfs_file_size+0x54>)
 8007c78:	f004 fd18 	bl	800c6ac <__assert_func>

    lfs_soff_t res = lfs_file_rawsize(lfs, file);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fe fbf6 	bl	8006470 <lfs_file_rawsize>
 8007c84:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_size -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007c86:	68bb      	ldr	r3, [r7, #8]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	08011bb4 	.word	0x08011bb4
 8007c94:	08011f80 	.word	0x08011f80
 8007c98:	08011198 	.word	0x08011198

08007c9c <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
    if (err) {
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <lfs_dir_open+0x1a>
        return err;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	e019      	b.n	8007cea <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7f9 ffbd 	bl	8001c3c <lfs_mlist_isopen>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f083 0301 	eor.w	r3, r3, #1
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d106      	bne.n	8007cdc <lfs_dir_open+0x40>
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <lfs_dir_open+0x58>)
 8007cd0:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <lfs_dir_open+0x5c>)
 8007cd2:	f241 71f1 	movw	r1, #6129	; 0x17f1
 8007cd6:	4809      	ldr	r0, [pc, #36]	; (8007cfc <lfs_dir_open+0x60>)
 8007cd8:	f004 fce8 	bl	800c6ac <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7fd f977 	bl	8004fd4 <lfs_dir_rawopen>
 8007ce6:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007ce8:	697b      	ldr	r3, [r7, #20]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	08011bec 	.word	0x08011bec
 8007cf8:	08011f90 	.word	0x08011f90
 8007cfc:	08011198 	.word	0x08011198

08007d00 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <lfs_dir_close+0x18>
        return err;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	e005      	b.n	8007d24 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fd f9d4 	bl	80050c8 <lfs_dir_rawclose>
 8007d20:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007d22:	68fb      	ldr	r3, [r7, #12]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]
    if (err) {
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <lfs_dir_read+0x1a>
        return err;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	e006      	b.n	8007d54 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7fd f9ca 	bl	80050e4 <lfs_dir_rawread>
 8007d50:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007d52:	697b      	ldr	r3, [r7, #20]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	e024      	b.n	8007dbc <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	091a      	lsrs	r2, r3, #4
 8007d76:	6939      	ldr	r1, [r7, #16]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	440b      	add	r3, r1
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	404b      	eors	r3, r1
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	4911      	ldr	r1, [pc, #68]	; (8007dd0 <lfs_crc+0x74>)
 8007d8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d8e:	4053      	eors	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	091a      	lsrs	r2, r3, #4
 8007d96:	6939      	ldr	r1, [r7, #16]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	440b      	add	r3, r1
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	091b      	lsrs	r3, r3, #4
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	4619      	mov	r1, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	404b      	eors	r3, r1
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	4908      	ldr	r1, [pc, #32]	; (8007dd0 <lfs_crc+0x74>)
 8007dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007db2:	4053      	eors	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	3301      	adds	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d3d6      	bcc.n	8007d72 <lfs_crc+0x16>
    }

    return crc;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr
 8007dd0:	08011fa0 	.word	0x08011fa0

08007dd4 <read_file_from_littlefs>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to read data from a file in LittleFS
void read_file_from_littlefs(lfs_t *lfs, const char *filename) {
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b09e      	sub	sp, #120	; 0x78
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
    lfs_file_t file;
    HAL_UART_Transmit(&huart2, filename,sizeof(filename),1000);
 8007dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007de2:	2204      	movs	r2, #4
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	483d      	ldr	r0, [pc, #244]	; (8007edc <read_file_from_littlefs+0x108>)
 8007de8:	f003 fe8c 	bl	800bb04 <HAL_UART_Transmit>
    // Open the file for reading
    int err = lfs_file_open(lfs, &file, filename, LFS_O_RDONLY);
 8007dec:	f107 010c 	add.w	r1, r7, #12
 8007df0:	2301      	movs	r3, #1
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff fe65 	bl	8007ac4 <lfs_file_open>
 8007dfa:	6738      	str	r0, [r7, #112]	; 0x70
    if (err < 0) {
 8007dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	da04      	bge.n	8007e0c <read_file_from_littlefs+0x38>
        printf("Failed to open file: %s\n", filename);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	4836      	ldr	r0, [pc, #216]	; (8007ee0 <read_file_from_littlefs+0x10c>)
 8007e06:	f005 fd4f 	bl	800d8a8 <iprintf>
        return;
 8007e0a:	e064      	b.n	8007ed6 <read_file_from_littlefs+0x102>
    }

    // Get the file size
    lfs_soff_t file_size = lfs_file_size(lfs, &file);
 8007e0c:	f107 030c 	add.w	r3, r7, #12
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff ff16 	bl	8007c44 <lfs_file_size>
 8007e18:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (file_size < 0) {
 8007e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	da0a      	bge.n	8007e36 <read_file_from_littlefs+0x62>
        printf("Failed to get file size for: %s\n", filename);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	4830      	ldr	r0, [pc, #192]	; (8007ee4 <read_file_from_littlefs+0x110>)
 8007e24:	f005 fd40 	bl	800d8a8 <iprintf>
        lfs_file_close(lfs, &file);
 8007e28:	f107 030c 	add.w	r3, r7, #12
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fe7c 	bl	8007b2c <lfs_file_close>
        return;
 8007e34:	e04f      	b.n	8007ed6 <read_file_from_littlefs+0x102>
    }

    // Allocate a buffer to hold the file data
    float *buffer = malloc(file_size);
 8007e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f004 fc91 	bl	800c760 <malloc>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	66bb      	str	r3, [r7, #104]	; 0x68
    if (buffer == NULL) {
 8007e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <read_file_from_littlefs+0x8a>
        printf("Failed to allocate buffer for reading file: %s\n", filename);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	4827      	ldr	r0, [pc, #156]	; (8007ee8 <read_file_from_littlefs+0x114>)
 8007e4c:	f005 fd2c 	bl	800d8a8 <iprintf>
        lfs_file_close(lfs, &file);
 8007e50:	f107 030c 	add.w	r3, r7, #12
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff fe68 	bl	8007b2c <lfs_file_close>
        return;
 8007e5c:	e03b      	b.n	8007ed6 <read_file_from_littlefs+0x102>
    }

    // Read the file content into the buffer
    lfs_ssize_t bytes_read = lfs_file_read(lfs, &file, buffer, file_size);
 8007e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e60:	f107 010c 	add.w	r1, r7, #12
 8007e64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff fe8c 	bl	8007b84 <lfs_file_read>
 8007e6c:	6678      	str	r0, [r7, #100]	; 0x64
    if (bytes_read < 0) {
 8007e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	da04      	bge.n	8007e7e <read_file_from_littlefs+0xaa>
        printf("Failed to read file: %s\n", filename);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	481d      	ldr	r0, [pc, #116]	; (8007eec <read_file_from_littlefs+0x118>)
 8007e78:	f005 fd16 	bl	800d8a8 <iprintf>
 8007e7c:	e022      	b.n	8007ec4 <read_file_from_littlefs+0xf0>
    } else {
    	char x;
        // Successfully read the file, print its content (if it's text data)
        HAL_UART_Transmit(&huart2, buffer, (int)bytes_read,1000);
 8007e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e88:	4814      	ldr	r0, [pc, #80]	; (8007edc <read_file_from_littlefs+0x108>)
 8007e8a:	f003 fe3b 	bl	800bb04 <HAL_UART_Transmit>
        for(int i=0;i<(int) bytes_read;){
 8007e8e:	2300      	movs	r3, #0
 8007e90:	677b      	str	r3, [r7, #116]	; 0x74
 8007e92:	e00d      	b.n	8007eb0 <read_file_from_littlefs+0xdc>
//        	printf(buffer[i]);
         	x=buffer[i];
 8007e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e9a:	4413      	add	r3, r2
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7f8 fe6c 	bl	8000b7c <__aeabi_f2uiz>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        	i++;
 8007eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eac:	3301      	adds	r3, #1
 8007eae:	677b      	str	r3, [r7, #116]	; 0x74
        for(int i=0;i<(int) bytes_read;){
 8007eb0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	dbed      	blt.n	8007e94 <read_file_from_littlefs+0xc0>
        }


        printf("File Content (%s):\n%.*s\n", filename, (int)bytes_read, buffer);
 8007eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007eba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	480c      	ldr	r0, [pc, #48]	; (8007ef0 <read_file_from_littlefs+0x11c>)
 8007ec0:	f005 fcf2 	bl	800d8a8 <iprintf>
    }

    // Clean up
    free(buffer);
 8007ec4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007ec6:	f004 fc53 	bl	800c770 <free>
    lfs_file_close(lfs, &file);
 8007eca:	f107 030c 	add.w	r3, r7, #12
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7ff fe2b 	bl	8007b2c <lfs_file_close>
}
 8007ed6:	3778      	adds	r7, #120	; 0x78
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20000680 	.word	0x20000680
 8007ee0:	08011c24 	.word	0x08011c24
 8007ee4:	08011c40 	.word	0x08011c40
 8007ee8:	08011c64 	.word	0x08011c64
 8007eec:	08011c94 	.word	0x08011c94
 8007ef0:	08011cb0 	.word	0x08011cb0

08007ef4 <nor_delay_us>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	DmaEnd = 1;
}

void nor_delay_us(uint32_t us){
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
//	__HAL_TIM_SET_COUNTER(&htim2, 0);
//	HAL_TIM_Base_Start(&htim2);
//	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
//	HAL_TIM_Base_Stop(&htim2);
//	HAL_Delay(1000);
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
	...

08007f08 <nor_cs_assert>:

void nor_cs_assert(){
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f12:	4802      	ldr	r0, [pc, #8]	; (8007f1c <nor_cs_assert+0x14>)
 8007f14:	f002 f952 	bl	800a1bc <HAL_GPIO_WritePin>
}
 8007f18:	bf00      	nop
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	40010c00 	.word	0x40010c00

08007f20 <nor_cs_deassert>:

void nor_cs_deassert(){
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8007f24:	2201      	movs	r2, #1
 8007f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f2a:	4802      	ldr	r0, [pc, #8]	; (8007f34 <nor_cs_deassert+0x14>)
 8007f2c:	f002 f946 	bl	800a1bc <HAL_GPIO_WritePin>
}
 8007f30:	bf00      	nop
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	40010c00 	.word	0x40010c00

08007f38 <nor_spi_tx>:

void nor_spi_tx(uint8_t *pData, uint32_t Size){
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Transmit(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 8007f42:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <nor_spi_tx+0x28>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, pData, Size, 1000);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	4804      	ldr	r0, [pc, #16]	; (8007f64 <nor_spi_tx+0x2c>)
 8007f54:	f003 f883 	bl	800b05e <HAL_SPI_Transmit>
//	while (DmaEnd == 0);
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	2000029c 	.word	0x2000029c
 8007f64:	200002f4 	.word	0x200002f4

08007f68 <nor_spi_rx>:

void nor_spi_rx(uint8_t *pData, uint32_t Size){
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Receive(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 8007f72:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <nor_spi_rx+0x28>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi2, pData, Size, 1000);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4804      	ldr	r0, [pc, #16]	; (8007f94 <nor_spi_rx+0x2c>)
 8007f84:	f003 f9ae 	bl	800b2e4 <HAL_SPI_Receive>
//	DmaEnd =0;
//	while (DmaEnd == 0);
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	2000029c 	.word	0x2000029c
 8007f94:	200002f4 	.word	0x200002f4

08007f98 <__init_nor>:

void __init_nor(){
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
	Nor.config.CsAssert = nor_cs_assert;
 8007f9c:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <__init_nor+0x38>)
 8007f9e:	4a0d      	ldr	r2, [pc, #52]	; (8007fd4 <__init_nor+0x3c>)
 8007fa0:	609a      	str	r2, [r3, #8]
	Nor.config.CsDeassert = nor_cs_deassert;
 8007fa2:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <__init_nor+0x38>)
 8007fa4:	4a0c      	ldr	r2, [pc, #48]	; (8007fd8 <__init_nor+0x40>)
 8007fa6:	60da      	str	r2, [r3, #12]
	Nor.config.DelayUs = nor_delay_us;
 8007fa8:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <__init_nor+0x38>)
 8007faa:	4a0c      	ldr	r2, [pc, #48]	; (8007fdc <__init_nor+0x44>)
 8007fac:	611a      	str	r2, [r3, #16]
	Nor.config.SpiRxFxn = nor_spi_rx;
 8007fae:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <__init_nor+0x38>)
 8007fb0:	4a0b      	ldr	r2, [pc, #44]	; (8007fe0 <__init_nor+0x48>)
 8007fb2:	605a      	str	r2, [r3, #4]
	Nor.config.SpiTxFxn = nor_spi_tx;
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <__init_nor+0x38>)
 8007fb6:	4a0b      	ldr	r2, [pc, #44]	; (8007fe4 <__init_nor+0x4c>)
 8007fb8:	601a      	str	r2, [r3, #0]

	if (NOR_Init(&Nor) != NOR_OK){ //NOR_Init
 8007fba:	4805      	ldr	r0, [pc, #20]	; (8007fd0 <__init_nor+0x38>)
 8007fbc:	f000 fdf5 	bl	8008baa <NOR_Init>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <__init_nor+0x32>
		Error_Handler();
 8007fc6:	f000 fcc3 	bl	8008950 <Error_Handler>
	}
}
 8007fca:	bf00      	nop
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	200005d8 	.word	0x200005d8
 8007fd4:	08007f09 	.word	0x08007f09
 8007fd8:	08007f21 	.word	0x08007f21
 8007fdc:	08007ef5 	.word	0x08007ef5
 8007fe0:	08007f69 	.word	0x08007f69
 8007fe4:	08007f39 	.word	0x08007f39

08007fe8 <_fs_read>:

/** Start LittleFs **/

int _fs_read(const struct lfs_config *c, lfs_block_t block,
            lfs_off_t off, void *buffer, lfs_size_t size){
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]

	if (NOR_ReadSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	4806      	ldr	r0, [pc, #24]	; (800801c <_fs_read+0x34>)
 8008002:	f001 f825 	bl	8009050 <NOR_ReadSector>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <_fs_read+0x28>
		return 0;
 800800c:	2300      	movs	r3, #0
 800800e:	e001      	b.n	8008014 <_fs_read+0x2c>
	}

	return LFS_ERR_IO;
 8008010:	f06f 0304 	mvn.w	r3, #4
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	200005d8 	.word	0x200005d8

08008020 <_fs_write>:

int _fs_write(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, const void *buffer, lfs_size_t size){
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af02      	add	r7, sp, #8
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]

	if (NOR_WriteSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	4806      	ldr	r0, [pc, #24]	; (8008054 <_fs_write+0x34>)
 800803a:	f000 ff63 	bl	8008f04 <NOR_WriteSector>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <_fs_write+0x28>
		return 0;
 8008044:	2300      	movs	r3, #0
 8008046:	e001      	b.n	800804c <_fs_write+0x2c>
	}

	return LFS_ERR_IO;
 8008048:	f06f 0304 	mvn.w	r3, #4
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	200005d8 	.word	0x200005d8

08008058 <_fs_erase>:

int _fs_erase(const struct lfs_config *c, lfs_block_t block){
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
	if (NOR_EraseSector(&Nor, block) == NOR_OK){
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	4806      	ldr	r0, [pc, #24]	; (8008080 <_fs_erase+0x28>)
 8008066:	f000 feb9 	bl	8008ddc <NOR_EraseSector>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <_fs_erase+0x1c>
		return 0;
 8008070:	2300      	movs	r3, #0
 8008072:	e001      	b.n	8008078 <_fs_erase+0x20>
	}

	return LFS_ERR_IO;
 8008074:	f06f 0304 	mvn.w	r3, #4
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	200005d8 	.word	0x200005d8

08008084 <_fs_sync>:

int _fs_sync(const struct lfs_config *c){
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
	return 0;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr

08008098 <list_files>:

// Function to list all files and directories in the filesystem
void list_files(lfs_t *lfs) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b0ec      	sub	sp, #432	; 0x1b0
 800809c:	af00      	add	r7, sp, #0
 800809e:	1d3b      	adds	r3, r7, #4
 80080a0:	6018      	str	r0, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;

    // Open the root directory
    int err = lfs_dir_open(lfs, &dir, "/");
 80080a2:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80080a6:	1d3b      	adds	r3, r7, #4
 80080a8:	4a35      	ldr	r2, [pc, #212]	; (8008180 <list_files+0xe8>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	f7ff fdf6 	bl	8007c9c <lfs_dir_open>
 80080b0:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    if (err) {
 80080b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <list_files+0x2c>
        printf("Failed to open directory\n");
 80080bc:	4831      	ldr	r0, [pc, #196]	; (8008184 <list_files+0xec>)
 80080be:	f005 fc79 	bl	800d9b4 <puts>
 80080c2:	e059      	b.n	8008178 <list_files+0xe0>
        return;
    }

    // Loop through all files in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 80080c4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80080c8:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80080cc:	1d3b      	adds	r3, r7, #4
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	f7ff fe2c 	bl	8007d2c <lfs_dir_read>
 80080d4:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
        if (err < 0) {
 80080d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da03      	bge.n	80080e8 <list_files+0x50>
            printf("Failed to read directory\n");
 80080e0:	4829      	ldr	r0, [pc, #164]	; (8008188 <list_files+0xf0>)
 80080e2:	f005 fc67 	bl	800d9b4 <puts>
            break;
 80080e6:	e040      	b.n	800816a <list_files+0xd2>
        }

        // If no more files, break
        if (err == 0) {
 80080e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d03b      	beq.n	8008168 <list_files+0xd0>
            break;
        }
        uint8_t dir[100];
        // Print the type and name of the file
        if (info.type == LFS_TYPE_REG) {
 80080f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d118      	bne.n	800812c <list_files+0x94>
            sprintf(dir,"File: %s\n\0", info.name);
 80080fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80080fe:	f103 0208 	add.w	r2, r3, #8
 8008102:	f107 030c 	add.w	r3, r7, #12
 8008106:	4921      	ldr	r1, [pc, #132]	; (800818c <list_files+0xf4>)
 8008108:	4618      	mov	r0, r3
 800810a:	f005 fca3 	bl	800da54 <siprintf>
            HAL_UART_Transmit(&huart2, dir, strlen(dir),1000);
 800810e:	f107 030c 	add.w	r3, r7, #12
 8008112:	4618      	mov	r0, r3
 8008114:	f7f8 f826 	bl	8000164 <strlen>
 8008118:	4603      	mov	r3, r0
 800811a:	b29a      	uxth	r2, r3
 800811c:	f107 010c 	add.w	r1, r7, #12
 8008120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008124:	481a      	ldr	r0, [pc, #104]	; (8008190 <list_files+0xf8>)
 8008126:	f003 fced 	bl	800bb04 <HAL_UART_Transmit>
 800812a:	e7cb      	b.n	80080c4 <list_files+0x2c>
        } else if (info.type == LFS_TYPE_DIR) {
 800812c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d1c6      	bne.n	80080c4 <list_files+0x2c>
        	sprintf(dir,"Directory: %s\n\0", info.name);
 8008136:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800813a:	f103 0208 	add.w	r2, r3, #8
 800813e:	f107 030c 	add.w	r3, r7, #12
 8008142:	4914      	ldr	r1, [pc, #80]	; (8008194 <list_files+0xfc>)
 8008144:	4618      	mov	r0, r3
 8008146:	f005 fc85 	bl	800da54 <siprintf>

            HAL_UART_Transmit(&huart2, dir, strlen(dir),1000);
 800814a:	f107 030c 	add.w	r3, r7, #12
 800814e:	4618      	mov	r0, r3
 8008150:	f7f8 f808 	bl	8000164 <strlen>
 8008154:	4603      	mov	r3, r0
 8008156:	b29a      	uxth	r2, r3
 8008158:	f107 010c 	add.w	r1, r7, #12
 800815c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008160:	480b      	ldr	r0, [pc, #44]	; (8008190 <list_files+0xf8>)
 8008162:	f003 fccf 	bl	800bb04 <HAL_UART_Transmit>
    while (true) {
 8008166:	e7ad      	b.n	80080c4 <list_files+0x2c>
            break;
 8008168:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 800816a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	4611      	mov	r1, r2
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	f7ff fdc4 	bl	8007d00 <lfs_dir_close>
}
 8008178:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	08011ccc 	.word	0x08011ccc
 8008184:	08011cd0 	.word	0x08011cd0
 8008188:	08011cec 	.word	0x08011cec
 800818c:	08011d08 	.word	0x08011d08
 8008190:	20000680 	.word	0x20000680
 8008194:	08011d14 	.word	0x08011d14

08008198 <__init_littefs>:

void __init_littefs(){
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
	// because of static qualifier, this variable
	// will have a dedicated address
		int Error;

		LfsConfig.read_size = 256;
 800819e:	4b44      	ldr	r3, [pc, #272]	; (80082b0 <__init_littefs+0x118>)
 80081a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081a4:	615a      	str	r2, [r3, #20]
		LfsConfig.prog_size = 256;
 80081a6:	4b42      	ldr	r3, [pc, #264]	; (80082b0 <__init_littefs+0x118>)
 80081a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081ac:	619a      	str	r2, [r3, #24]
		LfsConfig.block_size = Nor.info.u16SectorSize;
 80081ae:	4b41      	ldr	r3, [pc, #260]	; (80082b4 <__init_littefs+0x11c>)
 80081b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80081b2:	461a      	mov	r2, r3
 80081b4:	4b3e      	ldr	r3, [pc, #248]	; (80082b0 <__init_littefs+0x118>)
 80081b6:	61da      	str	r2, [r3, #28]
		LfsConfig.block_count =  16384;//Nor.info.u32SectorCount;
 80081b8:	4b3d      	ldr	r3, [pc, #244]	; (80082b0 <__init_littefs+0x118>)
 80081ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081be:	621a      	str	r2, [r3, #32]
		LfsConfig.cache_size = Nor.info.u16PageSize;
 80081c0:	4b3c      	ldr	r3, [pc, #240]	; (80082b4 <__init_littefs+0x11c>)
 80081c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c4:	461a      	mov	r2, r3
 80081c6:	4b3a      	ldr	r3, [pc, #232]	; (80082b0 <__init_littefs+0x118>)
 80081c8:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig.lookahead_size = 256;//Nor.info.u32SectorCount/8;
 80081ca:	4b39      	ldr	r3, [pc, #228]	; (80082b0 <__init_littefs+0x118>)
 80081cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081d0:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig.block_cycles = 100;
 80081d2:	4b37      	ldr	r3, [pc, #220]	; (80082b0 <__init_littefs+0x118>)
 80081d4:	2264      	movs	r2, #100	; 0x64
 80081d6:	625a      	str	r2, [r3, #36]	; 0x24

		LfsConfig.read = _fs_read;
 80081d8:	4b35      	ldr	r3, [pc, #212]	; (80082b0 <__init_littefs+0x118>)
 80081da:	4a37      	ldr	r2, [pc, #220]	; (80082b8 <__init_littefs+0x120>)
 80081dc:	605a      	str	r2, [r3, #4]
		LfsConfig.prog = _fs_write;
 80081de:	4b34      	ldr	r3, [pc, #208]	; (80082b0 <__init_littefs+0x118>)
 80081e0:	4a36      	ldr	r2, [pc, #216]	; (80082bc <__init_littefs+0x124>)
 80081e2:	609a      	str	r2, [r3, #8]
		LfsConfig.erase = _fs_erase;
 80081e4:	4b32      	ldr	r3, [pc, #200]	; (80082b0 <__init_littefs+0x118>)
 80081e6:	4a36      	ldr	r2, [pc, #216]	; (80082c0 <__init_littefs+0x128>)
 80081e8:	60da      	str	r2, [r3, #12]
		LfsConfig.sync = _fs_sync;
 80081ea:	4b31      	ldr	r3, [pc, #196]	; (80082b0 <__init_littefs+0x118>)
 80081ec:	4a35      	ldr	r2, [pc, #212]	; (80082c4 <__init_littefs+0x12c>)
 80081ee:	611a      	str	r2, [r3, #16]

		Error = lfs_mount(&Lfs, &LfsConfig);
 80081f0:	492f      	ldr	r1, [pc, #188]	; (80082b0 <__init_littefs+0x118>)
 80081f2:	4835      	ldr	r0, [pc, #212]	; (80082c8 <__init_littefs+0x130>)
 80081f4:	f7ff fc3c 	bl	8007a70 <lfs_mount>
 80081f8:	6078      	str	r0, [r7, #4]
		if (Error != LFS_ERR_OK){
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00d      	beq.n	800821c <__init_littefs+0x84>
			lfs_format(&Lfs, &LfsConfig);
 8008200:	492b      	ldr	r1, [pc, #172]	; (80082b0 <__init_littefs+0x118>)
 8008202:	4831      	ldr	r0, [pc, #196]	; (80082c8 <__init_littefs+0x130>)
 8008204:	f7ff fc1e 	bl	8007a44 <lfs_format>
			Error = lfs_mount(&Lfs, &LfsConfig);
 8008208:	4929      	ldr	r1, [pc, #164]	; (80082b0 <__init_littefs+0x118>)
 800820a:	482f      	ldr	r0, [pc, #188]	; (80082c8 <__init_littefs+0x130>)
 800820c:	f7ff fc30 	bl	8007a70 <lfs_mount>
 8008210:	6078      	str	r0, [r7, #4]
			if (Error != LFS_ERR_OK){
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <__init_littefs+0x84>
				Error_Handler();
 8008218:	f000 fb9a 	bl	8008950 <Error_Handler>
			}
		}


		LfsConfig2.read_size = 256;
 800821c:	4b2b      	ldr	r3, [pc, #172]	; (80082cc <__init_littefs+0x134>)
 800821e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008222:	615a      	str	r2, [r3, #20]
		LfsConfig2.prog_size = 256;
 8008224:	4b29      	ldr	r3, [pc, #164]	; (80082cc <__init_littefs+0x134>)
 8008226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800822a:	619a      	str	r2, [r3, #24]
		LfsConfig2.block_size = Nor.info.u16SectorSize;
 800822c:	4b21      	ldr	r3, [pc, #132]	; (80082b4 <__init_littefs+0x11c>)
 800822e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008230:	461a      	mov	r2, r3
 8008232:	4b26      	ldr	r3, [pc, #152]	; (80082cc <__init_littefs+0x134>)
 8008234:	61da      	str	r2, [r3, #28]
		LfsConfig2.block_count =  16384;//Nor.info.u32SectorCount;
 8008236:	4b25      	ldr	r3, [pc, #148]	; (80082cc <__init_littefs+0x134>)
 8008238:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800823c:	621a      	str	r2, [r3, #32]
		LfsConfig2.cache_size = Nor.info.u16PageSize;//1024
 800823e:	4b1d      	ldr	r3, [pc, #116]	; (80082b4 <__init_littefs+0x11c>)
 8008240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008242:	461a      	mov	r2, r3
 8008244:	4b21      	ldr	r3, [pc, #132]	; (80082cc <__init_littefs+0x134>)
 8008246:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig2.lookahead_size = 256;//Nor.info.u32SectorCount/8;
 8008248:	4b20      	ldr	r3, [pc, #128]	; (80082cc <__init_littefs+0x134>)
 800824a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800824e:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig2.block_cycles = 100;
 8008250:	4b1e      	ldr	r3, [pc, #120]	; (80082cc <__init_littefs+0x134>)
 8008252:	2264      	movs	r2, #100	; 0x64
 8008254:	625a      	str	r2, [r3, #36]	; 0x24

		LfsConfig2.read = _fs_read;
 8008256:	4b1d      	ldr	r3, [pc, #116]	; (80082cc <__init_littefs+0x134>)
 8008258:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <__init_littefs+0x120>)
 800825a:	605a      	str	r2, [r3, #4]
		LfsConfig2.prog = _fs_write;
 800825c:	4b1b      	ldr	r3, [pc, #108]	; (80082cc <__init_littefs+0x134>)
 800825e:	4a17      	ldr	r2, [pc, #92]	; (80082bc <__init_littefs+0x124>)
 8008260:	609a      	str	r2, [r3, #8]
		LfsConfig2.erase = _fs_erase;
 8008262:	4b1a      	ldr	r3, [pc, #104]	; (80082cc <__init_littefs+0x134>)
 8008264:	4a16      	ldr	r2, [pc, #88]	; (80082c0 <__init_littefs+0x128>)
 8008266:	60da      	str	r2, [r3, #12]
		LfsConfig2.sync = _fs_sync;
 8008268:	4b18      	ldr	r3, [pc, #96]	; (80082cc <__init_littefs+0x134>)
 800826a:	4a16      	ldr	r2, [pc, #88]	; (80082c4 <__init_littefs+0x12c>)
 800826c:	611a      	str	r2, [r3, #16]

		LfsConfig2.context = (void*) (16384 * Nor.info.u16SectorSize);
 800826e:	4b11      	ldr	r3, [pc, #68]	; (80082b4 <__init_littefs+0x11c>)
 8008270:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008272:	039b      	lsls	r3, r3, #14
 8008274:	461a      	mov	r2, r3
 8008276:	4b15      	ldr	r3, [pc, #84]	; (80082cc <__init_littefs+0x134>)
 8008278:	601a      	str	r2, [r3, #0]
		Error = lfs_mount(&Lfs2, &LfsConfig2);
 800827a:	4914      	ldr	r1, [pc, #80]	; (80082cc <__init_littefs+0x134>)
 800827c:	4814      	ldr	r0, [pc, #80]	; (80082d0 <__init_littefs+0x138>)
 800827e:	f7ff fbf7 	bl	8007a70 <lfs_mount>
 8008282:	6078      	str	r0, [r7, #4]
				if (Error != LFS_ERR_OK){
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00d      	beq.n	80082a6 <__init_littefs+0x10e>
					lfs_format(&Lfs2, &LfsConfig2);
 800828a:	4910      	ldr	r1, [pc, #64]	; (80082cc <__init_littefs+0x134>)
 800828c:	4810      	ldr	r0, [pc, #64]	; (80082d0 <__init_littefs+0x138>)
 800828e:	f7ff fbd9 	bl	8007a44 <lfs_format>
					Error = lfs_mount(&Lfs2, &LfsConfig2);
 8008292:	490e      	ldr	r1, [pc, #56]	; (80082cc <__init_littefs+0x134>)
 8008294:	480e      	ldr	r0, [pc, #56]	; (80082d0 <__init_littefs+0x138>)
 8008296:	f7ff fbeb 	bl	8007a70 <lfs_mount>
 800829a:	6078      	str	r0, [r7, #4]
					if (Error != LFS_ERR_OK){
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <__init_littefs+0x10e>
						Error_Handler();
 80082a2:	f000 fb55 	bl	8008950 <Error_Handler>
					}
				}

}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000204 	.word	0x20000204
 80082b4:	200005d8 	.word	0x200005d8
 80082b8:	08007fe9 	.word	0x08007fe9
 80082bc:	08008021 	.word	0x08008021
 80082c0:	08008059 	.word	0x08008059
 80082c4:	08008085 	.word	0x08008085
 80082c8:	200006c8 	.word	0x200006c8
 80082cc:	20000250 	.word	0x20000250
 80082d0:	20000544 	.word	0x20000544

080082d4 <list_files_with_size>:


#define PATH_MAX_LEN 256

// Recursive function to list files and directories with full paths
void list_files_with_size(lfs_t *lfs, const char *path) {
 80082d4:	b580      	push	{r7, lr}
 80082d6:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 80082da:	af02      	add	r7, sp, #8
 80082dc:	1d3b      	adds	r3, r7, #4
 80082de:	6018      	str	r0, [r3, #0]
 80082e0:	463b      	mov	r3, r7
 80082e2:	6019      	str	r1, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;

    // Open the directory at the given path
    int err = lfs_dir_open(lfs, &dir, path);
 80082e4:	463a      	mov	r2, r7
 80082e6:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80082ea:	1d3b      	adds	r3, r7, #4
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	f7ff fcd4 	bl	8007c9c <lfs_dir_open>
 80082f4:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
    if (err) {
 80082f8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <list_files_with_size+0x38>
        printf("Failed to open directory: %s\n", path);
 8008300:	463b      	mov	r3, r7
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	4844      	ldr	r0, [pc, #272]	; (8008418 <list_files_with_size+0x144>)
 8008306:	f005 facf 	bl	800d8a8 <iprintf>
 800830a:	e081      	b.n	8008410 <list_files_with_size+0x13c>
        return;
    }

    // Loop through all files in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 800830c:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8008310:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8008314:	1d3b      	adds	r3, r7, #4
 8008316:	6818      	ldr	r0, [r3, #0]
 8008318:	f7ff fd08 	bl	8007d2c <lfs_dir_read>
 800831c:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
        if (err < 0) {
 8008320:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8008324:	2b00      	cmp	r3, #0
 8008326:	da05      	bge.n	8008334 <list_files_with_size+0x60>
            printf("Failed to read directory: %s\n", path);
 8008328:	463b      	mov	r3, r7
 800832a:	6819      	ldr	r1, [r3, #0]
 800832c:	483b      	ldr	r0, [pc, #236]	; (800841c <list_files_with_size+0x148>)
 800832e:	f005 fabb 	bl	800d8a8 <iprintf>
            break;
 8008332:	e066      	b.n	8008402 <list_files_with_size+0x12e>
        }

        // If no more files, break
        if (err == 0) {
 8008334:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d061      	beq.n	8008400 <list_files_with_size+0x12c>
            break;
        }

        // Build the full path for the current file/directory
        char full_path[PATH_MAX_LEN];
        snprintf(full_path, sizeof(full_path), "%s/%s", path, info.name);
 800833c:	463b      	mov	r3, r7
 800833e:	f107 000c 	add.w	r0, r7, #12
 8008342:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8008346:	3208      	adds	r2, #8
 8008348:	9200      	str	r2, [sp, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a34      	ldr	r2, [pc, #208]	; (8008420 <list_files_with_size+0x14c>)
 800834e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008352:	f005 fb4b 	bl	800d9ec <sniprintf>
        char pa[500];
        // Check if the entry is a file or directory
        if (info.type == LFS_TYPE_REG) {
 8008356:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d118      	bne.n	8008392 <list_files_with_size+0xbe>
            sprintf(pa,"File: %s, Size: %ld bytes\n", full_path, info.size);
 8008360:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f107 020c 	add.w	r2, r7, #12
 800836a:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800836e:	492d      	ldr	r1, [pc, #180]	; (8008424 <list_files_with_size+0x150>)
 8008370:	f005 fb70 	bl	800da54 <siprintf>
            HAL_UART_Transmit(&huart2, pa, strlen(pa),1000);
 8008374:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008378:	4618      	mov	r0, r3
 800837a:	f7f7 fef3 	bl	8000164 <strlen>
 800837e:	4603      	mov	r3, r0
 8008380:	b29a      	uxth	r2, r3
 8008382:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8008386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800838a:	4827      	ldr	r0, [pc, #156]	; (8008428 <list_files_with_size+0x154>)
 800838c:	f003 fbba 	bl	800bb04 <HAL_UART_Transmit>
 8008390:	e7bc      	b.n	800830c <list_files_with_size+0x38>
        } else if (info.type == LFS_TYPE_DIR && strcmp(info.name, ".") != 0 && strcmp(info.name, "..") != 0) {
 8008392:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d1b7      	bne.n	800830c <list_files_with_size+0x38>
 800839c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80083a0:	3308      	adds	r3, #8
 80083a2:	4922      	ldr	r1, [pc, #136]	; (800842c <list_files_with_size+0x158>)
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7f7 fed3 	bl	8000150 <strcmp>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0ad      	beq.n	800830c <list_files_with_size+0x38>
 80083b0:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80083b4:	3308      	adds	r3, #8
 80083b6:	491e      	ldr	r1, [pc, #120]	; (8008430 <list_files_with_size+0x15c>)
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7f7 fec9 	bl	8000150 <strcmp>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0a3      	beq.n	800830c <list_files_with_size+0x38>
            sprintf(pa,"Directory: %s\n", full_path);
 80083c4:	f107 020c 	add.w	r2, r7, #12
 80083c8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80083cc:	4919      	ldr	r1, [pc, #100]	; (8008434 <list_files_with_size+0x160>)
 80083ce:	4618      	mov	r0, r3
 80083d0:	f005 fb40 	bl	800da54 <siprintf>
            HAL_UART_Transmit(&huart2, pa, strlen(pa),1000);
 80083d4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80083d8:	4618      	mov	r0, r3
 80083da:	f7f7 fec3 	bl	8000164 <strlen>
 80083de:	4603      	mov	r3, r0
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80083e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083ea:	480f      	ldr	r0, [pc, #60]	; (8008428 <list_files_with_size+0x154>)
 80083ec:	f003 fb8a 	bl	800bb04 <HAL_UART_Transmit>
            // Recursively list the contents of the directory
            list_files_with_size(lfs, full_path);
 80083f0:	f107 020c 	add.w	r2, r7, #12
 80083f4:	1d3b      	adds	r3, r7, #4
 80083f6:	4611      	mov	r1, r2
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	f7ff ff6b 	bl	80082d4 <list_files_with_size>
    while (true) {
 80083fe:	e785      	b.n	800830c <list_files_with_size+0x38>
            break;
 8008400:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 8008402:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8008406:	1d3b      	adds	r3, r7, #4
 8008408:	4611      	mov	r1, r2
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	f7ff fc78 	bl	8007d00 <lfs_dir_close>
}
 8008410:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	08011d24 	.word	0x08011d24
 800841c:	08011d44 	.word	0x08011d44
 8008420:	08011d64 	.word	0x08011d64
 8008424:	08011d6c 	.word	0x08011d6c
 8008428:	20000680 	.word	0x20000680
 800842c:	08011d88 	.word	0x08011d88
 8008430:	08011d8c 	.word	0x08011d8c
 8008434:	08011d90 	.word	0x08011d90

08008438 <__init_storage>:
void __init_storage(){
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
	__init_nor();
 800843c:	f7ff fdac 	bl	8007f98 <__init_nor>
	__init_littefs();
 8008440:	f7ff feaa 	bl	8008198 <__init_littefs>
}
 8008444:	bf00      	nop
 8008446:	bd80      	pop	{r7, pc}

08008448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08c      	sub	sp, #48	; 0x30
 800844c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800844e:	f001 f989 	bl	8009764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008452:	f000 f8af 	bl	80085b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008456:	f000 fa0f 	bl	8008878 <MX_GPIO_Init>
  MX_SPI2_Init();
 800845a:	f000 f95d 	bl	8008718 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800845e:	f000 f9bb 	bl	80087d8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8008462:	f000 f923 	bl	80086ac <MX_SPI1_Init>
  MX_RTC_Init();
 8008466:	f000 f905 	bl	8008674 <MX_RTC_Init>
  MX_DMA_Init();
 800846a:	f000 f9df 	bl	800882c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800846e:	f000 f989 	bl	8008784 <MX_USART1_UART_Init>
//  //First erase flash memory
//  	Sector_Erase_4B(&hspi3, address, sector_size);
//	//id read
  while(1)
  {
	Read_ID(&hspi2, &dev_id);
 8008472:	4941      	ldr	r1, [pc, #260]	; (8008578 <main+0x130>)
 8008474:	4841      	ldr	r0, [pc, #260]	; (800857c <main+0x134>)
 8008476:	f7f8 fbed 	bl	8000c54 <Read_ID>
	if(dev_id.MAN_ID == 32){
 800847a:	4b3f      	ldr	r3, [pc, #252]	; (8008578 <main+0x130>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b20      	cmp	r3, #32
 8008480:	d000      	beq.n	8008484 <main+0x3c>
	Read_ID(&hspi2, &dev_id);
 8008482:	e7f6      	b.n	8008472 <main+0x2a>
		break;
 8008484:	bf00      	nop
	//	  Sector_Erase_4B(&hspi3, add, 64);
	//	  add+=65536;
	//  }

	  // myprintf("Starting LittleFS application........\n");
    HAL_Delay(100);
 8008486:	2064      	movs	r0, #100	; 0x64
 8008488:	f001 f9ce 	bl	8009828 <HAL_Delay>

  HAL_UART_Transmit(&huart2,"EPDM is starting *********\n", sizeof("EPDM is starting *********\n"),1000);
 800848c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008490:	221c      	movs	r2, #28
 8008492:	493b      	ldr	r1, [pc, #236]	; (8008580 <main+0x138>)
 8008494:	483b      	ldr	r0, [pc, #236]	; (8008584 <main+0x13c>)
 8008496:	f003 fb35 	bl	800bb04 <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart2,"Chip erase starting....\n", sizeof("Chip erase starting....\n"),1000);
 800849a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800849e:	2219      	movs	r2, #25
 80084a0:	4939      	ldr	r1, [pc, #228]	; (8008588 <main+0x140>)
 80084a2:	4838      	ldr	r0, [pc, #224]	; (8008584 <main+0x13c>)
 80084a4:	f003 fb2e 	bl	800bb04 <HAL_UART_Transmit>
//  Chip_Erase(&hspi3);

  HAL_UART_Transmit(&huart2,"Chip erase ending....\n", sizeof("Chip erase ending....\n"),1000);
 80084a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084ac:	2217      	movs	r2, #23
 80084ae:	4937      	ldr	r1, [pc, #220]	; (800858c <main+0x144>)
 80084b0:	4834      	ldr	r0, [pc, #208]	; (8008584 <main+0x13c>)
 80084b2:	f003 fb27 	bl	800bb04 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,"Chip erase ending....\n", sizeof("Chip erase ending....\n"),1000);
 80084b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084ba:	2217      	movs	r2, #23
 80084bc:	4933      	ldr	r1, [pc, #204]	; (800858c <main+0x144>)
 80084be:	4831      	ldr	r0, [pc, #196]	; (8008584 <main+0x13c>)
 80084c0:	f003 fb20 	bl	800bb04 <HAL_UART_Transmit>



	for(int j=0;j<20;j++){
 80084c4:	2300      	movs	r3, #0
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084c8:	e03f      	b.n	800854a <main+0x102>

		  __init_storage();
 80084ca:	f7ff ffb5 	bl	8008438 <__init_storage>
		  list_files(&Lfs);
 80084ce:	4830      	ldr	r0, [pc, #192]	; (8008590 <main+0x148>)
 80084d0:	f7ff fde2 	bl	8008098 <list_files>
		  list_files(&Lfs2);
 80084d4:	482f      	ldr	r0, [pc, #188]	; (8008594 <main+0x14c>)
 80084d6:	f7ff fddf 	bl	8008098 <list_files>
		//  char path[200];
		  char txt[40];//="\nprem is writing it manually";
//		  txt[0] =j;
		  sprintf(txt,"prem is writing it manually %d\n.",j);
 80084da:	1d3b      	adds	r3, r7, #4
 80084dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084de:	492e      	ldr	r1, [pc, #184]	; (8008598 <main+0x150>)
 80084e0:	4618      	mov	r0, r3
 80084e2:	f005 fab7 	bl	800da54 <siprintf>
		__init_littefs();
 80084e6:	f7ff fe57 	bl	8008198 <__init_littefs>
		  list_files_with_size(&Lfs, "/");
 80084ea:	492c      	ldr	r1, [pc, #176]	; (800859c <main+0x154>)
 80084ec:	4828      	ldr	r0, [pc, #160]	; (8008590 <main+0x148>)
 80084ee:	f7ff fef1 	bl	80082d4 <list_files_with_size>

		  list_files_with_size(&Lfs2, "/");
 80084f2:	492a      	ldr	r1, [pc, #168]	; (800859c <main+0x154>)
 80084f4:	4827      	ldr	r0, [pc, #156]	; (8008594 <main+0x14c>)
 80084f6:	f7ff feed 	bl	80082d4 <list_files_with_size>
		  		  lfs_file_open(&Lfs, &File, "test.txt", LFS_O_CREAT | LFS_O_RDWR  |LFS_O_APPEND | LFS_O_CREAT );
 80084fa:	f640 1303 	movw	r3, #2307	; 0x903
 80084fe:	4a28      	ldr	r2, [pc, #160]	; (80085a0 <main+0x158>)
 8008500:	4928      	ldr	r1, [pc, #160]	; (80085a4 <main+0x15c>)
 8008502:	4823      	ldr	r0, [pc, #140]	; (8008590 <main+0x148>)
 8008504:	f7ff fade 	bl	8007ac4 <lfs_file_open>
		  		  lfs_file_write(&Lfs, &File, &txt, sizeof(txt));
 8008508:	1d3a      	adds	r2, r7, #4
 800850a:	2328      	movs	r3, #40	; 0x28
 800850c:	4925      	ldr	r1, [pc, #148]	; (80085a4 <main+0x15c>)
 800850e:	4820      	ldr	r0, [pc, #128]	; (8008590 <main+0x148>)
 8008510:	f7ff fb68 	bl	8007be4 <lfs_file_write>
		  		lfs_file_write(&Lfs, &File, j, sizeof(j));
 8008514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008516:	2304      	movs	r3, #4
 8008518:	4922      	ldr	r1, [pc, #136]	; (80085a4 <main+0x15c>)
 800851a:	481d      	ldr	r0, [pc, #116]	; (8008590 <main+0x148>)
 800851c:	f7ff fb62 	bl	8007be4 <lfs_file_write>
		  		  lfs_file_close(&Lfs, &File);
 8008520:	4920      	ldr	r1, [pc, #128]	; (80085a4 <main+0x15c>)
 8008522:	481b      	ldr	r0, [pc, #108]	; (8008590 <main+0x148>)
 8008524:	f7ff fb02 	bl	8007b2c <lfs_file_close>
		  read_file_from_littlefs(&Lfs2, "test.txt");
 8008528:	491d      	ldr	r1, [pc, #116]	; (80085a0 <main+0x158>)
 800852a:	481a      	ldr	r0, [pc, #104]	; (8008594 <main+0x14c>)
 800852c:	f7ff fc52 	bl	8007dd4 <read_file_from_littlefs>
		//  read_file_from_littlefs(&Lfs, "sat_health.txt");
//		  read_file_from_littlefs(&Lfs, "common.txt");
		  lfs_unmount(&Lfs2);
 8008530:	4818      	ldr	r0, [pc, #96]	; (8008594 <main+0x14c>)
 8008532:	f7ff fab3 	bl	8007a9c <lfs_unmount>
		  lfs_unmount(&Lfs);
 8008536:	4816      	ldr	r0, [pc, #88]	; (8008590 <main+0x148>)
 8008538:	f7ff fab0 	bl	8007a9c <lfs_unmount>
		  HAL_Delay(5000);
 800853c:	f241 3088 	movw	r0, #5000	; 0x1388
 8008540:	f001 f972 	bl	8009828 <HAL_Delay>
	for(int j=0;j<20;j++){
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	3301      	adds	r3, #1
 8008548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	2b13      	cmp	r3, #19
 800854e:	ddbc      	ble.n	80084ca <main+0x82>
//    //   lfs_file_read(&Lfs, &File, &Counter, sizeof(app_count_t));
//
//       lfs_file_read(&Lfs, &File, &tx, sizeof(tx));
//       HAL_UART_Transmit(&huart2,tx,strlen(tx),1000);
//       lfs_file_close(&Lfs, &File);
   Counter.bootCount += 1;
 8008550:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <main+0x160>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	3301      	adds	r3, #1
 8008556:	4a14      	ldr	r2, [pc, #80]	; (80085a8 <main+0x160>)
 8008558:	6053      	str	r3, [r2, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { sprintf(Text, "Bt %lu |Ct %lu\n", Counter.bootCount, Counter.secCount);
 800855a:	4b13      	ldr	r3, [pc, #76]	; (80085a8 <main+0x160>)
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <main+0x160>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4912      	ldr	r1, [pc, #72]	; (80085ac <main+0x164>)
 8008564:	4812      	ldr	r0, [pc, #72]	; (80085b0 <main+0x168>)
 8008566:	f005 fa75 	bl	800da54 <siprintf>
//		  lfs_file_close(&Lfs, &File);

//		  while ((HAL_GetTick() - HalTickAux) < 1000);
//		  HAL_Delay(1000);

		  Counter.secCount += 1;
 800856a:	4b0f      	ldr	r3, [pc, #60]	; (80085a8 <main+0x160>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	4a0d      	ldr	r2, [pc, #52]	; (80085a8 <main+0x160>)
 8008572:	6013      	str	r3, [r2, #0]
  { sprintf(Text, "Bt %lu |Ct %lu\n", Counter.bootCount, Counter.secCount);
 8008574:	e7f1      	b.n	800855a <main+0x112>
 8008576:	bf00      	nop
 8008578:	20000758 	.word	0x20000758
 800857c:	200002f4 	.word	0x200002f4
 8008580:	08011da0 	.word	0x08011da0
 8008584:	20000680 	.word	0x20000680
 8008588:	08011dbc 	.word	0x08011dbc
 800858c:	08011dd8 	.word	0x08011dd8
 8008590:	200006c8 	.word	0x200006c8
 8008594:	20000544 	.word	0x20000544
 8008598:	08011df0 	.word	0x08011df0
 800859c:	08011ccc 	.word	0x08011ccc
 80085a0:	08011e14 	.word	0x08011e14
 80085a4:	2000034c 	.word	0x2000034c
 80085a8:	200001fc 	.word	0x200001fc
 80085ac:	08011e20 	.word	0x08011e20
 80085b0:	20000744 	.word	0x20000744

080085b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b094      	sub	sp, #80	; 0x50
 80085b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085be:	2228      	movs	r2, #40	; 0x28
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f004 f8f8 	bl	800c7b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085c8:	f107 0314 	add.w	r3, r7, #20
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	605a      	str	r2, [r3, #4]
 80085d2:	609a      	str	r2, [r3, #8]
 80085d4:	60da      	str	r2, [r3, #12]
 80085d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80085d8:	1d3b      	adds	r3, r7, #4
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	605a      	str	r2, [r3, #4]
 80085e0:	609a      	str	r2, [r3, #8]
 80085e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80085e4:	2309      	movs	r3, #9
 80085e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80085ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80085f4:	2301      	movs	r3, #1
 80085f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80085f8:	2301      	movs	r3, #1
 80085fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085fc:	2302      	movs	r3, #2
 80085fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8008606:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800860a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800860c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008610:	4618      	mov	r0, r3
 8008612:	f001 fdf7 	bl	800a204 <HAL_RCC_OscConfig>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800861c:	f000 f998 	bl	8008950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008620:	230f      	movs	r3, #15
 8008622:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008624:	2302      	movs	r3, #2
 8008626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008628:	2300      	movs	r3, #0
 800862a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800862c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008630:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008632:	2300      	movs	r3, #0
 8008634:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008636:	f107 0314 	add.w	r3, r7, #20
 800863a:	2101      	movs	r1, #1
 800863c:	4618      	mov	r0, r3
 800863e:	f002 f861 	bl	800a704 <HAL_RCC_ClockConfig>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008648:	f000 f982 	bl	8008950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800864c:	2301      	movs	r3, #1
 800864e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008654:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008656:	1d3b      	adds	r3, r7, #4
 8008658:	4618      	mov	r0, r3
 800865a:	f002 fa07 	bl	800aa6c <HAL_RCCEx_PeriphCLKConfig>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8008664:	f000 f974 	bl	8008950 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8008668:	f002 f936 	bl	800a8d8 <HAL_RCC_EnableCSS>
}
 800866c:	bf00      	nop
 800866e:	3750      	adds	r7, #80	; 0x50
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008678:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <MX_RTC_Init+0x30>)
 800867a:	4a0b      	ldr	r2, [pc, #44]	; (80086a8 <MX_RTC_Init+0x34>)
 800867c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800867e:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <MX_RTC_Init+0x30>)
 8008680:	f04f 32ff 	mov.w	r2, #4294967295
 8008684:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8008686:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <MX_RTC_Init+0x30>)
 8008688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800868c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800868e:	4805      	ldr	r0, [pc, #20]	; (80086a4 <MX_RTC_Init+0x30>)
 8008690:	f002 fb58 	bl	800ad44 <HAL_RTC_Init>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800869a:	f000 f959 	bl	8008950 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800869e:	bf00      	nop
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	200005c0 	.word	0x200005c0
 80086a8:	40002800 	.word	0x40002800

080086ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80086b0:	4b17      	ldr	r3, [pc, #92]	; (8008710 <MX_SPI1_Init+0x64>)
 80086b2:	4a18      	ldr	r2, [pc, #96]	; (8008714 <MX_SPI1_Init+0x68>)
 80086b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80086b6:	4b16      	ldr	r3, [pc, #88]	; (8008710 <MX_SPI1_Init+0x64>)
 80086b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80086bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <MX_SPI1_Init+0x64>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80086c4:	4b12      	ldr	r3, [pc, #72]	; (8008710 <MX_SPI1_Init+0x64>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80086ca:	4b11      	ldr	r3, [pc, #68]	; (8008710 <MX_SPI1_Init+0x64>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80086d0:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <MX_SPI1_Init+0x64>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <MX_SPI1_Init+0x64>)
 80086d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80086de:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <MX_SPI1_Init+0x64>)
 80086e0:	2228      	movs	r2, #40	; 0x28
 80086e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80086e4:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <MX_SPI1_Init+0x64>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80086ea:	4b09      	ldr	r3, [pc, #36]	; (8008710 <MX_SPI1_Init+0x64>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <MX_SPI1_Init+0x64>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80086f6:	4b06      	ldr	r3, [pc, #24]	; (8008710 <MX_SPI1_Init+0x64>)
 80086f8:	220a      	movs	r2, #10
 80086fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80086fc:	4804      	ldr	r0, [pc, #16]	; (8008710 <MX_SPI1_Init+0x64>)
 80086fe:	f002 fc2a 	bl	800af56 <HAL_SPI_Init>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008708:	f000 f922 	bl	8008950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800870c:	bf00      	nop
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000628 	.word	0x20000628
 8008714:	40013000 	.word	0x40013000

08008718 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800871c:	4b17      	ldr	r3, [pc, #92]	; (800877c <MX_SPI2_Init+0x64>)
 800871e:	4a18      	ldr	r2, [pc, #96]	; (8008780 <MX_SPI2_Init+0x68>)
 8008720:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008722:	4b16      	ldr	r3, [pc, #88]	; (800877c <MX_SPI2_Init+0x64>)
 8008724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008728:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800872a:	4b14      	ldr	r3, [pc, #80]	; (800877c <MX_SPI2_Init+0x64>)
 800872c:	2200      	movs	r2, #0
 800872e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008730:	4b12      	ldr	r3, [pc, #72]	; (800877c <MX_SPI2_Init+0x64>)
 8008732:	2200      	movs	r2, #0
 8008734:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008736:	4b11      	ldr	r3, [pc, #68]	; (800877c <MX_SPI2_Init+0x64>)
 8008738:	2200      	movs	r2, #0
 800873a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800873c:	4b0f      	ldr	r3, [pc, #60]	; (800877c <MX_SPI2_Init+0x64>)
 800873e:	2200      	movs	r2, #0
 8008740:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008742:	4b0e      	ldr	r3, [pc, #56]	; (800877c <MX_SPI2_Init+0x64>)
 8008744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008748:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800874a:	4b0c      	ldr	r3, [pc, #48]	; (800877c <MX_SPI2_Init+0x64>)
 800874c:	2218      	movs	r2, #24
 800874e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <MX_SPI2_Init+0x64>)
 8008752:	2200      	movs	r2, #0
 8008754:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <MX_SPI2_Init+0x64>)
 8008758:	2200      	movs	r2, #0
 800875a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800875c:	4b07      	ldr	r3, [pc, #28]	; (800877c <MX_SPI2_Init+0x64>)
 800875e:	2200      	movs	r2, #0
 8008760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008762:	4b06      	ldr	r3, [pc, #24]	; (800877c <MX_SPI2_Init+0x64>)
 8008764:	220a      	movs	r2, #10
 8008766:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008768:	4804      	ldr	r0, [pc, #16]	; (800877c <MX_SPI2_Init+0x64>)
 800876a:	f002 fbf4 	bl	800af56 <HAL_SPI_Init>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8008774:	f000 f8ec 	bl	8008950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008778:	bf00      	nop
 800877a:	bd80      	pop	{r7, pc}
 800877c:	200002f4 	.word	0x200002f4
 8008780:	40003800 	.word	0x40003800

08008784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008788:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <MX_USART1_UART_Init+0x4c>)
 800878a:	4a12      	ldr	r2, [pc, #72]	; (80087d4 <MX_USART1_UART_Init+0x50>)
 800878c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800878e:	4b10      	ldr	r3, [pc, #64]	; (80087d0 <MX_USART1_UART_Init+0x4c>)
 8008790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008796:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <MX_USART1_UART_Init+0x4c>)
 8008798:	2200      	movs	r2, #0
 800879a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <MX_USART1_UART_Init+0x4c>)
 800879e:	2200      	movs	r2, #0
 80087a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80087a2:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80087a8:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087aa:	220c      	movs	r2, #12
 80087ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087ae:	4b08      	ldr	r3, [pc, #32]	; (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80087ba:	4805      	ldr	r0, [pc, #20]	; (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087bc:	f003 f952 	bl	800ba64 <HAL_UART_Init>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80087c6:	f000 f8c3 	bl	8008950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80087ca:	bf00      	nop
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200003e4 	.word	0x200003e4
 80087d4:	40013800 	.word	0x40013800

080087d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80087dc:	4b11      	ldr	r3, [pc, #68]	; (8008824 <MX_USART2_UART_Init+0x4c>)
 80087de:	4a12      	ldr	r2, [pc, #72]	; (8008828 <MX_USART2_UART_Init+0x50>)
 80087e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80087e2:	4b10      	ldr	r3, [pc, #64]	; (8008824 <MX_USART2_UART_Init+0x4c>)
 80087e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80087ea:	4b0e      	ldr	r3, [pc, #56]	; (8008824 <MX_USART2_UART_Init+0x4c>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80087f0:	4b0c      	ldr	r3, [pc, #48]	; (8008824 <MX_USART2_UART_Init+0x4c>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <MX_USART2_UART_Init+0x4c>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <MX_USART2_UART_Init+0x4c>)
 80087fe:	220c      	movs	r2, #12
 8008800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008802:	4b08      	ldr	r3, [pc, #32]	; (8008824 <MX_USART2_UART_Init+0x4c>)
 8008804:	2200      	movs	r2, #0
 8008806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008808:	4b06      	ldr	r3, [pc, #24]	; (8008824 <MX_USART2_UART_Init+0x4c>)
 800880a:	2200      	movs	r2, #0
 800880c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800880e:	4805      	ldr	r0, [pc, #20]	; (8008824 <MX_USART2_UART_Init+0x4c>)
 8008810:	f003 f928 	bl	800ba64 <HAL_UART_Init>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800881a:	f000 f899 	bl	8008950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800881e:	bf00      	nop
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000680 	.word	0x20000680
 8008828:	40004400 	.word	0x40004400

0800882c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008832:	4b10      	ldr	r3, [pc, #64]	; (8008874 <MX_DMA_Init+0x48>)
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	4a0f      	ldr	r2, [pc, #60]	; (8008874 <MX_DMA_Init+0x48>)
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	6153      	str	r3, [r2, #20]
 800883e:	4b0d      	ldr	r3, [pc, #52]	; (8008874 <MX_DMA_Init+0x48>)
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	607b      	str	r3, [r7, #4]
 8008848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800884a:	2200      	movs	r2, #0
 800884c:	2100      	movs	r1, #0
 800884e:	2010      	movs	r0, #16
 8008850:	f001 f8e5 	bl	8009a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008854:	2010      	movs	r0, #16
 8008856:	f001 f8fe 	bl	8009a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	2011      	movs	r0, #17
 8008860:	f001 f8dd 	bl	8009a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8008864:	2011      	movs	r0, #17
 8008866:	f001 f8f6 	bl	8009a56 <HAL_NVIC_EnableIRQ>

}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	40021000 	.word	0x40021000

08008878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800887e:	f107 0310 	add.w	r3, r7, #16
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
 8008886:	605a      	str	r2, [r3, #4]
 8008888:	609a      	str	r2, [r3, #8]
 800888a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800888c:	4b2d      	ldr	r3, [pc, #180]	; (8008944 <MX_GPIO_Init+0xcc>)
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	4a2c      	ldr	r2, [pc, #176]	; (8008944 <MX_GPIO_Init+0xcc>)
 8008892:	f043 0320 	orr.w	r3, r3, #32
 8008896:	6193      	str	r3, [r2, #24]
 8008898:	4b2a      	ldr	r3, [pc, #168]	; (8008944 <MX_GPIO_Init+0xcc>)
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80088a4:	4b27      	ldr	r3, [pc, #156]	; (8008944 <MX_GPIO_Init+0xcc>)
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	4a26      	ldr	r2, [pc, #152]	; (8008944 <MX_GPIO_Init+0xcc>)
 80088aa:	f043 0304 	orr.w	r3, r3, #4
 80088ae:	6193      	str	r3, [r2, #24]
 80088b0:	4b24      	ldr	r3, [pc, #144]	; (8008944 <MX_GPIO_Init+0xcc>)
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	60bb      	str	r3, [r7, #8]
 80088ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80088bc:	4b21      	ldr	r3, [pc, #132]	; (8008944 <MX_GPIO_Init+0xcc>)
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	4a20      	ldr	r2, [pc, #128]	; (8008944 <MX_GPIO_Init+0xcc>)
 80088c2:	f043 0308 	orr.w	r3, r3, #8
 80088c6:	6193      	str	r3, [r2, #24]
 80088c8:	4b1e      	ldr	r3, [pc, #120]	; (8008944 <MX_GPIO_Init+0xcc>)
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	f003 0308 	and.w	r3, r3, #8
 80088d0:	607b      	str	r3, [r7, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|SS2_Pin|SS4_Pin|FM_CS_Pin
 80088d4:	2200      	movs	r2, #0
 80088d6:	f241 717b 	movw	r1, #6011	; 0x177b
 80088da:	481b      	ldr	r0, [pc, #108]	; (8008948 <MX_GPIO_Init+0xd0>)
 80088dc:	f001 fc6e 	bl	800a1bc <HAL_GPIO_WritePin>
                          |DRDY4_Pin|DRDY3_Pin|DRDY2_Pin|DRDY1_Pin
                          |MSN_EN3_Pin|MSN_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MSN_EN4_Pin|MSN_EN2_Pin, GPIO_PIN_RESET);
 80088e0:	2200      	movs	r2, #0
 80088e2:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80088e6:	4819      	ldr	r0, [pc, #100]	; (800894c <MX_GPIO_Init+0xd4>)
 80088e8:	f001 fc68 	bl	800a1bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin SS2_Pin SS4_Pin FM_CS_Pin
                           DRDY4_Pin DRDY3_Pin DRDY2_Pin DRDY1_Pin
                           MSN_EN3_Pin MSN_EN1_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|SS2_Pin|SS4_Pin|FM_CS_Pin
 80088ec:	f241 737b 	movw	r3, #6011	; 0x177b
 80088f0:	613b      	str	r3, [r7, #16]
                          |DRDY4_Pin|DRDY3_Pin|DRDY2_Pin|DRDY1_Pin
                          |MSN_EN3_Pin|MSN_EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088f2:	2301      	movs	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088fa:	2302      	movs	r3, #2
 80088fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088fe:	f107 0310 	add.w	r3, r7, #16
 8008902:	4619      	mov	r1, r3
 8008904:	4810      	ldr	r0, [pc, #64]	; (8008948 <MX_GPIO_Init+0xd0>)
 8008906:	f001 fad5 	bl	8009eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS3_Pin */
  GPIO_InitStruct.Pin = SS3_Pin;
 800890a:	2304      	movs	r3, #4
 800890c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800890e:	2303      	movs	r3, #3
 8008910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 8008912:	f107 0310 	add.w	r3, r7, #16
 8008916:	4619      	mov	r1, r3
 8008918:	480b      	ldr	r0, [pc, #44]	; (8008948 <MX_GPIO_Init+0xd0>)
 800891a:	f001 facb 	bl	8009eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN4_Pin MSN_EN2_Pin */
  GPIO_InitStruct.Pin = MSN_EN4_Pin|MSN_EN2_Pin;
 800891e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8008922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008924:	2301      	movs	r3, #1
 8008926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008928:	2300      	movs	r3, #0
 800892a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800892c:	2302      	movs	r3, #2
 800892e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008930:	f107 0310 	add.w	r3, r7, #16
 8008934:	4619      	mov	r1, r3
 8008936:	4805      	ldr	r0, [pc, #20]	; (800894c <MX_GPIO_Init+0xd4>)
 8008938:	f001 fabc 	bl	8009eb4 <HAL_GPIO_Init>

}
 800893c:	bf00      	nop
 800893e:	3720      	adds	r7, #32
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	40021000 	.word	0x40021000
 8008948:	40010c00 	.word	0x40010c00
 800894c:	40010800 	.word	0x40010800

08008950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008954:	b672      	cpsid	i
}
 8008956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008958:	e7fe      	b.n	8008958 <Error_Handler+0x8>

0800895a <_nor_cs_assert>:
	_SELECT_SR3,
};

/* Functions */

static void _nor_cs_assert(nor_t *nor){
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
	nor->config.CsAssert();
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <_nor_cs_deassert>:

static void _nor_cs_deassert(nor_t *nor){
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	nor->config.CsDeassert();
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
}
 800897e:	bf00      	nop
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <_nor_spi_tx>:

static void _nor_spi_tx(nor_t *nor, uint8_t *txBuf, uint32_t size){
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
	nor->config.SpiTxFxn(txBuf, size);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	68b8      	ldr	r0, [r7, #8]
 800899a:	4798      	blx	r3
}
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <_nor_spi_rx>:

static void _nor_spi_rx(nor_t *nor, uint8_t *rxBuf, uint32_t size){
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
	nor->config.SpiRxFxn(rxBuf, size);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	68b8      	ldr	r0, [r7, #8]
 80089b8:	4798      	blx	r3
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <_nor_delay_us>:

static void _nor_delay_us(nor_t *nor, uint32_t us){
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
	nor->config.DelayUs(us);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	6838      	ldr	r0, [r7, #0]
 80089d2:	4798      	blx	r3
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <_nor_ReadID>:

static uint32_t _nor_ReadID(nor_t *nor)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	uint8_t JedecIdCmd = NOR_JEDEC_ID;
 80089e4:	239e      	movs	r3, #158	; 0x9e
 80089e6:	73fb      	strb	r3, [r7, #15]
	uint32_t ID = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60bb      	str	r3, [r7, #8]

	_nor_cs_assert(nor);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff ffb4 	bl	800895a <_nor_cs_assert>
	_nor_spi_tx(nor, &JedecIdCmd, sizeof(JedecIdCmd));
 80089f2:	f107 030f 	add.w	r3, r7, #15
 80089f6:	2201      	movs	r2, #1
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff ffc3 	bl	8008986 <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&ID, 3);
 8008a00:	f107 0308 	add.w	r3, r7, #8
 8008a04:	2203      	movs	r2, #3
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff ffcb 	bl	80089a4 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff ffae 	bl	8008970 <_nor_cs_deassert>

	return ID;
 8008a14:	68bb      	ldr	r3, [r7, #8]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <_nor_ReadUniqID>:

static uint64_t _nor_ReadUniqID(nor_t *nor)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b088      	sub	sp, #32
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
	uint8_t UniqueIdCmd = NOR_UNIQUE_ID;
 8008a26:	234b      	movs	r3, #75	; 0x4b
 8008a28:	77fb      	strb	r3, [r7, #31]
	uint64_t UniqueId = 0;
 8008a2a:	f04f 0200 	mov.w	r2, #0
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t DummyU32 = (~0UL);
 8008a36:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3a:	60fb      	str	r3, [r7, #12]

	_nor_cs_assert(nor);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff ff8c 	bl	800895a <_nor_cs_assert>
	_nor_spi_tx(nor, &UniqueIdCmd, sizeof(UniqueIdCmd));
 8008a42:	f107 031f 	add.w	r3, r7, #31
 8008a46:	2201      	movs	r2, #1
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff ff9b 	bl	8008986 <_nor_spi_tx>
	// this if the 4 dummy byte
	_nor_spi_tx(nor, (uint8_t*)&DummyU32, 4);
 8008a50:	f107 030c 	add.w	r3, r7, #12
 8008a54:	2204      	movs	r2, #4
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7ff ff94 	bl	8008986 <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&UniqueId, sizeof(UniqueId));
 8008a5e:	f107 0310 	add.w	r3, r7, #16
 8008a62:	2208      	movs	r2, #8
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff ff9c 	bl	80089a4 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff ff7f 	bl	8008970 <_nor_cs_deassert>

	return UniqueId;
 8008a72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8008a76:	4610      	mov	r0, r2
 8008a78:	4619      	mov	r1, r3
 8008a7a:	3720      	adds	r7, #32
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <_nor_WriteEnable>:

static void _nor_WriteEnable(nor_t *nor)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
	uint8_t WriteEnCmd = NOR_CMD_WRITE_EN;
 8008a88:	2306      	movs	r3, #6
 8008a8a:	73fb      	strb	r3, [r7, #15]

	_nor_cs_assert(nor);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff ff64 	bl	800895a <_nor_cs_assert>
	_nor_spi_tx(nor, &WriteEnCmd, sizeof(WriteEnCmd));
 8008a92:	f107 030f 	add.w	r3, r7, #15
 8008a96:	2201      	movs	r2, #1
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff ff73 	bl	8008986 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff ff65 	bl	8008970 <_nor_cs_deassert>
	// TODO Check if a delay was needed here
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <_nor_ReadStatusRegister>:
	_nor_spi_tx(nor, &WriteDisCmd, sizeof(WriteDisCmd));
	_nor_cs_deassert(nor);
}

uint8_t _nor_ReadStatusRegister(nor_t *nor, enum _nor_sr_select_e SelectSR)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0, ReadSRCmd;
 8008aba:	2300      	movs	r3, #0
 8008abc:	72fb      	strb	r3, [r7, #11]
	uint8_t *SrUpdateHandler;

	switch (SelectSR){
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d012      	beq.n	8008aea <_nor_ReadStatusRegister+0x3c>
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	dc16      	bgt.n	8008af6 <_nor_ReadStatusRegister+0x48>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <_nor_ReadStatusRegister+0x24>
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d006      	beq.n	8008ade <_nor_ReadStatusRegister+0x30>
 8008ad0:	e011      	b.n	8008af6 <_nor_ReadStatusRegister+0x48>
	case _SELECT_SR1:
		ReadSRCmd = NOR_READ_SR1;
 8008ad2:	2305      	movs	r3, #5
 8008ad4:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3342      	adds	r3, #66	; 0x42
 8008ada:	60fb      	str	r3, [r7, #12]
		break;
 8008adc:	e00d      	b.n	8008afa <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR2:
		ReadSRCmd = NOR_READ_SR2;
 8008ade:	2370      	movs	r3, #112	; 0x70
 8008ae0:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3342      	adds	r3, #66	; 0x42
 8008ae6:	60fb      	str	r3, [r7, #12]
		break;
 8008ae8:	e007      	b.n	8008afa <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR3:
		ReadSRCmd = NOR_READ_SR3;
 8008aea:	2315      	movs	r3, #21
 8008aec:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3342      	adds	r3, #66	; 0x42
 8008af2:	60fb      	str	r3, [r7, #12]
		break;
 8008af4:	e001      	b.n	8008afa <_nor_ReadStatusRegister+0x4c>
	default:
		return 0xFF;
 8008af6:	23ff      	movs	r3, #255	; 0xff
 8008af8:	e017      	b.n	8008b2a <_nor_ReadStatusRegister+0x7c>
	}
	_nor_cs_assert(nor);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff ff2d 	bl	800895a <_nor_cs_assert>
	_nor_spi_tx(nor, &ReadSRCmd, sizeof(ReadSRCmd));
 8008b00:	f107 030a 	add.w	r3, r7, #10
 8008b04:	2201      	movs	r2, #1
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff ff3c 	bl	8008986 <_nor_spi_tx>
	_nor_spi_rx(nor, &status, sizeof(status));
 8008b0e:	f107 030b 	add.w	r3, r7, #11
 8008b12:	2201      	movs	r2, #1
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff ff44 	bl	80089a4 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff ff27 	bl	8008970 <_nor_cs_deassert>

	*SrUpdateHandler = status;
 8008b22:	7afa      	ldrb	r2, [r7, #11]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	701a      	strb	r2, [r3, #0]

	return status;
 8008b28:	7afb      	ldrb	r3, [r7, #11]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <_nor_WaitForWriteEnd>:
	_nor_spi_tx(nor, WriteSR, sizeof(WriteSR));
	_nor_cs_deassert(nor);
}

nor_err_e _nor_WaitForWriteEnd(nor_t *nor, uint32_t msTimeout)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
	uint8_t ReadSr1Cmd = NOR_READ_SR1;
 8008b3c:	2305      	movs	r3, #5
 8008b3e:	73fb      	strb	r3, [r7, #15]

	// multply timeout for 10, we must run a delay of 100us on each iteraction
	msTimeout *= 10;
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	603b      	str	r3, [r7, #0]
	_nor_cs_assert(nor);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff ff04 	bl	800895a <_nor_cs_assert>
	_nor_spi_tx(nor, (uint8_t*)&ReadSr1Cmd, sizeof(ReadSr1Cmd));
 8008b52:	f107 030f 	add.w	r3, r7, #15
 8008b56:	2201      	movs	r2, #1
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff ff13 	bl	8008986 <_nor_spi_tx>
	do{
		_nor_spi_rx(nor, &nor->_internal.u8StatusReg1, sizeof(uint8_t));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3342      	adds	r3, #66	; 0x42
 8008b64:	2201      	movs	r2, #1
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff ff1b 	bl	80089a4 <_nor_spi_rx>
		_nor_delay_us(nor, 100);
 8008b6e:	2164      	movs	r1, #100	; 0x64
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff ff26 	bl	80089c2 <_nor_delay_us>
		msTimeout -= 100;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	3b64      	subs	r3, #100	; 0x64
 8008b7a:	603b      	str	r3, [r7, #0]
	}while ((nor->_internal.u8StatusReg1 & SR1_BUSY_BIT) && (msTimeout > 0));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <_nor_WaitForWriteEnd+0x5e>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e7      	bne.n	8008b60 <_nor_WaitForWriteEnd+0x2e>
	_nor_cs_deassert(nor);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff feed 	bl	8008970 <_nor_cs_deassert>

	if (msTimeout == 0){
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <_nor_WaitForWriteEnd+0x6e>
		return NOR_FAIL;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <_nor_WaitForWriteEnd+0x70>
	}
	return NOR_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <NOR_Init>:

/*
 * Publics
 */

nor_err_e NOR_Init(nor_t *nor){
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
	uint8_t ExitPDCmd = NOR_RELEASE_PD;
 8008bb2:	23ab      	movs	r3, #171	; 0xab
 8008bb4:	73fb      	strb	r3, [r7, #15]

	if (nor == NULL || nor->config.CsAssert == NULL ||
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d013      	beq.n	8008be4 <NOR_Init+0x3a>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00f      	beq.n	8008be4 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
	if (nor == NULL || nor->config.CsAssert == NULL ||
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d007      	beq.n	8008be4 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <NOR_Init+0x3e>
		NOR_PRINTF("ERROR: Invalid Parameters on %s function\n", __func__);
		return NOR_INVALID_PARAMS;
 8008be4:	2302      	movs	r3, #2
 8008be6:	e09a      	b.n	8008d1e <NOR_Init+0x174>
	}
	if (nor->_internal.u16Initialized == NOR_INITIALIZED_FLAG){
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008bee:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d101      	bne.n	8008bfa <NOR_Init+0x50>
		// the flash instance is already initialized
		NOR_PRINTF("Warning: Flash is already initialized.\n");
		return NOR_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e091      	b.n	8008d1e <NOR_Init+0x174>
	}
	// we must have sure that the NOR has your CS pin deasserted
	_nor_cs_deassert(nor);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff feb8 	bl	8008970 <_nor_cs_deassert>
	_nor_delay_us(nor, 100);
 8008c00:	2164      	movs	r1, #100	; 0x64
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff fedd 	bl	80089c2 <_nor_delay_us>

	// we are assuming, on startup, that the Flash is on Power Down State
	nor->_internal.u8PdCount = 0;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nor->pdState = NOR_IN_IDLE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	_nor_cs_assert(nor);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff fe9e 	bl	800895a <_nor_cs_assert>
	_nor_spi_tx(nor, &ExitPDCmd, sizeof(ExitPDCmd));
 8008c1e:	f107 030f 	add.w	r3, r7, #15
 8008c22:	2201      	movs	r2, #1
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fead 	bl	8008986 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff fe9f 	bl	8008970 <_nor_cs_deassert>

	nor->info.u32JedecID = _nor_ReadID(nor);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff fed2 	bl	80089dc <_nor_ReadID>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	621a      	str	r2, [r3, #32]
	if (nor->info.u32JedecID == 0x000000 || nor->info.u32JedecID == 0xFFFFFF){
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d005      	beq.n	8008c52 <NOR_Init+0xa8>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d101      	bne.n	8008c56 <NOR_Init+0xac>
		// invalid Id, I thing we don't has any flash on SPI
		NOR_PRINTF("ERROR: Flash memory bus fault.\n");
		return NOR_NO_MEMORY_FOUND;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e063      	b.n	8008d1e <NOR_Init+0x174>
	}
	nor->Manufacturer = NOR_IDS_Interpret_Manufacturer(nor->info.u32JedecID);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fa30 	bl	80090c0 <NOR_IDS_Interpret_Manufacturer>
 8008c60:	4603      	mov	r3, r0
 8008c62:	461a      	mov	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	nor->Model = NOR_IDS_Interpret_Model(nor->info.u32JedecID);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fa31 	bl	80090d6 <NOR_IDS_Interpret_Model>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	if (nor->Model == NOR_MODEL_UNKNOWN){
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d101      	bne.n	8008c90 <NOR_Init+0xe6>
		NOR_PRINTF("ERROR: The flash memory model wasn't reconignized.\n"
				"You can, yet, start with NOR_Init_wo_ID to ignore the Flash ID.");
		return NOR_UNKNOWN_DEVICE;
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	e046      	b.n	8008d1e <NOR_Init+0x174>
	}

	nor->info.u64UniqueId = _nor_ReadUniqID(nor);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fec4 	bl	8008a1e <_nor_ReadUniqID>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	nor->info.u32BlockCount = NOR_IDS_GetQtdBlocks(nor->info.u32JedecID);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 fa3a 	bl	800911e <NOR_IDS_GetQtdBlocks>
 8008caa:	4602      	mov	r2, r0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	63da      	str	r2, [r3, #60]	; 0x3c

	nor->info.u16PageSize = NOR_PAGE_SIZE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cb6:	851a      	strh	r2, [r3, #40]	; 0x28
	nor->info.u16SectorSize = NOR_SECTOR_SIZE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008cbe:	861a      	strh	r2, [r3, #48]	; 0x30
	nor->info.u32BlockSize = NOR_BLOCK_SIZE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008cc6:	639a      	str	r2, [r3, #56]	; 0x38
	nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ccc:	011a      	lsls	r2, r3, #4
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	635a      	str	r2, [r3, #52]	; 0x34
	nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8008cda:	fb02 f303 	mul.w	r3, r2, r3
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008ce2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8008cf2:	fb02 f203 	mul.w	r2, r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	625a      	str	r2, [r3, #36]	; 0x24

	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff fed6 	bl	8008aae <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8008d02:	2100      	movs	r1, #0
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fed2 	bl	8008aae <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff fece 	bl	8008aae <_nor_ReadStatusRegister>

	nor->_internal.u16Initialized = NOR_INITIALIZED_FLAG;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	NOR_PRINTF(" Sector Count | %d Sectors\n", (uint)nor->info.u32SectorCount);
	NOR_PRINTF(" Block Count  | %d Blocks\n", (uint)nor->info.u32BlockCount);
	NOR_PRINTF(" Capacity     | %d KB\n", (uint)(nor->info.u32Size/1024));
	NOR_PRINTF(" == NOR Initialization Done ==\n");

	return NOR_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <NOR_EraseAddress>:
	}
	NOR_PRINTF("Done!\n");
	return err;
}

nor_err_e NOR_EraseAddress(nor_t *nor, uint32_t Address, nor_erase_method_e method){
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	71fb      	strb	r3, [r7, #7]
	uint8_t EraseChipCmd[4];
	uint32_t expectedTimeoutUs;
	nor_err_e err;

	_SANITY_CHECK(nor);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <NOR_EraseAddress+0x18>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e043      	b.n	8008dc8 <NOR_EraseAddress+0xa0>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d46:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d001      	beq.n	8008d52 <NOR_EraseAddress+0x2a>
 8008d4e:	2306      	movs	r3, #6
 8008d50:	e03a      	b.n	8008dc8 <NOR_EraseAddress+0xa0>

	switch (method){
 8008d52:	79fb      	ldrb	r3, [r7, #7]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d010      	beq.n	8008d7a <NOR_EraseAddress+0x52>
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	dc13      	bgt.n	8008d84 <NOR_EraseAddress+0x5c>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <NOR_EraseAddress+0x3e>
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d005      	beq.n	8008d70 <NOR_EraseAddress+0x48>
 8008d64:	e00e      	b.n	8008d84 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_4K:
		NOR_PRINTF("Erasing 4K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_4K;
 8008d66:	2320      	movs	r3, #32
 8008d68:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_4K_ERASE_TIME;
 8008d6a:	4b19      	ldr	r3, [pc, #100]	; (8008dd0 <NOR_EraseAddress+0xa8>)
 8008d6c:	61fb      	str	r3, [r7, #28]
		break;
 8008d6e:	e009      	b.n	8008d84 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_32K:
		NOR_PRINTF("Erasing 32K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_32K;
 8008d70:	2352      	movs	r3, #82	; 0x52
 8008d72:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_32K_ERASE_TIME;
 8008d74:	4b17      	ldr	r3, [pc, #92]	; (8008dd4 <NOR_EraseAddress+0xac>)
 8008d76:	61fb      	str	r3, [r7, #28]
		break;
 8008d78:	e004      	b.n	8008d84 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_64K:
		NOR_PRINTF("Erasing 64K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_64K;
 8008d7a:	23d8      	movs	r3, #216	; 0xd8
 8008d7c:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_64K_ERASE_TIME;
 8008d7e:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <NOR_EraseAddress+0xb0>)
 8008d80:	61fb      	str	r3, [r7, #28]
		break;
 8008d82:	bf00      	nop
	}
	EraseChipCmd[1] = ((Address >> 16) & 0xFF);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	0c1b      	lsrs	r3, r3, #16
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	757b      	strb	r3, [r7, #21]
	EraseChipCmd[2] = ((Address >> 8) & 0xFF);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	0a1b      	lsrs	r3, r3, #8
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	75bb      	strb	r3, [r7, #22]
	EraseChipCmd[3] = ((Address) & 0xFF);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	75fb      	strb	r3, [r7, #23]

	_nor_WriteEnable(nor);
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f7ff fe70 	bl	8008a80 <_nor_WriteEnable>
	_nor_cs_assert(nor);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f7ff fdda 	bl	800895a <_nor_cs_assert>
	_nor_spi_tx(nor, EraseChipCmd, sizeof(EraseChipCmd));
 8008da6:	f107 0314 	add.w	r3, r7, #20
 8008daa:	2204      	movs	r2, #4
 8008dac:	4619      	mov	r1, r3
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f7ff fde9 	bl	8008986 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f7ff fddb 	bl	8008970 <_nor_cs_deassert>
	err = _nor_WaitForWriteEnd(nor, expectedTimeoutUs);
 8008dba:	69f9      	ldr	r1, [r7, #28]
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7ff feb8 	bl	8008b32 <_nor_WaitForWriteEnd>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	76fb      	strb	r3, [r7, #27]
	if (err != NOR_OK){
		NOR_PRINTF("ERROR: Failed to erase flash\n");
	}
	NOR_PRINTF("Done!\n");

	return err;
 8008dc6:	7efb      	ldrb	r3, [r7, #27]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	00061a80 	.word	0x00061a80
 8008dd4:	00186a00 	.word	0x00186a00
 8008dd8:	001e8480 	.word	0x001e8480

08008ddc <NOR_EraseSector>:

nor_err_e NOR_EraseSector(nor_t *nor, uint32_t SectorAddr){
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <NOR_EraseSector+0x14>
 8008dec:	2302      	movs	r3, #2
 8008dee:	e015      	b.n	8008e1c <NOR_EraseSector+0x40>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008df6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d001      	beq.n	8008e02 <NOR_EraseSector+0x26>
 8008dfe:	2306      	movs	r3, #6
 8008e00:	e00c      	b.n	8008e1c <NOR_EraseSector+0x40>

	Address = SectorAddr * nor->info.u16SectorSize;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008e06:	461a      	mov	r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	fb02 f303 	mul.w	r3, r2, r3
 8008e0e:	60fb      	str	r3, [r7, #12]
	return NOR_EraseAddress(nor, Address, NOR_ERASE_4K);
 8008e10:	2200      	movs	r2, #0
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff ff87 	bl	8008d28 <NOR_EraseAddress>
 8008e1a:	4603      	mov	r3, r0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <NOR_WriteBytes>:

	ActAddress = (nor->info.u32BlockSize * BlockAddr) + Offset;
	return NOR_IsEmptyAddress(nor, ActAddress, NumBytesToCheck);
}

nor_err_e NOR_WriteBytes(nor_t *nor, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NumBytesToWrite){
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
	uint8_t WriteCmd[4];
	uint32_t _BytesToWrite;

	_SANITY_CHECK(nor);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <NOR_WriteBytes+0x18>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e05f      	b.n	8008efc <NOR_WriteBytes+0xd8>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e42:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d001      	beq.n	8008e4e <NOR_WriteBytes+0x2a>
 8008e4a:	2306      	movs	r3, #6
 8008e4c:	e056      	b.n	8008efc <NOR_WriteBytes+0xd8>

	if (NumBytesToWrite == 0){
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <NOR_WriteBytes+0x34>
		NOR_PRINTF("ERROR: Invalid parameters on NOR_WriteBytes\n");
		return NOR_INVALID_PARAMS;
 8008e54:	2302      	movs	r3, #2
 8008e56:	e051      	b.n	8008efc <NOR_WriteBytes+0xd8>
	}
	// TODO check if Address is not grater than the Flash size
	NOR_PRINTF("Writing %d bytes into Address %08X.\n", (uint)NumBytesToWrite, (uint)WriteAddr);
	NOR_PRINTF("Buffer to Write into Flash:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < NumBytesToWrite; i++)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61bb      	str	r3, [r7, #24]
 8008e5c:	e002      	b.n	8008e64 <NOR_WriteBytes+0x40>
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	3301      	adds	r3, #1
 8008e62:	61bb      	str	r3, [r7, #24]
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d3f8      	bcc.n	8008e5e <NOR_WriteBytes+0x3a>
		}
		NOR_PRINTF("%02X ", pBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	do{
		if (((WriteAddr%nor->info.u16PageSize)+NumBytesToWrite) > nor->info.u16PageSize){
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e70:	461a      	mov	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e78:	fb02 f201 	mul.w	r2, r2, r1
 8008e7c:	1a9a      	subs	r2, r3, r2
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	4413      	add	r3, r2
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d903      	bls.n	8008e92 <NOR_WriteBytes+0x6e>
			_BytesToWrite = nor->info.u16PageSize;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8e:	61fb      	str	r3, [r7, #28]
 8008e90:	e001      	b.n	8008e96 <NOR_WriteBytes+0x72>
		}
		else{
			_BytesToWrite = NumBytesToWrite;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	61fb      	str	r3, [r7, #28]
		}
		_nor_WriteEnable(nor);
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7ff fdf2 	bl	8008a80 <_nor_WriteEnable>
		WriteCmd[0] = NOR_PAGE_PROGRAM;
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	753b      	strb	r3, [r7, #20]
		WriteCmd[1] = ((WriteAddr >> 16) & 0xFF);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	0c1b      	lsrs	r3, r3, #16
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	757b      	strb	r3, [r7, #21]
		WriteCmd[2] = ((WriteAddr >> 8) & 0xFF);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	75bb      	strb	r3, [r7, #22]
		WriteCmd[3] = ((WriteAddr) & 0xFF);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	75fb      	strb	r3, [r7, #23]
		_nor_cs_assert(nor);
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f7ff fd4f 	bl	800895a <_nor_cs_assert>
		_nor_spi_tx(nor, WriteCmd, sizeof(WriteCmd));
 8008ebc:	f107 0314 	add.w	r3, r7, #20
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f7ff fd5e 	bl	8008986 <_nor_spi_tx>
		_nor_spi_tx(nor, pBuffer, _BytesToWrite);
 8008eca:	69fa      	ldr	r2, [r7, #28]
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff fd59 	bl	8008986 <_nor_spi_tx>
		_nor_cs_deassert(nor);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fd4b 	bl	8008970 <_nor_cs_deassert>
		_nor_WaitForWriteEnd(nor, NOR_EXPECT_PAGE_PROG_TIME);
 8008eda:	f242 7110 	movw	r1, #10000	; 0x2710
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff fe27 	bl	8008b32 <_nor_WaitForWriteEnd>
		pBuffer += _BytesToWrite;
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	4413      	add	r3, r2
 8008eea:	60bb      	str	r3, [r7, #8]
		NumBytesToWrite -= _BytesToWrite;
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	603b      	str	r3, [r7, #0]
	}while (NumBytesToWrite > 0);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1b8      	bne.n	8008e6c <NOR_WriteBytes+0x48>
	NOR_PRINTF("Write done.!\n");

	return NOR_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3720      	adds	r7, #32
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <NOR_WriteSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_WriteSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumBytesToWrite){
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <NOR_WriteSector+0x18>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e027      	b.n	8008f6c <NOR_WriteSector+0x68>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f22:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00a      	beq.n	8008f40 <NOR_WriteSector+0x3c>
 8008f2a:	2306      	movs	r3, #6
 8008f2c:	e01e      	b.n	8008f6c <NOR_WriteSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3301      	adds	r3, #1
 8008f32:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008f38:	461a      	mov	r2, r3
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	1a9b      	subs	r3, r3, r2
 8008f3e:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008f44:	461a      	mov	r2, r3
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d2f0      	bcs.n	8008f2e <NOR_WriteSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008f50:	461a      	mov	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	fb03 f302 	mul.w	r3, r3, r2
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	617b      	str	r3, [r7, #20]
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff ff5d 	bl	8008e24 <NOR_WriteBytes>
 8008f6a:	4603      	mov	r3, r0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <NOR_ReadBytes>:

	Address = (BlockAddr * nor->info.u32BlockSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_ReadBytes(nor_t *nor, uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead){
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
	uint8_t ReadCmd[5];
	uint32_t _BytesToRead;
	uint8_t *originalBuffer;
	uint32_t originalNumBytes;

	_SANITY_CHECK(nor);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <NOR_ReadBytes+0x18>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e05d      	b.n	8009048 <NOR_ReadBytes+0xd4>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f92:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d001      	beq.n	8008f9e <NOR_ReadBytes+0x2a>
 8008f9a:	2306      	movs	r3, #6
 8008f9c:	e054      	b.n	8009048 <NOR_ReadBytes+0xd4>

	if (NumByteToRead == 0){
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <NOR_ReadBytes+0x34>
		return NOR_INVALID_PARAMS;
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e04f      	b.n	8009048 <NOR_ReadBytes+0xd4>
	}
	// TODO check if Address is not grater than the Flash size

	originalBuffer = pBuffer;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	61fb      	str	r3, [r7, #28]
	originalNumBytes = NumByteToRead;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	61bb      	str	r3, [r7, #24]
	NOR_PRINTF("Reading %d bytes on the Address %08X.\n", (uint)NumByteToRead, (uint)ReadAddr);
	do{
		if (((ReadAddr%nor->info.u16PageSize)+NumByteToRead) > nor->info.u16PageSize){
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fbc:	fb02 f201 	mul.w	r2, r2, r1
 8008fc0:	1a9a      	subs	r2, r3, r2
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d903      	bls.n	8008fd6 <NOR_ReadBytes+0x62>
			_BytesToRead = nor->info.u16PageSize;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd4:	e001      	b.n	8008fda <NOR_ReadBytes+0x66>
		}
		else{
			_BytesToRead = NumByteToRead;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		ReadCmd[0] = NOR_READ_FAST_DATA;
 8008fda:	230b      	movs	r3, #11
 8008fdc:	743b      	strb	r3, [r7, #16]
		ReadCmd[1] = ((ReadAddr >> 16) & 0xFF);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	0c1b      	lsrs	r3, r3, #16
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	747b      	strb	r3, [r7, #17]
		ReadCmd[2] = ((ReadAddr >> 8) & 0xFF);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	0a1b      	lsrs	r3, r3, #8
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	74bb      	strb	r3, [r7, #18]
		ReadCmd[3] = ((ReadAddr) & 0xFF);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	74fb      	strb	r3, [r7, #19]
		ReadCmd[4] = 0x00;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	753b      	strb	r3, [r7, #20]
		_nor_cs_assert(nor);
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f7ff fcae 	bl	800895a <_nor_cs_assert>
		_nor_spi_tx(nor, ReadCmd, sizeof(ReadCmd));
 8008ffe:	f107 0310 	add.w	r3, r7, #16
 8009002:	2205      	movs	r2, #5
 8009004:	4619      	mov	r1, r3
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f7ff fcbd 	bl	8008986 <_nor_spi_tx>
		_nor_spi_rx(nor, pBuffer, _BytesToRead);
 800900c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f7ff fcc7 	bl	80089a4 <_nor_spi_rx>
		_nor_cs_deassert(nor);
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7ff fcaa 	bl	8008970 <_nor_cs_deassert>
		pBuffer += _BytesToRead;
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	4413      	add	r3, r2
 8009022:	60bb      	str	r3, [r7, #8]
		NumByteToRead -= _BytesToRead;
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	603b      	str	r3, [r7, #0]
	}while(NumByteToRead > 0);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1be      	bne.n	8008fb0 <NOR_ReadBytes+0x3c>

	NOR_PRINTF("Buffer readed from NOR:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < originalNumBytes; i++)
 8009032:	2300      	movs	r3, #0
 8009034:	623b      	str	r3, [r7, #32]
 8009036:	e002      	b.n	800903e <NOR_ReadBytes+0xca>
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	3301      	adds	r3, #1
 800903c:	623b      	str	r3, [r7, #32]
 800903e:	6a3a      	ldr	r2, [r7, #32]
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	429a      	cmp	r2, r3
 8009044:	d3f8      	bcc.n	8009038 <NOR_ReadBytes+0xc4>
		NOR_PRINTF("%02X ", originalBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	NOR_PRINTF("w25qxx ReadBytes done.\n");

	return NOR_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3728      	adds	r7, #40	; 0x28
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <NOR_ReadSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
}

nor_err_e NOR_ReadSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumByteToRead){
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <NOR_ReadSector+0x18>
 8009064:	2302      	movs	r3, #2
 8009066:	e027      	b.n	80090b8 <NOR_ReadSector+0x68>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800906e:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8009072:	4293      	cmp	r3, r2
 8009074:	d00a      	beq.n	800908c <NOR_ReadSector+0x3c>
 8009076:	2306      	movs	r3, #6
 8009078:	e01e      	b.n	80090b8 <NOR_ReadSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3301      	adds	r3, #1
 800907e:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009084:	461a      	mov	r2, r3
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	1a9b      	subs	r3, r3, r2
 800908a:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009090:	461a      	mov	r2, r3
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	4293      	cmp	r3, r2
 8009096:	d2f0      	bcs.n	800907a <NOR_ReadSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800909c:	461a      	mov	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	fb03 f302 	mul.w	r3, r3, r2
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	4413      	add	r3, r2
 80090a8:	617b      	str	r3, [r7, #20]
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f7ff ff5f 	bl	8008f74 <NOR_ReadBytes>
 80090b6:	4603      	mov	r3, r0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <NOR_IDS_Interpret_Manufacturer>:
 *      Author: pablo-jean
 */

#include "nor_ids.h"

nor_manuf_e NOR_IDS_Interpret_Manufacturer (uint32_t JedecID){
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	return (nor_manuf_e)(JedecID & 0xFF);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	b2db      	uxtb	r3, r3
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bc80      	pop	{r7}
 80090d4:	4770      	bx	lr

080090d6 <NOR_IDS_Interpret_Model>:

nor_model_e NOR_IDS_Interpret_Model (uint32_t JedecID){
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff ffee 	bl	80090c0 <NOR_IDS_Interpret_Manufacturer>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73fb      	strb	r3, [r7, #15]

	switch (Manuf){
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	2bef      	cmp	r3, #239	; 0xef
 80090ec:	d00e      	beq.n	800910c <NOR_IDS_Interpret_Model+0x36>
 80090ee:	2bef      	cmp	r3, #239	; 0xef
 80090f0:	dc03      	bgt.n	80090fa <NOR_IDS_Interpret_Model+0x24>
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	d00e      	beq.n	8009114 <NOR_IDS_Interpret_Model+0x3e>
 80090f6:	2bc2      	cmp	r3, #194	; 0xc2
 80090f8:	d002      	beq.n	8009100 <NOR_IDS_Interpret_Model+0x2a>
	case	MANUF_PUYA:
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		return NOR_MODEL_UNKNOWN;
 80090fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090fe:	e00a      	b.n	8009116 <NOR_IDS_Interpret_Model+0x40>
	case 	MANUF_MXIC:
		return ((JedecID >> 16) & 0xFF);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	0c1b      	lsrs	r3, r3, #16
 8009104:	b29b      	uxth	r3, r3
 8009106:	b2db      	uxtb	r3, r3
 8009108:	b29b      	uxth	r3, r3
 800910a:	e004      	b.n	8009116 <NOR_IDS_Interpret_Model+0x40>
		break;
	case	MANUF_WINBOND:
		return ((JedecID >> 8) & 0xFFFF);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	0a1b      	lsrs	r3, r3, #8
 8009110:	b29b      	uxth	r3, r3
 8009112:	e000      	b.n	8009116 <NOR_IDS_Interpret_Model+0x40>
		break;

	case    MANUF_MT25QL: return MANUF_MT25QL; break;
 8009114:	2320      	movs	r3, #32
	}
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <NOR_IDS_GetQtdBlocks>:

uint32_t NOR_IDS_GetQtdBlocks(uint32_t JedecID){
 800911e:	b580      	push	{r7, lr}
 8009120:	b086      	sub	sp, #24
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7ff ffca 	bl	80090c0 <NOR_IDS_Interpret_Manufacturer>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
	uint8_t density, i;
	uint32_t blocks;

	switch (Manuf){
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	2bef      	cmp	r3, #239	; 0xef
 8009134:	d008      	beq.n	8009148 <NOR_IDS_GetQtdBlocks+0x2a>
 8009136:	2bef      	cmp	r3, #239	; 0xef
 8009138:	dc03      	bgt.n	8009142 <NOR_IDS_GetQtdBlocks+0x24>
 800913a:	2b85      	cmp	r3, #133	; 0x85
 800913c:	d004      	beq.n	8009148 <NOR_IDS_GetQtdBlocks+0x2a>
 800913e:	2bc2      	cmp	r3, #194	; 0xc2
 8009140:	d002      	beq.n	8009148 <NOR_IDS_GetQtdBlocks+0x2a>
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		blocks = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	613b      	str	r3, [r7, #16]
		break;
 8009146:	e015      	b.n	8009174 <NOR_IDS_GetQtdBlocks+0x56>
	case	MANUF_PUYA:
	case 	MANUF_MXIC:
	case	MANUF_WINBOND:
		density = ((JedecID >> 16) & 0xFF);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	0c1b      	lsrs	r3, r3, #16
 800914c:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	3b11      	subs	r3, #17
 8009152:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 8009154:	2302      	movs	r3, #2
 8009156:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 8009158:	2300      	movs	r3, #0
 800915a:	75fb      	strb	r3, [r7, #23]
 800915c:	e005      	b.n	800916a <NOR_IDS_GetQtdBlocks+0x4c>
			blocks *= 2;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	3301      	adds	r3, #1
 8009168:	75fb      	strb	r3, [r7, #23]
 800916a:	7dfa      	ldrb	r2, [r7, #23]
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	429a      	cmp	r2, r3
 8009170:	d3f5      	bcc.n	800915e <NOR_IDS_GetQtdBlocks+0x40>
		}
		break;
 8009172:	bf00      	nop
	}

	return blocks;
 8009174:	693b      	ldr	r3, [r7, #16]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009186:	4b15      	ldr	r3, [pc, #84]	; (80091dc <HAL_MspInit+0x5c>)
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	4a14      	ldr	r2, [pc, #80]	; (80091dc <HAL_MspInit+0x5c>)
 800918c:	f043 0301 	orr.w	r3, r3, #1
 8009190:	6193      	str	r3, [r2, #24]
 8009192:	4b12      	ldr	r3, [pc, #72]	; (80091dc <HAL_MspInit+0x5c>)
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	60bb      	str	r3, [r7, #8]
 800919c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800919e:	4b0f      	ldr	r3, [pc, #60]	; (80091dc <HAL_MspInit+0x5c>)
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	4a0e      	ldr	r2, [pc, #56]	; (80091dc <HAL_MspInit+0x5c>)
 80091a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a8:	61d3      	str	r3, [r2, #28]
 80091aa:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <HAL_MspInit+0x5c>)
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091b2:	607b      	str	r3, [r7, #4]
 80091b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80091b6:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <HAL_MspInit+0x60>)
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	4a04      	ldr	r2, [pc, #16]	; (80091e0 <HAL_MspInit+0x60>)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80091d2:	bf00      	nop
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr
 80091dc:	40021000 	.word	0x40021000
 80091e0:	40010000 	.word	0x40010000

080091e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a0b      	ldr	r2, [pc, #44]	; (8009220 <HAL_RTC_MspInit+0x3c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d110      	bne.n	8009218 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80091f6:	f000 fff9 	bl	800a1ec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80091fa:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <HAL_RTC_MspInit+0x40>)
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	4a09      	ldr	r2, [pc, #36]	; (8009224 <HAL_RTC_MspInit+0x40>)
 8009200:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009204:	61d3      	str	r3, [r2, #28]
 8009206:	4b07      	ldr	r3, [pc, #28]	; (8009224 <HAL_RTC_MspInit+0x40>)
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009212:	4b05      	ldr	r3, [pc, #20]	; (8009228 <HAL_RTC_MspInit+0x44>)
 8009214:	2201      	movs	r2, #1
 8009216:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40002800 	.word	0x40002800
 8009224:	40021000 	.word	0x40021000
 8009228:	4242043c 	.word	0x4242043c

0800922c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08a      	sub	sp, #40	; 0x28
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009234:	f107 0318 	add.w	r3, r7, #24
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	605a      	str	r2, [r3, #4]
 800923e:	609a      	str	r2, [r3, #8]
 8009240:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a37      	ldr	r2, [pc, #220]	; (8009324 <HAL_SPI_MspInit+0xf8>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d130      	bne.n	80092ae <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800924c:	4b36      	ldr	r3, [pc, #216]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	4a35      	ldr	r2, [pc, #212]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 8009252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009256:	6193      	str	r3, [r2, #24]
 8009258:	4b33      	ldr	r3, [pc, #204]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009264:	4b30      	ldr	r3, [pc, #192]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	4a2f      	ldr	r2, [pc, #188]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 800926a:	f043 0304 	orr.w	r3, r3, #4
 800926e:	6193      	str	r3, [r2, #24]
 8009270:	4b2d      	ldr	r3, [pc, #180]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	613b      	str	r3, [r7, #16]
 800927a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800927c:	23a0      	movs	r3, #160	; 0xa0
 800927e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009280:	2302      	movs	r3, #2
 8009282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009284:	2303      	movs	r3, #3
 8009286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009288:	f107 0318 	add.w	r3, r7, #24
 800928c:	4619      	mov	r1, r3
 800928e:	4827      	ldr	r0, [pc, #156]	; (800932c <HAL_SPI_MspInit+0x100>)
 8009290:	f000 fe10 	bl	8009eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009294:	2340      	movs	r3, #64	; 0x40
 8009296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009298:	2300      	movs	r3, #0
 800929a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800929c:	2300      	movs	r3, #0
 800929e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092a0:	f107 0318 	add.w	r3, r7, #24
 80092a4:	4619      	mov	r1, r3
 80092a6:	4821      	ldr	r0, [pc, #132]	; (800932c <HAL_SPI_MspInit+0x100>)
 80092a8:	f000 fe04 	bl	8009eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80092ac:	e036      	b.n	800931c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a1f      	ldr	r2, [pc, #124]	; (8009330 <HAL_SPI_MspInit+0x104>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d131      	bne.n	800931c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80092b8:	4b1b      	ldr	r3, [pc, #108]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	4a1a      	ldr	r2, [pc, #104]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 80092be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092c2:	61d3      	str	r3, [r2, #28]
 80092c4:	4b18      	ldr	r3, [pc, #96]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092d0:	4b15      	ldr	r3, [pc, #84]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	4a14      	ldr	r2, [pc, #80]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 80092d6:	f043 0308 	orr.w	r3, r3, #8
 80092da:	6193      	str	r3, [r2, #24]
 80092dc:	4b12      	ldr	r3, [pc, #72]	; (8009328 <HAL_SPI_MspInit+0xfc>)
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	60bb      	str	r3, [r7, #8]
 80092e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80092e8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80092ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ee:	2302      	movs	r3, #2
 80092f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80092f2:	2303      	movs	r3, #3
 80092f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092f6:	f107 0318 	add.w	r3, r7, #24
 80092fa:	4619      	mov	r1, r3
 80092fc:	480d      	ldr	r0, [pc, #52]	; (8009334 <HAL_SPI_MspInit+0x108>)
 80092fe:	f000 fdd9 	bl	8009eb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8009302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009308:	2300      	movs	r3, #0
 800930a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800930c:	2300      	movs	r3, #0
 800930e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009310:	f107 0318 	add.w	r3, r7, #24
 8009314:	4619      	mov	r1, r3
 8009316:	4807      	ldr	r0, [pc, #28]	; (8009334 <HAL_SPI_MspInit+0x108>)
 8009318:	f000 fdcc 	bl	8009eb4 <HAL_GPIO_Init>
}
 800931c:	bf00      	nop
 800931e:	3728      	adds	r7, #40	; 0x28
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	40013000 	.word	0x40013000
 8009328:	40021000 	.word	0x40021000
 800932c:	40010800 	.word	0x40010800
 8009330:	40003800 	.word	0x40003800
 8009334:	40010c00 	.word	0x40010c00

08009338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009340:	f107 0318 	add.w	r3, r7, #24
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	609a      	str	r2, [r3, #8]
 800934c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a62      	ldr	r2, [pc, #392]	; (80094dc <HAL_UART_MspInit+0x1a4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d132      	bne.n	80093be <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009358:	4b61      	ldr	r3, [pc, #388]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	4a60      	ldr	r2, [pc, #384]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 800935e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009362:	6193      	str	r3, [r2, #24]
 8009364:	4b5e      	ldr	r3, [pc, #376]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009370:	4b5b      	ldr	r3, [pc, #364]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	4a5a      	ldr	r2, [pc, #360]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 8009376:	f043 0304 	orr.w	r3, r3, #4
 800937a:	6193      	str	r3, [r2, #24]
 800937c:	4b58      	ldr	r3, [pc, #352]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800938c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800938e:	2302      	movs	r3, #2
 8009390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009392:	2303      	movs	r3, #3
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009396:	f107 0318 	add.w	r3, r7, #24
 800939a:	4619      	mov	r1, r3
 800939c:	4851      	ldr	r0, [pc, #324]	; (80094e4 <HAL_UART_MspInit+0x1ac>)
 800939e:	f000 fd89 	bl	8009eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80093a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093a8:	2300      	movs	r3, #0
 80093aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093b0:	f107 0318 	add.w	r3, r7, #24
 80093b4:	4619      	mov	r1, r3
 80093b6:	484b      	ldr	r0, [pc, #300]	; (80094e4 <HAL_UART_MspInit+0x1ac>)
 80093b8:	f000 fd7c 	bl	8009eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80093bc:	e089      	b.n	80094d2 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a49      	ldr	r2, [pc, #292]	; (80094e8 <HAL_UART_MspInit+0x1b0>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	f040 8084 	bne.w	80094d2 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80093ca:	4b45      	ldr	r3, [pc, #276]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	4a44      	ldr	r2, [pc, #272]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 80093d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d4:	61d3      	str	r3, [r2, #28]
 80093d6:	4b42      	ldr	r3, [pc, #264]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093e2:	4b3f      	ldr	r3, [pc, #252]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	4a3e      	ldr	r2, [pc, #248]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 80093e8:	f043 0304 	orr.w	r3, r3, #4
 80093ec:	6193      	str	r3, [r2, #24]
 80093ee:	4b3c      	ldr	r3, [pc, #240]	; (80094e0 <HAL_UART_MspInit+0x1a8>)
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	60bb      	str	r3, [r7, #8]
 80093f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80093fa:	2304      	movs	r3, #4
 80093fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093fe:	2302      	movs	r3, #2
 8009400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009402:	2303      	movs	r3, #3
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009406:	f107 0318 	add.w	r3, r7, #24
 800940a:	4619      	mov	r1, r3
 800940c:	4835      	ldr	r0, [pc, #212]	; (80094e4 <HAL_UART_MspInit+0x1ac>)
 800940e:	f000 fd51 	bl	8009eb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009412:	2308      	movs	r3, #8
 8009414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009416:	2300      	movs	r3, #0
 8009418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800941a:	2300      	movs	r3, #0
 800941c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800941e:	f107 0318 	add.w	r3, r7, #24
 8009422:	4619      	mov	r1, r3
 8009424:	482f      	ldr	r0, [pc, #188]	; (80094e4 <HAL_UART_MspInit+0x1ac>)
 8009426:	f000 fd45 	bl	8009eb4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800942a:	4b30      	ldr	r3, [pc, #192]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 800942c:	4a30      	ldr	r2, [pc, #192]	; (80094f0 <HAL_UART_MspInit+0x1b8>)
 800942e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009430:	4b2e      	ldr	r3, [pc, #184]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 8009432:	2200      	movs	r2, #0
 8009434:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009436:	4b2d      	ldr	r3, [pc, #180]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 8009438:	2200      	movs	r2, #0
 800943a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800943c:	4b2b      	ldr	r3, [pc, #172]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 800943e:	2280      	movs	r2, #128	; 0x80
 8009440:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009442:	4b2a      	ldr	r3, [pc, #168]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 8009444:	2200      	movs	r2, #0
 8009446:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009448:	4b28      	ldr	r3, [pc, #160]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 800944a:	2200      	movs	r2, #0
 800944c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800944e:	4b27      	ldr	r3, [pc, #156]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 8009450:	2200      	movs	r2, #0
 8009452:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009454:	4b25      	ldr	r3, [pc, #148]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 8009456:	2200      	movs	r2, #0
 8009458:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800945a:	4824      	ldr	r0, [pc, #144]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 800945c:	f000 fb16 	bl	8009a8c <HAL_DMA_Init>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <HAL_UART_MspInit+0x132>
      Error_Handler();
 8009466:	f7ff fa73 	bl	8008950 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a1f      	ldr	r2, [pc, #124]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 800946e:	63da      	str	r2, [r3, #60]	; 0x3c
 8009470:	4a1e      	ldr	r2, [pc, #120]	; (80094ec <HAL_UART_MspInit+0x1b4>)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8009476:	4b1f      	ldr	r3, [pc, #124]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 8009478:	4a1f      	ldr	r2, [pc, #124]	; (80094f8 <HAL_UART_MspInit+0x1c0>)
 800947a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800947c:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 800947e:	2210      	movs	r2, #16
 8009480:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 8009484:	2200      	movs	r2, #0
 8009486:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009488:	4b1a      	ldr	r3, [pc, #104]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 800948a:	2280      	movs	r2, #128	; 0x80
 800948c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800948e:	4b19      	ldr	r3, [pc, #100]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 8009490:	2200      	movs	r2, #0
 8009492:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009494:	4b17      	ldr	r3, [pc, #92]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 8009496:	2200      	movs	r2, #0
 8009498:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800949a:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 800949c:	2200      	movs	r2, #0
 800949e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80094a0:	4b14      	ldr	r3, [pc, #80]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80094a6:	4813      	ldr	r0, [pc, #76]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 80094a8:	f000 faf0 	bl	8009a8c <HAL_DMA_Init>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 80094b2:	f7ff fa4d 	bl	8008950 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a0e      	ldr	r2, [pc, #56]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
 80094bc:	4a0d      	ldr	r2, [pc, #52]	; (80094f4 <HAL_UART_MspInit+0x1bc>)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80094c2:	2200      	movs	r2, #0
 80094c4:	2100      	movs	r1, #0
 80094c6:	2026      	movs	r0, #38	; 0x26
 80094c8:	f000 faa9 	bl	8009a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80094cc:	2026      	movs	r0, #38	; 0x26
 80094ce:	f000 fac2 	bl	8009a56 <HAL_NVIC_EnableIRQ>
}
 80094d2:	bf00      	nop
 80094d4:	3728      	adds	r7, #40	; 0x28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	40013800 	.word	0x40013800
 80094e0:	40021000 	.word	0x40021000
 80094e4:	40010800 	.word	0x40010800
 80094e8:	40004400 	.word	0x40004400
 80094ec:	200002b0 	.word	0x200002b0
 80094f0:	4002006c 	.word	0x4002006c
 80094f4:	200003a0 	.word	0x200003a0
 80094f8:	40020080 	.word	0x40020080

080094fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8009500:	f001 fa7c 	bl	800a9fc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009504:	e7fe      	b.n	8009504 <NMI_Handler+0x8>

08009506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009506:	b480      	push	{r7}
 8009508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800950a:	e7fe      	b.n	800950a <HardFault_Handler+0x4>

0800950c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009510:	e7fe      	b.n	8009510 <MemManage_Handler+0x4>

08009512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009512:	b480      	push	{r7}
 8009514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009516:	e7fe      	b.n	8009516 <BusFault_Handler+0x4>

08009518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009518:	b480      	push	{r7}
 800951a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800951c:	e7fe      	b.n	800951c <UsageFault_Handler+0x4>

0800951e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800951e:	b480      	push	{r7}
 8009520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009522:	bf00      	nop
 8009524:	46bd      	mov	sp, r7
 8009526:	bc80      	pop	{r7}
 8009528:	4770      	bx	lr

0800952a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800952a:	b480      	push	{r7}
 800952c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800952e:	bf00      	nop
 8009530:	46bd      	mov	sp, r7
 8009532:	bc80      	pop	{r7}
 8009534:	4770      	bx	lr

08009536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009536:	b480      	push	{r7}
 8009538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800953a:	bf00      	nop
 800953c:	46bd      	mov	sp, r7
 800953e:	bc80      	pop	{r7}
 8009540:	4770      	bx	lr

08009542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009546:	f000 f953 	bl	80097f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800954a:	bf00      	nop
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009554:	4802      	ldr	r0, [pc, #8]	; (8009560 <DMA1_Channel6_IRQHandler+0x10>)
 8009556:	f000 fba7 	bl	8009ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800955a:	bf00      	nop
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	200002b0 	.word	0x200002b0

08009564 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009568:	4802      	ldr	r0, [pc, #8]	; (8009574 <DMA1_Channel7_IRQHandler+0x10>)
 800956a:	f000 fb9d 	bl	8009ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800956e:	bf00      	nop
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	200003a0 	.word	0x200003a0

08009578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800957c:	4802      	ldr	r0, [pc, #8]	; (8009588 <USART2_IRQHandler+0x10>)
 800957e:	f002 fb45 	bl	800bc0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009582:	bf00      	nop
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000680 	.word	0x20000680

0800958c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
	return 1;
 8009590:	2301      	movs	r3, #1
}
 8009592:	4618      	mov	r0, r3
 8009594:	46bd      	mov	sp, r7
 8009596:	bc80      	pop	{r7}
 8009598:	4770      	bx	lr

0800959a <_kill>:

int _kill(int pid, int sig)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80095a4:	f003 f8a0 	bl	800c6e8 <__errno>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2216      	movs	r2, #22
 80095ac:	601a      	str	r2, [r3, #0]
	return -1;
 80095ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <_exit>:

void _exit (int status)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80095c2:	f04f 31ff 	mov.w	r1, #4294967295
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff ffe7 	bl	800959a <_kill>
	while (1) {}		/* Make sure we hang here */
 80095cc:	e7fe      	b.n	80095cc <_exit+0x12>

080095ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b086      	sub	sp, #24
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	e00a      	b.n	80095f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80095e0:	f3af 8000 	nop.w
 80095e4:	4601      	mov	r1, r0
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	60ba      	str	r2, [r7, #8]
 80095ec:	b2ca      	uxtb	r2, r1
 80095ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	3301      	adds	r3, #1
 80095f4:	617b      	str	r3, [r7, #20]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	dbf0      	blt.n	80095e0 <_read+0x12>
	}

return len;
 80095fe:	687b      	ldr	r3, [r7, #4]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009614:	2300      	movs	r3, #0
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	e009      	b.n	800962e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	1c5a      	adds	r2, r3, #1
 800961e:	60ba      	str	r2, [r7, #8]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	4618      	mov	r0, r3
 8009624:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	3301      	adds	r3, #1
 800962c:	617b      	str	r3, [r7, #20]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	429a      	cmp	r2, r3
 8009634:	dbf1      	blt.n	800961a <_write+0x12>
	}
	return len;
 8009636:	687b      	ldr	r3, [r7, #4]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <_close>:

int _close(int file)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
	return -1;
 8009648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr

08009656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009666:	605a      	str	r2, [r3, #4]
	return 0;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	bc80      	pop	{r7}
 8009672:	4770      	bx	lr

08009674 <_isatty>:

int _isatty(int file)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
	return 1;
 800967c:	2301      	movs	r3, #1
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr

08009688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
	return 0;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr

080096a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80096a8:	4a14      	ldr	r2, [pc, #80]	; (80096fc <_sbrk+0x5c>)
 80096aa:	4b15      	ldr	r3, [pc, #84]	; (8009700 <_sbrk+0x60>)
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80096b4:	4b13      	ldr	r3, [pc, #76]	; (8009704 <_sbrk+0x64>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d102      	bne.n	80096c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80096bc:	4b11      	ldr	r3, [pc, #68]	; (8009704 <_sbrk+0x64>)
 80096be:	4a12      	ldr	r2, [pc, #72]	; (8009708 <_sbrk+0x68>)
 80096c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80096c2:	4b10      	ldr	r3, [pc, #64]	; (8009704 <_sbrk+0x64>)
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4413      	add	r3, r2
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d207      	bcs.n	80096e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80096d0:	f003 f80a 	bl	800c6e8 <__errno>
 80096d4:	4603      	mov	r3, r0
 80096d6:	220c      	movs	r2, #12
 80096d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80096da:	f04f 33ff 	mov.w	r3, #4294967295
 80096de:	e009      	b.n	80096f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <_sbrk+0x64>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80096e6:	4b07      	ldr	r3, [pc, #28]	; (8009704 <_sbrk+0x64>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4413      	add	r3, r2
 80096ee:	4a05      	ldr	r2, [pc, #20]	; (8009704 <_sbrk+0x64>)
 80096f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80096f2:	68fb      	ldr	r3, [r7, #12]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	20005000 	.word	0x20005000
 8009700:	00000400 	.word	0x00000400
 8009704:	200002a0 	.word	0x200002a0
 8009708:	20000780 	.word	0x20000780

0800970c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009710:	bf00      	nop
 8009712:	46bd      	mov	sp, r7
 8009714:	bc80      	pop	{r7}
 8009716:	4770      	bx	lr

08009718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009718:	f7ff fff8 	bl	800970c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800971c:	480b      	ldr	r0, [pc, #44]	; (800974c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800971e:	490c      	ldr	r1, [pc, #48]	; (8009750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8009720:	4a0c      	ldr	r2, [pc, #48]	; (8009754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8009722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009724:	e002      	b.n	800972c <LoopCopyDataInit>

08009726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800972a:	3304      	adds	r3, #4

0800972c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800972c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800972e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009730:	d3f9      	bcc.n	8009726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009732:	4a09      	ldr	r2, [pc, #36]	; (8009758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8009734:	4c09      	ldr	r4, [pc, #36]	; (800975c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009738:	e001      	b.n	800973e <LoopFillZerobss>

0800973a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800973a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800973c:	3204      	adds	r2, #4

0800973e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800973e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009740:	d3fb      	bcc.n	800973a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009742:	f002 ffe9 	bl	800c718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009746:	f7fe fe7f 	bl	8008448 <main>
  bx lr
 800974a:	4770      	bx	lr
  ldr r0, =_sdata
 800974c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009750:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8009754:	080124dc 	.word	0x080124dc
  ldr r2, =_sbss
 8009758:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800975c:	20000780 	.word	0x20000780

08009760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009760:	e7fe      	b.n	8009760 <ADC1_2_IRQHandler>
	...

08009764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009768:	4b08      	ldr	r3, [pc, #32]	; (800978c <HAL_Init+0x28>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a07      	ldr	r2, [pc, #28]	; (800978c <HAL_Init+0x28>)
 800976e:	f043 0310 	orr.w	r3, r3, #16
 8009772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009774:	2003      	movs	r0, #3
 8009776:	f000 f947 	bl	8009a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800977a:	200f      	movs	r0, #15
 800977c:	f000 f808 	bl	8009790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009780:	f7ff fcfe 	bl	8009180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	40022000 	.word	0x40022000

08009790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009798:	4b12      	ldr	r3, [pc, #72]	; (80097e4 <HAL_InitTick+0x54>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	4b12      	ldr	r3, [pc, #72]	; (80097e8 <HAL_InitTick+0x58>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	4619      	mov	r1, r3
 80097a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80097aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f95f 	bl	8009a72 <HAL_SYSTICK_Config>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e00e      	b.n	80097dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b0f      	cmp	r3, #15
 80097c2:	d80a      	bhi.n	80097da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80097c4:	2200      	movs	r2, #0
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	f04f 30ff 	mov.w	r0, #4294967295
 80097cc:	f000 f927 	bl	8009a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80097d0:	4a06      	ldr	r2, [pc, #24]	; (80097ec <HAL_InitTick+0x5c>)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e000      	b.n	80097dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000000 	.word	0x20000000
 80097e8:	20000008 	.word	0x20000008
 80097ec:	20000004 	.word	0x20000004

080097f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80097f0:	b480      	push	{r7}
 80097f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <HAL_IncTick+0x1c>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	461a      	mov	r2, r3
 80097fa:	4b05      	ldr	r3, [pc, #20]	; (8009810 <HAL_IncTick+0x20>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4413      	add	r3, r2
 8009800:	4a03      	ldr	r2, [pc, #12]	; (8009810 <HAL_IncTick+0x20>)
 8009802:	6013      	str	r3, [r2, #0]
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr
 800980c:	20000008 	.word	0x20000008
 8009810:	2000076c 	.word	0x2000076c

08009814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009814:	b480      	push	{r7}
 8009816:	af00      	add	r7, sp, #0
  return uwTick;
 8009818:	4b02      	ldr	r3, [pc, #8]	; (8009824 <HAL_GetTick+0x10>)
 800981a:	681b      	ldr	r3, [r3, #0]
}
 800981c:	4618      	mov	r0, r3
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr
 8009824:	2000076c 	.word	0x2000076c

08009828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009830:	f7ff fff0 	bl	8009814 <HAL_GetTick>
 8009834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009840:	d005      	beq.n	800984e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009842:	4b0a      	ldr	r3, [pc, #40]	; (800986c <HAL_Delay+0x44>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800984e:	bf00      	nop
 8009850:	f7ff ffe0 	bl	8009814 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	429a      	cmp	r2, r3
 800985e:	d8f7      	bhi.n	8009850 <HAL_Delay+0x28>
  {
  }
}
 8009860:	bf00      	nop
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20000008 	.word	0x20000008

08009870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f003 0307 	and.w	r3, r3, #7
 800987e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009880:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <__NVIC_SetPriorityGrouping+0x44>)
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800988c:	4013      	ands	r3, r2
 800988e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800989c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80098a2:	4a04      	ldr	r2, [pc, #16]	; (80098b4 <__NVIC_SetPriorityGrouping+0x44>)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	60d3      	str	r3, [r2, #12]
}
 80098a8:	bf00      	nop
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bc80      	pop	{r7}
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	e000ed00 	.word	0xe000ed00

080098b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80098b8:	b480      	push	{r7}
 80098ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80098bc:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <__NVIC_GetPriorityGrouping+0x18>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	0a1b      	lsrs	r3, r3, #8
 80098c2:	f003 0307 	and.w	r3, r3, #7
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bc80      	pop	{r7}
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	e000ed00 	.word	0xe000ed00

080098d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	db0b      	blt.n	80098fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	f003 021f 	and.w	r2, r3, #31
 80098ec:	4906      	ldr	r1, [pc, #24]	; (8009908 <__NVIC_EnableIRQ+0x34>)
 80098ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098f2:	095b      	lsrs	r3, r3, #5
 80098f4:	2001      	movs	r0, #1
 80098f6:	fa00 f202 	lsl.w	r2, r0, r2
 80098fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80098fe:	bf00      	nop
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	bc80      	pop	{r7}
 8009906:	4770      	bx	lr
 8009908:	e000e100 	.word	0xe000e100

0800990c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	6039      	str	r1, [r7, #0]
 8009916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800991c:	2b00      	cmp	r3, #0
 800991e:	db0a      	blt.n	8009936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	b2da      	uxtb	r2, r3
 8009924:	490c      	ldr	r1, [pc, #48]	; (8009958 <__NVIC_SetPriority+0x4c>)
 8009926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800992a:	0112      	lsls	r2, r2, #4
 800992c:	b2d2      	uxtb	r2, r2
 800992e:	440b      	add	r3, r1
 8009930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009934:	e00a      	b.n	800994c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	b2da      	uxtb	r2, r3
 800993a:	4908      	ldr	r1, [pc, #32]	; (800995c <__NVIC_SetPriority+0x50>)
 800993c:	79fb      	ldrb	r3, [r7, #7]
 800993e:	f003 030f 	and.w	r3, r3, #15
 8009942:	3b04      	subs	r3, #4
 8009944:	0112      	lsls	r2, r2, #4
 8009946:	b2d2      	uxtb	r2, r2
 8009948:	440b      	add	r3, r1
 800994a:	761a      	strb	r2, [r3, #24]
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	bc80      	pop	{r7}
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	e000e100 	.word	0xe000e100
 800995c:	e000ed00 	.word	0xe000ed00

08009960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009960:	b480      	push	{r7}
 8009962:	b089      	sub	sp, #36	; 0x24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f003 0307 	and.w	r3, r3, #7
 8009972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	f1c3 0307 	rsb	r3, r3, #7
 800997a:	2b04      	cmp	r3, #4
 800997c:	bf28      	it	cs
 800997e:	2304      	movcs	r3, #4
 8009980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	3304      	adds	r3, #4
 8009986:	2b06      	cmp	r3, #6
 8009988:	d902      	bls.n	8009990 <NVIC_EncodePriority+0x30>
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	3b03      	subs	r3, #3
 800998e:	e000      	b.n	8009992 <NVIC_EncodePriority+0x32>
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009994:	f04f 32ff 	mov.w	r2, #4294967295
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	fa02 f303 	lsl.w	r3, r2, r3
 800999e:	43da      	mvns	r2, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	401a      	ands	r2, r3
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099a8:	f04f 31ff 	mov.w	r1, #4294967295
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	fa01 f303 	lsl.w	r3, r1, r3
 80099b2:	43d9      	mvns	r1, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099b8:	4313      	orrs	r3, r2
         );
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3724      	adds	r7, #36	; 0x24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bc80      	pop	{r7}
 80099c2:	4770      	bx	lr

080099c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099d4:	d301      	bcc.n	80099da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80099d6:	2301      	movs	r3, #1
 80099d8:	e00f      	b.n	80099fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099da:	4a0a      	ldr	r2, [pc, #40]	; (8009a04 <SysTick_Config+0x40>)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3b01      	subs	r3, #1
 80099e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099e2:	210f      	movs	r1, #15
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	f7ff ff90 	bl	800990c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <SysTick_Config+0x40>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099f2:	4b04      	ldr	r3, [pc, #16]	; (8009a04 <SysTick_Config+0x40>)
 80099f4:	2207      	movs	r2, #7
 80099f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	e000e010 	.word	0xe000e010

08009a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7ff ff2d 	bl	8009870 <__NVIC_SetPriorityGrouping>
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b086      	sub	sp, #24
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	4603      	mov	r3, r0
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a30:	f7ff ff42 	bl	80098b8 <__NVIC_GetPriorityGrouping>
 8009a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	6978      	ldr	r0, [r7, #20]
 8009a3c:	f7ff ff90 	bl	8009960 <NVIC_EncodePriority>
 8009a40:	4602      	mov	r2, r0
 8009a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a46:	4611      	mov	r1, r2
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff ff5f 	bl	800990c <__NVIC_SetPriority>
}
 8009a4e:	bf00      	nop
 8009a50:	3718      	adds	r7, #24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff ff35 	bl	80098d4 <__NVIC_EnableIRQ>
}
 8009a6a:	bf00      	nop
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff ffa2 	bl	80099c4 <SysTick_Config>
 8009a80:	4603      	mov	r3, r0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e043      	b.n	8009b2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	4b22      	ldr	r3, [pc, #136]	; (8009b34 <HAL_DMA_Init+0xa8>)
 8009aaa:	4413      	add	r3, r2
 8009aac:	4a22      	ldr	r2, [pc, #136]	; (8009b38 <HAL_DMA_Init+0xac>)
 8009aae:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab2:	091b      	lsrs	r3, r3, #4
 8009ab4:	009a      	lsls	r2, r3, #2
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a1f      	ldr	r2, [pc, #124]	; (8009b3c <HAL_DMA_Init+0xb0>)
 8009abe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009ad6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009ada:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bc80      	pop	{r7}
 8009b32:	4770      	bx	lr
 8009b34:	bffdfff8 	.word	0xbffdfff8
 8009b38:	cccccccd 	.word	0xcccccccd
 8009b3c:	40020000 	.word	0x40020000

08009b40 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d008      	beq.n	8009b6a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2204      	movs	r2, #4
 8009b5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e020      	b.n	8009bac <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 020e 	bic.w	r2, r2, #14
 8009b78:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 0201 	bic.w	r2, r2, #1
 8009b88:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b92:	2101      	movs	r1, #1
 8009b94:	fa01 f202 	lsl.w	r2, r1, r2
 8009b98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bc80      	pop	{r7}
 8009bb4:	4770      	bx	lr
	...

08009bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d005      	beq.n	8009bdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2204      	movs	r2, #4
 8009bd4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	73fb      	strb	r3, [r7, #15]
 8009bda:	e051      	b.n	8009c80 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 020e 	bic.w	r2, r2, #14
 8009bea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 0201 	bic.w	r2, r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a22      	ldr	r2, [pc, #136]	; (8009c8c <HAL_DMA_Abort_IT+0xd4>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d029      	beq.n	8009c5a <HAL_DMA_Abort_IT+0xa2>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a21      	ldr	r2, [pc, #132]	; (8009c90 <HAL_DMA_Abort_IT+0xd8>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d022      	beq.n	8009c56 <HAL_DMA_Abort_IT+0x9e>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a1f      	ldr	r2, [pc, #124]	; (8009c94 <HAL_DMA_Abort_IT+0xdc>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d01a      	beq.n	8009c50 <HAL_DMA_Abort_IT+0x98>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a1e      	ldr	r2, [pc, #120]	; (8009c98 <HAL_DMA_Abort_IT+0xe0>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d012      	beq.n	8009c4a <HAL_DMA_Abort_IT+0x92>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a1c      	ldr	r2, [pc, #112]	; (8009c9c <HAL_DMA_Abort_IT+0xe4>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00a      	beq.n	8009c44 <HAL_DMA_Abort_IT+0x8c>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a1b      	ldr	r2, [pc, #108]	; (8009ca0 <HAL_DMA_Abort_IT+0xe8>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d102      	bne.n	8009c3e <HAL_DMA_Abort_IT+0x86>
 8009c38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009c3c:	e00e      	b.n	8009c5c <HAL_DMA_Abort_IT+0xa4>
 8009c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c42:	e00b      	b.n	8009c5c <HAL_DMA_Abort_IT+0xa4>
 8009c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c48:	e008      	b.n	8009c5c <HAL_DMA_Abort_IT+0xa4>
 8009c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c4e:	e005      	b.n	8009c5c <HAL_DMA_Abort_IT+0xa4>
 8009c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c54:	e002      	b.n	8009c5c <HAL_DMA_Abort_IT+0xa4>
 8009c56:	2310      	movs	r3, #16
 8009c58:	e000      	b.n	8009c5c <HAL_DMA_Abort_IT+0xa4>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	4a11      	ldr	r2, [pc, #68]	; (8009ca4 <HAL_DMA_Abort_IT+0xec>)
 8009c5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
    } 
  }
  return status;
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40020008 	.word	0x40020008
 8009c90:	4002001c 	.word	0x4002001c
 8009c94:	40020030 	.word	0x40020030
 8009c98:	40020044 	.word	0x40020044
 8009c9c:	40020058 	.word	0x40020058
 8009ca0:	4002006c 	.word	0x4002006c
 8009ca4:	40020000 	.word	0x40020000

08009ca8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc4:	2204      	movs	r2, #4
 8009cc6:	409a      	lsls	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d04f      	beq.n	8009d70 <HAL_DMA_IRQHandler+0xc8>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f003 0304 	and.w	r3, r3, #4
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d04a      	beq.n	8009d70 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0320 	and.w	r3, r3, #32
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d107      	bne.n	8009cf8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f022 0204 	bic.w	r2, r2, #4
 8009cf6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a66      	ldr	r2, [pc, #408]	; (8009e98 <HAL_DMA_IRQHandler+0x1f0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d029      	beq.n	8009d56 <HAL_DMA_IRQHandler+0xae>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a65      	ldr	r2, [pc, #404]	; (8009e9c <HAL_DMA_IRQHandler+0x1f4>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d022      	beq.n	8009d52 <HAL_DMA_IRQHandler+0xaa>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a63      	ldr	r2, [pc, #396]	; (8009ea0 <HAL_DMA_IRQHandler+0x1f8>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d01a      	beq.n	8009d4c <HAL_DMA_IRQHandler+0xa4>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a62      	ldr	r2, [pc, #392]	; (8009ea4 <HAL_DMA_IRQHandler+0x1fc>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d012      	beq.n	8009d46 <HAL_DMA_IRQHandler+0x9e>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a60      	ldr	r2, [pc, #384]	; (8009ea8 <HAL_DMA_IRQHandler+0x200>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d00a      	beq.n	8009d40 <HAL_DMA_IRQHandler+0x98>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a5f      	ldr	r2, [pc, #380]	; (8009eac <HAL_DMA_IRQHandler+0x204>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d102      	bne.n	8009d3a <HAL_DMA_IRQHandler+0x92>
 8009d34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d38:	e00e      	b.n	8009d58 <HAL_DMA_IRQHandler+0xb0>
 8009d3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d3e:	e00b      	b.n	8009d58 <HAL_DMA_IRQHandler+0xb0>
 8009d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d44:	e008      	b.n	8009d58 <HAL_DMA_IRQHandler+0xb0>
 8009d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d4a:	e005      	b.n	8009d58 <HAL_DMA_IRQHandler+0xb0>
 8009d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d50:	e002      	b.n	8009d58 <HAL_DMA_IRQHandler+0xb0>
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	e000      	b.n	8009d58 <HAL_DMA_IRQHandler+0xb0>
 8009d56:	2304      	movs	r3, #4
 8009d58:	4a55      	ldr	r2, [pc, #340]	; (8009eb0 <HAL_DMA_IRQHandler+0x208>)
 8009d5a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 8094 	beq.w	8009e8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8009d6e:	e08e      	b.n	8009e8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d74:	2202      	movs	r2, #2
 8009d76:	409a      	lsls	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d056      	beq.n	8009e2e <HAL_DMA_IRQHandler+0x186>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d051      	beq.n	8009e2e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0320 	and.w	r3, r3, #32
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10b      	bne.n	8009db0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f022 020a 	bic.w	r2, r2, #10
 8009da6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a38      	ldr	r2, [pc, #224]	; (8009e98 <HAL_DMA_IRQHandler+0x1f0>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d029      	beq.n	8009e0e <HAL_DMA_IRQHandler+0x166>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a37      	ldr	r2, [pc, #220]	; (8009e9c <HAL_DMA_IRQHandler+0x1f4>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d022      	beq.n	8009e0a <HAL_DMA_IRQHandler+0x162>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a35      	ldr	r2, [pc, #212]	; (8009ea0 <HAL_DMA_IRQHandler+0x1f8>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d01a      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x15c>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a34      	ldr	r2, [pc, #208]	; (8009ea4 <HAL_DMA_IRQHandler+0x1fc>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d012      	beq.n	8009dfe <HAL_DMA_IRQHandler+0x156>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a32      	ldr	r2, [pc, #200]	; (8009ea8 <HAL_DMA_IRQHandler+0x200>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00a      	beq.n	8009df8 <HAL_DMA_IRQHandler+0x150>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a31      	ldr	r2, [pc, #196]	; (8009eac <HAL_DMA_IRQHandler+0x204>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d102      	bne.n	8009df2 <HAL_DMA_IRQHandler+0x14a>
 8009dec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009df0:	e00e      	b.n	8009e10 <HAL_DMA_IRQHandler+0x168>
 8009df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009df6:	e00b      	b.n	8009e10 <HAL_DMA_IRQHandler+0x168>
 8009df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009dfc:	e008      	b.n	8009e10 <HAL_DMA_IRQHandler+0x168>
 8009dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e02:	e005      	b.n	8009e10 <HAL_DMA_IRQHandler+0x168>
 8009e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e08:	e002      	b.n	8009e10 <HAL_DMA_IRQHandler+0x168>
 8009e0a:	2320      	movs	r3, #32
 8009e0c:	e000      	b.n	8009e10 <HAL_DMA_IRQHandler+0x168>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	4a27      	ldr	r2, [pc, #156]	; (8009eb0 <HAL_DMA_IRQHandler+0x208>)
 8009e12:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d034      	beq.n	8009e8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009e2c:	e02f      	b.n	8009e8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	2208      	movs	r2, #8
 8009e34:	409a      	lsls	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4013      	ands	r3, r2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d028      	beq.n	8009e90 <HAL_DMA_IRQHandler+0x1e8>
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f003 0308 	and.w	r3, r3, #8
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d023      	beq.n	8009e90 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 020e 	bic.w	r2, r2, #14
 8009e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e60:	2101      	movs	r1, #1
 8009e62:	fa01 f202 	lsl.w	r2, r1, r2
 8009e66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d004      	beq.n	8009e90 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4798      	blx	r3
    }
  }
  return;
 8009e8e:	bf00      	nop
 8009e90:	bf00      	nop
}
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	40020008 	.word	0x40020008
 8009e9c:	4002001c 	.word	0x4002001c
 8009ea0:	40020030 	.word	0x40020030
 8009ea4:	40020044 	.word	0x40020044
 8009ea8:	40020058 	.word	0x40020058
 8009eac:	4002006c 	.word	0x4002006c
 8009eb0:	40020000 	.word	0x40020000

08009eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b08b      	sub	sp, #44	; 0x2c
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ec6:	e169      	b.n	800a19c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009ec8:	2201      	movs	r2, #1
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	69fa      	ldr	r2, [r7, #28]
 8009ed8:	4013      	ands	r3, r2
 8009eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009edc:	69ba      	ldr	r2, [r7, #24]
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	f040 8158 	bne.w	800a196 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	4a9a      	ldr	r2, [pc, #616]	; (800a154 <HAL_GPIO_Init+0x2a0>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d05e      	beq.n	8009fae <HAL_GPIO_Init+0xfa>
 8009ef0:	4a98      	ldr	r2, [pc, #608]	; (800a154 <HAL_GPIO_Init+0x2a0>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d875      	bhi.n	8009fe2 <HAL_GPIO_Init+0x12e>
 8009ef6:	4a98      	ldr	r2, [pc, #608]	; (800a158 <HAL_GPIO_Init+0x2a4>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d058      	beq.n	8009fae <HAL_GPIO_Init+0xfa>
 8009efc:	4a96      	ldr	r2, [pc, #600]	; (800a158 <HAL_GPIO_Init+0x2a4>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d86f      	bhi.n	8009fe2 <HAL_GPIO_Init+0x12e>
 8009f02:	4a96      	ldr	r2, [pc, #600]	; (800a15c <HAL_GPIO_Init+0x2a8>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d052      	beq.n	8009fae <HAL_GPIO_Init+0xfa>
 8009f08:	4a94      	ldr	r2, [pc, #592]	; (800a15c <HAL_GPIO_Init+0x2a8>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d869      	bhi.n	8009fe2 <HAL_GPIO_Init+0x12e>
 8009f0e:	4a94      	ldr	r2, [pc, #592]	; (800a160 <HAL_GPIO_Init+0x2ac>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d04c      	beq.n	8009fae <HAL_GPIO_Init+0xfa>
 8009f14:	4a92      	ldr	r2, [pc, #584]	; (800a160 <HAL_GPIO_Init+0x2ac>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d863      	bhi.n	8009fe2 <HAL_GPIO_Init+0x12e>
 8009f1a:	4a92      	ldr	r2, [pc, #584]	; (800a164 <HAL_GPIO_Init+0x2b0>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d046      	beq.n	8009fae <HAL_GPIO_Init+0xfa>
 8009f20:	4a90      	ldr	r2, [pc, #576]	; (800a164 <HAL_GPIO_Init+0x2b0>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d85d      	bhi.n	8009fe2 <HAL_GPIO_Init+0x12e>
 8009f26:	2b12      	cmp	r3, #18
 8009f28:	d82a      	bhi.n	8009f80 <HAL_GPIO_Init+0xcc>
 8009f2a:	2b12      	cmp	r3, #18
 8009f2c:	d859      	bhi.n	8009fe2 <HAL_GPIO_Init+0x12e>
 8009f2e:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <HAL_GPIO_Init+0x80>)
 8009f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f34:	08009faf 	.word	0x08009faf
 8009f38:	08009f89 	.word	0x08009f89
 8009f3c:	08009f9b 	.word	0x08009f9b
 8009f40:	08009fdd 	.word	0x08009fdd
 8009f44:	08009fe3 	.word	0x08009fe3
 8009f48:	08009fe3 	.word	0x08009fe3
 8009f4c:	08009fe3 	.word	0x08009fe3
 8009f50:	08009fe3 	.word	0x08009fe3
 8009f54:	08009fe3 	.word	0x08009fe3
 8009f58:	08009fe3 	.word	0x08009fe3
 8009f5c:	08009fe3 	.word	0x08009fe3
 8009f60:	08009fe3 	.word	0x08009fe3
 8009f64:	08009fe3 	.word	0x08009fe3
 8009f68:	08009fe3 	.word	0x08009fe3
 8009f6c:	08009fe3 	.word	0x08009fe3
 8009f70:	08009fe3 	.word	0x08009fe3
 8009f74:	08009fe3 	.word	0x08009fe3
 8009f78:	08009f91 	.word	0x08009f91
 8009f7c:	08009fa5 	.word	0x08009fa5
 8009f80:	4a79      	ldr	r2, [pc, #484]	; (800a168 <HAL_GPIO_Init+0x2b4>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d013      	beq.n	8009fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009f86:	e02c      	b.n	8009fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	623b      	str	r3, [r7, #32]
          break;
 8009f8e:	e029      	b.n	8009fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	3304      	adds	r3, #4
 8009f96:	623b      	str	r3, [r7, #32]
          break;
 8009f98:	e024      	b.n	8009fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	623b      	str	r3, [r7, #32]
          break;
 8009fa2:	e01f      	b.n	8009fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	330c      	adds	r3, #12
 8009faa:	623b      	str	r3, [r7, #32]
          break;
 8009fac:	e01a      	b.n	8009fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009fb6:	2304      	movs	r3, #4
 8009fb8:	623b      	str	r3, [r7, #32]
          break;
 8009fba:	e013      	b.n	8009fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d105      	bne.n	8009fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009fc4:	2308      	movs	r3, #8
 8009fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	69fa      	ldr	r2, [r7, #28]
 8009fcc:	611a      	str	r2, [r3, #16]
          break;
 8009fce:	e009      	b.n	8009fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009fd0:	2308      	movs	r3, #8
 8009fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	69fa      	ldr	r2, [r7, #28]
 8009fd8:	615a      	str	r2, [r3, #20]
          break;
 8009fda:	e003      	b.n	8009fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	623b      	str	r3, [r7, #32]
          break;
 8009fe0:	e000      	b.n	8009fe4 <HAL_GPIO_Init+0x130>
          break;
 8009fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	2bff      	cmp	r3, #255	; 0xff
 8009fe8:	d801      	bhi.n	8009fee <HAL_GPIO_Init+0x13a>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	e001      	b.n	8009ff2 <HAL_GPIO_Init+0x13e>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	2bff      	cmp	r3, #255	; 0xff
 8009ff8:	d802      	bhi.n	800a000 <HAL_GPIO_Init+0x14c>
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	e002      	b.n	800a006 <HAL_GPIO_Init+0x152>
 800a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a002:	3b08      	subs	r3, #8
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	210f      	movs	r1, #15
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	fa01 f303 	lsl.w	r3, r1, r3
 800a014:	43db      	mvns	r3, r3
 800a016:	401a      	ands	r2, r3
 800a018:	6a39      	ldr	r1, [r7, #32]
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	fa01 f303 	lsl.w	r3, r1, r3
 800a020:	431a      	orrs	r2, r3
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 80b1 	beq.w	800a196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a034:	4b4d      	ldr	r3, [pc, #308]	; (800a16c <HAL_GPIO_Init+0x2b8>)
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	4a4c      	ldr	r2, [pc, #304]	; (800a16c <HAL_GPIO_Init+0x2b8>)
 800a03a:	f043 0301 	orr.w	r3, r3, #1
 800a03e:	6193      	str	r3, [r2, #24]
 800a040:	4b4a      	ldr	r3, [pc, #296]	; (800a16c <HAL_GPIO_Init+0x2b8>)
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	60bb      	str	r3, [r7, #8]
 800a04a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a04c:	4a48      	ldr	r2, [pc, #288]	; (800a170 <HAL_GPIO_Init+0x2bc>)
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	089b      	lsrs	r3, r3, #2
 800a052:	3302      	adds	r3, #2
 800a054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	220f      	movs	r2, #15
 800a064:	fa02 f303 	lsl.w	r3, r2, r3
 800a068:	43db      	mvns	r3, r3
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	4013      	ands	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a40      	ldr	r2, [pc, #256]	; (800a174 <HAL_GPIO_Init+0x2c0>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d013      	beq.n	800a0a0 <HAL_GPIO_Init+0x1ec>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a3f      	ldr	r2, [pc, #252]	; (800a178 <HAL_GPIO_Init+0x2c4>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d00d      	beq.n	800a09c <HAL_GPIO_Init+0x1e8>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a3e      	ldr	r2, [pc, #248]	; (800a17c <HAL_GPIO_Init+0x2c8>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d007      	beq.n	800a098 <HAL_GPIO_Init+0x1e4>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a3d      	ldr	r2, [pc, #244]	; (800a180 <HAL_GPIO_Init+0x2cc>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d101      	bne.n	800a094 <HAL_GPIO_Init+0x1e0>
 800a090:	2303      	movs	r3, #3
 800a092:	e006      	b.n	800a0a2 <HAL_GPIO_Init+0x1ee>
 800a094:	2304      	movs	r3, #4
 800a096:	e004      	b.n	800a0a2 <HAL_GPIO_Init+0x1ee>
 800a098:	2302      	movs	r3, #2
 800a09a:	e002      	b.n	800a0a2 <HAL_GPIO_Init+0x1ee>
 800a09c:	2301      	movs	r3, #1
 800a09e:	e000      	b.n	800a0a2 <HAL_GPIO_Init+0x1ee>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a4:	f002 0203 	and.w	r2, r2, #3
 800a0a8:	0092      	lsls	r2, r2, #2
 800a0aa:	4093      	lsls	r3, r2
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a0b2:	492f      	ldr	r1, [pc, #188]	; (800a170 <HAL_GPIO_Init+0x2bc>)
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	089b      	lsrs	r3, r3, #2
 800a0b8:	3302      	adds	r3, #2
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d006      	beq.n	800a0da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a0cc:	4b2d      	ldr	r3, [pc, #180]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a0ce:	689a      	ldr	r2, [r3, #8]
 800a0d0:	492c      	ldr	r1, [pc, #176]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	608b      	str	r3, [r1, #8]
 800a0d8:	e006      	b.n	800a0e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a0da:	4b2a      	ldr	r3, [pc, #168]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	4928      	ldr	r1, [pc, #160]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d006      	beq.n	800a102 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a0f4:	4b23      	ldr	r3, [pc, #140]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a0f6:	68da      	ldr	r2, [r3, #12]
 800a0f8:	4922      	ldr	r1, [pc, #136]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	60cb      	str	r3, [r1, #12]
 800a100:	e006      	b.n	800a110 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a102:	4b20      	ldr	r3, [pc, #128]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a104:	68da      	ldr	r2, [r3, #12]
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	43db      	mvns	r3, r3
 800a10a:	491e      	ldr	r1, [pc, #120]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a10c:	4013      	ands	r3, r2
 800a10e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d006      	beq.n	800a12a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a11c:	4b19      	ldr	r3, [pc, #100]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	4918      	ldr	r1, [pc, #96]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	4313      	orrs	r3, r2
 800a126:	604b      	str	r3, [r1, #4]
 800a128:	e006      	b.n	800a138 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a12a:	4b16      	ldr	r3, [pc, #88]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	43db      	mvns	r3, r3
 800a132:	4914      	ldr	r1, [pc, #80]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a134:	4013      	ands	r3, r2
 800a136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d021      	beq.n	800a188 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a144:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	490e      	ldr	r1, [pc, #56]	; (800a184 <HAL_GPIO_Init+0x2d0>)
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	600b      	str	r3, [r1, #0]
 800a150:	e021      	b.n	800a196 <HAL_GPIO_Init+0x2e2>
 800a152:	bf00      	nop
 800a154:	10320000 	.word	0x10320000
 800a158:	10310000 	.word	0x10310000
 800a15c:	10220000 	.word	0x10220000
 800a160:	10210000 	.word	0x10210000
 800a164:	10120000 	.word	0x10120000
 800a168:	10110000 	.word	0x10110000
 800a16c:	40021000 	.word	0x40021000
 800a170:	40010000 	.word	0x40010000
 800a174:	40010800 	.word	0x40010800
 800a178:	40010c00 	.word	0x40010c00
 800a17c:	40011000 	.word	0x40011000
 800a180:	40011400 	.word	0x40011400
 800a184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a188:	4b0b      	ldr	r3, [pc, #44]	; (800a1b8 <HAL_GPIO_Init+0x304>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	43db      	mvns	r3, r3
 800a190:	4909      	ldr	r1, [pc, #36]	; (800a1b8 <HAL_GPIO_Init+0x304>)
 800a192:	4013      	ands	r3, r2
 800a194:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	3301      	adds	r3, #1
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f47f ae8e 	bne.w	8009ec8 <HAL_GPIO_Init+0x14>
  }
}
 800a1ac:	bf00      	nop
 800a1ae:	bf00      	nop
 800a1b0:	372c      	adds	r7, #44	; 0x2c
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bc80      	pop	{r7}
 800a1b6:	4770      	bx	lr
 800a1b8:	40010400 	.word	0x40010400

0800a1bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	807b      	strh	r3, [r7, #2]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a1cc:	787b      	ldrb	r3, [r7, #1]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a1d2:	887a      	ldrh	r2, [r7, #2]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a1d8:	e003      	b.n	800a1e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a1da:	887b      	ldrh	r3, [r7, #2]
 800a1dc:	041a      	lsls	r2, r3, #16
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	611a      	str	r2, [r3, #16]
}
 800a1e2:	bf00      	nop
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bc80      	pop	{r7}
 800a1ea:	4770      	bx	lr

0800a1ec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800a1f0:	4b03      	ldr	r3, [pc, #12]	; (800a200 <HAL_PWR_EnableBkUpAccess+0x14>)
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]
}
 800a1f6:	bf00      	nop
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bc80      	pop	{r7}
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	420e0020 	.word	0x420e0020

0800a204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d101      	bne.n	800a216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e26c      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 8087 	beq.w	800a332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a224:	4b92      	ldr	r3, [pc, #584]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f003 030c 	and.w	r3, r3, #12
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d00c      	beq.n	800a24a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a230:	4b8f      	ldr	r3, [pc, #572]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f003 030c 	and.w	r3, r3, #12
 800a238:	2b08      	cmp	r3, #8
 800a23a:	d112      	bne.n	800a262 <HAL_RCC_OscConfig+0x5e>
 800a23c:	4b8c      	ldr	r3, [pc, #560]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a248:	d10b      	bne.n	800a262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a24a:	4b89      	ldr	r3, [pc, #548]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a252:	2b00      	cmp	r3, #0
 800a254:	d06c      	beq.n	800a330 <HAL_RCC_OscConfig+0x12c>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d168      	bne.n	800a330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e246      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a26a:	d106      	bne.n	800a27a <HAL_RCC_OscConfig+0x76>
 800a26c:	4b80      	ldr	r3, [pc, #512]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a7f      	ldr	r2, [pc, #508]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	e02e      	b.n	800a2d8 <HAL_RCC_OscConfig+0xd4>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10c      	bne.n	800a29c <HAL_RCC_OscConfig+0x98>
 800a282:	4b7b      	ldr	r3, [pc, #492]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a7a      	ldr	r2, [pc, #488]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	4b78      	ldr	r3, [pc, #480]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a77      	ldr	r2, [pc, #476]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	e01d      	b.n	800a2d8 <HAL_RCC_OscConfig+0xd4>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2a4:	d10c      	bne.n	800a2c0 <HAL_RCC_OscConfig+0xbc>
 800a2a6:	4b72      	ldr	r3, [pc, #456]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a71      	ldr	r2, [pc, #452]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a2ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2b0:	6013      	str	r3, [r2, #0]
 800a2b2:	4b6f      	ldr	r3, [pc, #444]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a6e      	ldr	r2, [pc, #440]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a2b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	e00b      	b.n	800a2d8 <HAL_RCC_OscConfig+0xd4>
 800a2c0:	4b6b      	ldr	r3, [pc, #428]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a6a      	ldr	r2, [pc, #424]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a2c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2ca:	6013      	str	r3, [r2, #0]
 800a2cc:	4b68      	ldr	r3, [pc, #416]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a67      	ldr	r2, [pc, #412]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a2d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d013      	beq.n	800a308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2e0:	f7ff fa98 	bl	8009814 <HAL_GetTick>
 800a2e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2e6:	e008      	b.n	800a2fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2e8:	f7ff fa94 	bl	8009814 <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	2b64      	cmp	r3, #100	; 0x64
 800a2f4:	d901      	bls.n	800a2fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e1fa      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2fa:	4b5d      	ldr	r3, [pc, #372]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d0f0      	beq.n	800a2e8 <HAL_RCC_OscConfig+0xe4>
 800a306:	e014      	b.n	800a332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a308:	f7ff fa84 	bl	8009814 <HAL_GetTick>
 800a30c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a30e:	e008      	b.n	800a322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a310:	f7ff fa80 	bl	8009814 <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	2b64      	cmp	r3, #100	; 0x64
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e1e6      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a322:	4b53      	ldr	r3, [pc, #332]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1f0      	bne.n	800a310 <HAL_RCC_OscConfig+0x10c>
 800a32e:	e000      	b.n	800a332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d063      	beq.n	800a406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a33e:	4b4c      	ldr	r3, [pc, #304]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	f003 030c 	and.w	r3, r3, #12
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a34a:	4b49      	ldr	r3, [pc, #292]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f003 030c 	and.w	r3, r3, #12
 800a352:	2b08      	cmp	r3, #8
 800a354:	d11c      	bne.n	800a390 <HAL_RCC_OscConfig+0x18c>
 800a356:	4b46      	ldr	r3, [pc, #280]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d116      	bne.n	800a390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a362:	4b43      	ldr	r3, [pc, #268]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d005      	beq.n	800a37a <HAL_RCC_OscConfig+0x176>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d001      	beq.n	800a37a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e1ba      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a37a:	4b3d      	ldr	r3, [pc, #244]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	4939      	ldr	r1, [pc, #228]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a38e:	e03a      	b.n	800a406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d020      	beq.n	800a3da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a398:	4b36      	ldr	r3, [pc, #216]	; (800a474 <HAL_RCC_OscConfig+0x270>)
 800a39a:	2201      	movs	r2, #1
 800a39c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a39e:	f7ff fa39 	bl	8009814 <HAL_GetTick>
 800a3a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3a4:	e008      	b.n	800a3b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3a6:	f7ff fa35 	bl	8009814 <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e19b      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3b8:	4b2d      	ldr	r3, [pc, #180]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0f0      	beq.n	800a3a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3c4:	4b2a      	ldr	r3, [pc, #168]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	00db      	lsls	r3, r3, #3
 800a3d2:	4927      	ldr	r1, [pc, #156]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	600b      	str	r3, [r1, #0]
 800a3d8:	e015      	b.n	800a406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3da:	4b26      	ldr	r3, [pc, #152]	; (800a474 <HAL_RCC_OscConfig+0x270>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3e0:	f7ff fa18 	bl	8009814 <HAL_GetTick>
 800a3e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3e6:	e008      	b.n	800a3fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3e8:	f7ff fa14 	bl	8009814 <HAL_GetTick>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d901      	bls.n	800a3fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e17a      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3fa:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1f0      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 0308 	and.w	r3, r3, #8
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d03a      	beq.n	800a488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d019      	beq.n	800a44e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a41a:	4b17      	ldr	r3, [pc, #92]	; (800a478 <HAL_RCC_OscConfig+0x274>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a420:	f7ff f9f8 	bl	8009814 <HAL_GetTick>
 800a424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a426:	e008      	b.n	800a43a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a428:	f7ff f9f4 	bl	8009814 <HAL_GetTick>
 800a42c:	4602      	mov	r2, r0
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	2b02      	cmp	r3, #2
 800a434:	d901      	bls.n	800a43a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e15a      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a43a:	4b0d      	ldr	r3, [pc, #52]	; (800a470 <HAL_RCC_OscConfig+0x26c>)
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0f0      	beq.n	800a428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a446:	2001      	movs	r0, #1
 800a448:	f000 faec 	bl	800aa24 <RCC_Delay>
 800a44c:	e01c      	b.n	800a488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a44e:	4b0a      	ldr	r3, [pc, #40]	; (800a478 <HAL_RCC_OscConfig+0x274>)
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a454:	f7ff f9de 	bl	8009814 <HAL_GetTick>
 800a458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a45a:	e00f      	b.n	800a47c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a45c:	f7ff f9da 	bl	8009814 <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	2b02      	cmp	r3, #2
 800a468:	d908      	bls.n	800a47c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e140      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
 800a46e:	bf00      	nop
 800a470:	40021000 	.word	0x40021000
 800a474:	42420000 	.word	0x42420000
 800a478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a47c:	4b9e      	ldr	r3, [pc, #632]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	f003 0302 	and.w	r3, r3, #2
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1e9      	bne.n	800a45c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 80a6 	beq.w	800a5e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a496:	2300      	movs	r3, #0
 800a498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a49a:	4b97      	ldr	r3, [pc, #604]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10d      	bne.n	800a4c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4a6:	4b94      	ldr	r3, [pc, #592]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	4a93      	ldr	r2, [pc, #588]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a4ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4b0:	61d3      	str	r3, [r2, #28]
 800a4b2:	4b91      	ldr	r3, [pc, #580]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a4b4:	69db      	ldr	r3, [r3, #28]
 800a4b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4ba:	60bb      	str	r3, [r7, #8]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4c2:	4b8e      	ldr	r3, [pc, #568]	; (800a6fc <HAL_RCC_OscConfig+0x4f8>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d118      	bne.n	800a500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a4ce:	4b8b      	ldr	r3, [pc, #556]	; (800a6fc <HAL_RCC_OscConfig+0x4f8>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a8a      	ldr	r2, [pc, #552]	; (800a6fc <HAL_RCC_OscConfig+0x4f8>)
 800a4d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4da:	f7ff f99b 	bl	8009814 <HAL_GetTick>
 800a4de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4e0:	e008      	b.n	800a4f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4e2:	f7ff f997 	bl	8009814 <HAL_GetTick>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	2b64      	cmp	r3, #100	; 0x64
 800a4ee:	d901      	bls.n	800a4f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e0fd      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4f4:	4b81      	ldr	r3, [pc, #516]	; (800a6fc <HAL_RCC_OscConfig+0x4f8>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0f0      	beq.n	800a4e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d106      	bne.n	800a516 <HAL_RCC_OscConfig+0x312>
 800a508:	4b7b      	ldr	r3, [pc, #492]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	4a7a      	ldr	r2, [pc, #488]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a50e:	f043 0301 	orr.w	r3, r3, #1
 800a512:	6213      	str	r3, [r2, #32]
 800a514:	e02d      	b.n	800a572 <HAL_RCC_OscConfig+0x36e>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10c      	bne.n	800a538 <HAL_RCC_OscConfig+0x334>
 800a51e:	4b76      	ldr	r3, [pc, #472]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	4a75      	ldr	r2, [pc, #468]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a524:	f023 0301 	bic.w	r3, r3, #1
 800a528:	6213      	str	r3, [r2, #32]
 800a52a:	4b73      	ldr	r3, [pc, #460]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	4a72      	ldr	r2, [pc, #456]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a530:	f023 0304 	bic.w	r3, r3, #4
 800a534:	6213      	str	r3, [r2, #32]
 800a536:	e01c      	b.n	800a572 <HAL_RCC_OscConfig+0x36e>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	2b05      	cmp	r3, #5
 800a53e:	d10c      	bne.n	800a55a <HAL_RCC_OscConfig+0x356>
 800a540:	4b6d      	ldr	r3, [pc, #436]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a542:	6a1b      	ldr	r3, [r3, #32]
 800a544:	4a6c      	ldr	r2, [pc, #432]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a546:	f043 0304 	orr.w	r3, r3, #4
 800a54a:	6213      	str	r3, [r2, #32]
 800a54c:	4b6a      	ldr	r3, [pc, #424]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a54e:	6a1b      	ldr	r3, [r3, #32]
 800a550:	4a69      	ldr	r2, [pc, #420]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a552:	f043 0301 	orr.w	r3, r3, #1
 800a556:	6213      	str	r3, [r2, #32]
 800a558:	e00b      	b.n	800a572 <HAL_RCC_OscConfig+0x36e>
 800a55a:	4b67      	ldr	r3, [pc, #412]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	4a66      	ldr	r2, [pc, #408]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a560:	f023 0301 	bic.w	r3, r3, #1
 800a564:	6213      	str	r3, [r2, #32]
 800a566:	4b64      	ldr	r3, [pc, #400]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	4a63      	ldr	r2, [pc, #396]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a56c:	f023 0304 	bic.w	r3, r3, #4
 800a570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d015      	beq.n	800a5a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a57a:	f7ff f94b 	bl	8009814 <HAL_GetTick>
 800a57e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a580:	e00a      	b.n	800a598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a582:	f7ff f947 	bl	8009814 <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a590:	4293      	cmp	r3, r2
 800a592:	d901      	bls.n	800a598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e0ab      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a598:	4b57      	ldr	r3, [pc, #348]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	f003 0302 	and.w	r3, r3, #2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d0ee      	beq.n	800a582 <HAL_RCC_OscConfig+0x37e>
 800a5a4:	e014      	b.n	800a5d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5a6:	f7ff f935 	bl	8009814 <HAL_GetTick>
 800a5aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5ac:	e00a      	b.n	800a5c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ae:	f7ff f931 	bl	8009814 <HAL_GetTick>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d901      	bls.n	800a5c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e095      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5c4:	4b4c      	ldr	r3, [pc, #304]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	f003 0302 	and.w	r3, r3, #2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1ee      	bne.n	800a5ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d105      	bne.n	800a5e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5d6:	4b48      	ldr	r3, [pc, #288]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	4a47      	ldr	r2, [pc, #284]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a5dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 8081 	beq.w	800a6ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5ec:	4b42      	ldr	r3, [pc, #264]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f003 030c 	and.w	r3, r3, #12
 800a5f4:	2b08      	cmp	r3, #8
 800a5f6:	d061      	beq.n	800a6bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d146      	bne.n	800a68e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a600:	4b3f      	ldr	r3, [pc, #252]	; (800a700 <HAL_RCC_OscConfig+0x4fc>)
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a606:	f7ff f905 	bl	8009814 <HAL_GetTick>
 800a60a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a60c:	e008      	b.n	800a620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a60e:	f7ff f901 	bl	8009814 <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d901      	bls.n	800a620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e067      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a620:	4b35      	ldr	r3, [pc, #212]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1f0      	bne.n	800a60e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a1b      	ldr	r3, [r3, #32]
 800a630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a634:	d108      	bne.n	800a648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a636:	4b30      	ldr	r3, [pc, #192]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	492d      	ldr	r1, [pc, #180]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a644:	4313      	orrs	r3, r2
 800a646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a648:	4b2b      	ldr	r3, [pc, #172]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a19      	ldr	r1, [r3, #32]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	430b      	orrs	r3, r1
 800a65a:	4927      	ldr	r1, [pc, #156]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a65c:	4313      	orrs	r3, r2
 800a65e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a660:	4b27      	ldr	r3, [pc, #156]	; (800a700 <HAL_RCC_OscConfig+0x4fc>)
 800a662:	2201      	movs	r2, #1
 800a664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a666:	f7ff f8d5 	bl	8009814 <HAL_GetTick>
 800a66a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a66c:	e008      	b.n	800a680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a66e:	f7ff f8d1 	bl	8009814 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d901      	bls.n	800a680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e037      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a680:	4b1d      	ldr	r3, [pc, #116]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d0f0      	beq.n	800a66e <HAL_RCC_OscConfig+0x46a>
 800a68c:	e02f      	b.n	800a6ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a68e:	4b1c      	ldr	r3, [pc, #112]	; (800a700 <HAL_RCC_OscConfig+0x4fc>)
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a694:	f7ff f8be 	bl	8009814 <HAL_GetTick>
 800a698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a69a:	e008      	b.n	800a6ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a69c:	f7ff f8ba 	bl	8009814 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d901      	bls.n	800a6ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e020      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a6ae:	4b12      	ldr	r3, [pc, #72]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1f0      	bne.n	800a69c <HAL_RCC_OscConfig+0x498>
 800a6ba:	e018      	b.n	800a6ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d101      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e013      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a6c8:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <HAL_RCC_OscConfig+0x4f4>)
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d106      	bne.n	800a6ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d001      	beq.n	800a6ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e000      	b.n	800a6f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	40021000 	.word	0x40021000
 800a6fc:	40007000 	.word	0x40007000
 800a700:	42420060 	.word	0x42420060

0800a704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e0d0      	b.n	800a8ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a718:	4b6a      	ldr	r3, [pc, #424]	; (800a8c4 <HAL_RCC_ClockConfig+0x1c0>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0307 	and.w	r3, r3, #7
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	d910      	bls.n	800a748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a726:	4b67      	ldr	r3, [pc, #412]	; (800a8c4 <HAL_RCC_ClockConfig+0x1c0>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f023 0207 	bic.w	r2, r3, #7
 800a72e:	4965      	ldr	r1, [pc, #404]	; (800a8c4 <HAL_RCC_ClockConfig+0x1c0>)
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	4313      	orrs	r3, r2
 800a734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a736:	4b63      	ldr	r3, [pc, #396]	; (800a8c4 <HAL_RCC_ClockConfig+0x1c0>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	429a      	cmp	r2, r3
 800a742:	d001      	beq.n	800a748 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e0b8      	b.n	800a8ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	2b00      	cmp	r3, #0
 800a752:	d020      	beq.n	800a796 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a760:	4b59      	ldr	r3, [pc, #356]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	4a58      	ldr	r2, [pc, #352]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a766:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a76a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0308 	and.w	r3, r3, #8
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a778:	4b53      	ldr	r3, [pc, #332]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	4a52      	ldr	r2, [pc, #328]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a77e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a782:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a784:	4b50      	ldr	r3, [pc, #320]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	494d      	ldr	r1, [pc, #308]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a792:	4313      	orrs	r3, r2
 800a794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d040      	beq.n	800a824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d107      	bne.n	800a7ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7aa:	4b47      	ldr	r3, [pc, #284]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d115      	bne.n	800a7e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e07f      	b.n	800a8ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d107      	bne.n	800a7d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7c2:	4b41      	ldr	r3, [pc, #260]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d109      	bne.n	800a7e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e073      	b.n	800a8ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7d2:	4b3d      	ldr	r3, [pc, #244]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0302 	and.w	r3, r3, #2
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e06b      	b.n	800a8ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a7e2:	4b39      	ldr	r3, [pc, #228]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f023 0203 	bic.w	r2, r3, #3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	4936      	ldr	r1, [pc, #216]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a7f4:	f7ff f80e 	bl	8009814 <HAL_GetTick>
 800a7f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7fa:	e00a      	b.n	800a812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7fc:	f7ff f80a 	bl	8009814 <HAL_GetTick>
 800a800:	4602      	mov	r2, r0
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	f241 3288 	movw	r2, #5000	; 0x1388
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d901      	bls.n	800a812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e053      	b.n	800a8ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a812:	4b2d      	ldr	r3, [pc, #180]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f003 020c 	and.w	r2, r3, #12
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	429a      	cmp	r2, r3
 800a822:	d1eb      	bne.n	800a7fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a824:	4b27      	ldr	r3, [pc, #156]	; (800a8c4 <HAL_RCC_ClockConfig+0x1c0>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0307 	and.w	r3, r3, #7
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d210      	bcs.n	800a854 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a832:	4b24      	ldr	r3, [pc, #144]	; (800a8c4 <HAL_RCC_ClockConfig+0x1c0>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f023 0207 	bic.w	r2, r3, #7
 800a83a:	4922      	ldr	r1, [pc, #136]	; (800a8c4 <HAL_RCC_ClockConfig+0x1c0>)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	4313      	orrs	r3, r2
 800a840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a842:	4b20      	ldr	r3, [pc, #128]	; (800a8c4 <HAL_RCC_ClockConfig+0x1c0>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 0307 	and.w	r3, r3, #7
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d001      	beq.n	800a854 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e032      	b.n	800a8ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d008      	beq.n	800a872 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a860:	4b19      	ldr	r3, [pc, #100]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	4916      	ldr	r1, [pc, #88]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0308 	and.w	r3, r3, #8
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d009      	beq.n	800a892 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a87e:	4b12      	ldr	r3, [pc, #72]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	490e      	ldr	r1, [pc, #56]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a88e:	4313      	orrs	r3, r2
 800a890:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a892:	f000 f82d 	bl	800a8f0 <HAL_RCC_GetSysClockFreq>
 800a896:	4602      	mov	r2, r0
 800a898:	4b0b      	ldr	r3, [pc, #44]	; (800a8c8 <HAL_RCC_ClockConfig+0x1c4>)
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	091b      	lsrs	r3, r3, #4
 800a89e:	f003 030f 	and.w	r3, r3, #15
 800a8a2:	490a      	ldr	r1, [pc, #40]	; (800a8cc <HAL_RCC_ClockConfig+0x1c8>)
 800a8a4:	5ccb      	ldrb	r3, [r1, r3]
 800a8a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8aa:	4a09      	ldr	r2, [pc, #36]	; (800a8d0 <HAL_RCC_ClockConfig+0x1cc>)
 800a8ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a8ae:	4b09      	ldr	r3, [pc, #36]	; (800a8d4 <HAL_RCC_ClockConfig+0x1d0>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe ff6c 	bl	8009790 <HAL_InitTick>

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	40022000 	.word	0x40022000
 800a8c8:	40021000 	.word	0x40021000
 800a8cc:	08011fe0 	.word	0x08011fe0
 800a8d0:	20000000 	.word	0x20000000
 800a8d4:	20000004 	.word	0x20000004

0800a8d8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a8dc:	4b03      	ldr	r3, [pc, #12]	; (800a8ec <HAL_RCC_EnableCSS+0x14>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
}
 800a8e2:	bf00      	nop
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bc80      	pop	{r7}
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	4242004c 	.word	0x4242004c

0800a8f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60bb      	str	r3, [r7, #8]
 800a8fe:	2300      	movs	r3, #0
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	2300      	movs	r3, #0
 800a904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a90a:	4b1e      	ldr	r3, [pc, #120]	; (800a984 <HAL_RCC_GetSysClockFreq+0x94>)
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f003 030c 	and.w	r3, r3, #12
 800a916:	2b04      	cmp	r3, #4
 800a918:	d002      	beq.n	800a920 <HAL_RCC_GetSysClockFreq+0x30>
 800a91a:	2b08      	cmp	r3, #8
 800a91c:	d003      	beq.n	800a926 <HAL_RCC_GetSysClockFreq+0x36>
 800a91e:	e027      	b.n	800a970 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a920:	4b19      	ldr	r3, [pc, #100]	; (800a988 <HAL_RCC_GetSysClockFreq+0x98>)
 800a922:	613b      	str	r3, [r7, #16]
      break;
 800a924:	e027      	b.n	800a976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	0c9b      	lsrs	r3, r3, #18
 800a92a:	f003 030f 	and.w	r3, r3, #15
 800a92e:	4a17      	ldr	r2, [pc, #92]	; (800a98c <HAL_RCC_GetSysClockFreq+0x9c>)
 800a930:	5cd3      	ldrb	r3, [r2, r3]
 800a932:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d010      	beq.n	800a960 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a93e:	4b11      	ldr	r3, [pc, #68]	; (800a984 <HAL_RCC_GetSysClockFreq+0x94>)
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	0c5b      	lsrs	r3, r3, #17
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	4a11      	ldr	r2, [pc, #68]	; (800a990 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a94a:	5cd3      	ldrb	r3, [r2, r3]
 800a94c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a0d      	ldr	r2, [pc, #52]	; (800a988 <HAL_RCC_GetSysClockFreq+0x98>)
 800a952:	fb02 f203 	mul.w	r2, r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	fbb2 f3f3 	udiv	r3, r2, r3
 800a95c:	617b      	str	r3, [r7, #20]
 800a95e:	e004      	b.n	800a96a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a0c      	ldr	r2, [pc, #48]	; (800a994 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a964:	fb02 f303 	mul.w	r3, r2, r3
 800a968:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	613b      	str	r3, [r7, #16]
      break;
 800a96e:	e002      	b.n	800a976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a970:	4b05      	ldr	r3, [pc, #20]	; (800a988 <HAL_RCC_GetSysClockFreq+0x98>)
 800a972:	613b      	str	r3, [r7, #16]
      break;
 800a974:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a976:	693b      	ldr	r3, [r7, #16]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bc80      	pop	{r7}
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	40021000 	.word	0x40021000
 800a988:	007a1200 	.word	0x007a1200
 800a98c:	08011ff8 	.word	0x08011ff8
 800a990:	08012008 	.word	0x08012008
 800a994:	003d0900 	.word	0x003d0900

0800a998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a998:	b480      	push	{r7}
 800a99a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a99c:	4b02      	ldr	r3, [pc, #8]	; (800a9a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800a99e:	681b      	ldr	r3, [r3, #0]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bc80      	pop	{r7}
 800a9a6:	4770      	bx	lr
 800a9a8:	20000000 	.word	0x20000000

0800a9ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a9b0:	f7ff fff2 	bl	800a998 <HAL_RCC_GetHCLKFreq>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	0a1b      	lsrs	r3, r3, #8
 800a9bc:	f003 0307 	and.w	r3, r3, #7
 800a9c0:	4903      	ldr	r1, [pc, #12]	; (800a9d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9c2:	5ccb      	ldrb	r3, [r1, r3]
 800a9c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	40021000 	.word	0x40021000
 800a9d0:	08011ff0 	.word	0x08011ff0

0800a9d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a9d8:	f7ff ffde 	bl	800a998 <HAL_RCC_GetHCLKFreq>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	0adb      	lsrs	r3, r3, #11
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	4903      	ldr	r1, [pc, #12]	; (800a9f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9ea:	5ccb      	ldrb	r3, [r1, r3]
 800a9ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	40021000 	.word	0x40021000
 800a9f8:	08011ff0 	.word	0x08011ff0

0800a9fc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800aa00:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <HAL_RCC_NMI_IRQHandler+0x20>)
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa08:	2b80      	cmp	r3, #128	; 0x80
 800aa0a:	d104      	bne.n	800aa16 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800aa0c:	f000 f828 	bl	800aa60 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800aa10:	4b03      	ldr	r3, [pc, #12]	; (800aa20 <HAL_RCC_NMI_IRQHandler+0x24>)
 800aa12:	2280      	movs	r2, #128	; 0x80
 800aa14:	701a      	strb	r2, [r3, #0]
  }
}
 800aa16:	bf00      	nop
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	40021000 	.word	0x40021000
 800aa20:	4002100a 	.word	0x4002100a

0800aa24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <RCC_Delay+0x34>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a0a      	ldr	r2, [pc, #40]	; (800aa5c <RCC_Delay+0x38>)
 800aa32:	fba2 2303 	umull	r2, r3, r2, r3
 800aa36:	0a5b      	lsrs	r3, r3, #9
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	fb02 f303 	mul.w	r3, r2, r3
 800aa3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aa40:	bf00      	nop
  }
  while (Delay --);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	1e5a      	subs	r2, r3, #1
 800aa46:	60fa      	str	r2, [r7, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1f9      	bne.n	800aa40 <RCC_Delay+0x1c>
}
 800aa4c:	bf00      	nop
 800aa4e:	bf00      	nop
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bc80      	pop	{r7}
 800aa56:	4770      	bx	lr
 800aa58:	20000000 	.word	0x20000000
 800aa5c:	10624dd3 	.word	0x10624dd3

0800aa60 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800aa60:	b480      	push	{r7}
 800aa62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800aa64:	bf00      	nop
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bc80      	pop	{r7}
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	613b      	str	r3, [r7, #16]
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d07d      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa8c:	4b4f      	ldr	r3, [pc, #316]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10d      	bne.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa98:	4b4c      	ldr	r3, [pc, #304]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	4a4b      	ldr	r2, [pc, #300]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaa2:	61d3      	str	r3, [r2, #28]
 800aaa4:	4b49      	ldr	r3, [pc, #292]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaac:	60bb      	str	r3, [r7, #8]
 800aaae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aab0:	2301      	movs	r3, #1
 800aab2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aab4:	4b46      	ldr	r3, [pc, #280]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d118      	bne.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aac0:	4b43      	ldr	r3, [pc, #268]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a42      	ldr	r2, [pc, #264]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aacc:	f7fe fea2 	bl	8009814 <HAL_GetTick>
 800aad0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aad2:	e008      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aad4:	f7fe fe9e 	bl	8009814 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b64      	cmp	r3, #100	; 0x64
 800aae0:	d901      	bls.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e06d      	b.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aae6:	4b3a      	ldr	r3, [pc, #232]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f0      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aaf2:	4b36      	ldr	r3, [pc, #216]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aafa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d02e      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d027      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab10:	4b2e      	ldr	r3, [pc, #184]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab1a:	4b2e      	ldr	r3, [pc, #184]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab20:	4b2c      	ldr	r3, [pc, #176]	; (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ab26:	4a29      	ldr	r2, [pc, #164]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d014      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab36:	f7fe fe6d 	bl	8009814 <HAL_GetTick>
 800ab3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab3c:	e00a      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab3e:	f7fe fe69 	bl	8009814 <HAL_GetTick>
 800ab42:	4602      	mov	r2, r0
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d901      	bls.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e036      	b.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab54:	4b1d      	ldr	r3, [pc, #116]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab56:	6a1b      	ldr	r3, [r3, #32]
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d0ee      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab60:	4b1a      	ldr	r3, [pc, #104]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	4917      	ldr	r1, [pc, #92]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d105      	bne.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab78:	4b14      	ldr	r3, [pc, #80]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	4a13      	ldr	r2, [pc, #76]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0302 	and.w	r3, r3, #2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d008      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab90:	4b0e      	ldr	r3, [pc, #56]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	490b      	ldr	r1, [pc, #44]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 0310 	and.w	r3, r3, #16
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d008      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abae:	4b07      	ldr	r3, [pc, #28]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	4904      	ldr	r1, [pc, #16]	; (800abcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abbc:	4313      	orrs	r3, r2
 800abbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	40021000 	.word	0x40021000
 800abd0:	40007000 	.word	0x40007000
 800abd4:	42420440 	.word	0x42420440

0800abd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	617b      	str	r3, [r7, #20]
 800abe4:	2300      	movs	r3, #0
 800abe6:	61fb      	str	r3, [r7, #28]
 800abe8:	2300      	movs	r3, #0
 800abea:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800abec:	2300      	movs	r3, #0
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	2300      	movs	r3, #0
 800abf2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b10      	cmp	r3, #16
 800abf8:	d00a      	beq.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2b10      	cmp	r3, #16
 800abfe:	f200 808a 	bhi.w	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d045      	beq.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d075      	beq.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800ac0e:	e082      	b.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800ac10:	4b46      	ldr	r3, [pc, #280]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800ac16:	4b45      	ldr	r3, [pc, #276]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d07b      	beq.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	0c9b      	lsrs	r3, r3, #18
 800ac26:	f003 030f 	and.w	r3, r3, #15
 800ac2a:	4a41      	ldr	r2, [pc, #260]	; (800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800ac2c:	5cd3      	ldrb	r3, [r2, r3]
 800ac2e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d015      	beq.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ac3a:	4b3c      	ldr	r3, [pc, #240]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	0c5b      	lsrs	r3, r3, #17
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	4a3b      	ldr	r2, [pc, #236]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800ac46:	5cd3      	ldrb	r3, [r2, r3]
 800ac48:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00d      	beq.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800ac54:	4a38      	ldr	r2, [pc, #224]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	fb02 f303 	mul.w	r3, r2, r3
 800ac62:	61fb      	str	r3, [r7, #28]
 800ac64:	e004      	b.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	4a34      	ldr	r2, [pc, #208]	; (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800ac6a:	fb02 f303 	mul.w	r3, r2, r3
 800ac6e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800ac70:	4b2e      	ldr	r3, [pc, #184]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac7c:	d102      	bne.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	61bb      	str	r3, [r7, #24]
      break;
 800ac82:	e04a      	b.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	4a2d      	ldr	r2, [pc, #180]	; (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800ac8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac8e:	085b      	lsrs	r3, r3, #1
 800ac90:	61bb      	str	r3, [r7, #24]
      break;
 800ac92:	e042      	b.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800ac94:	4b25      	ldr	r3, [pc, #148]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aca4:	d108      	bne.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f003 0302 	and.w	r3, r3, #2
 800acac:	2b00      	cmp	r3, #0
 800acae:	d003      	beq.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800acb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acb4:	61bb      	str	r3, [r7, #24]
 800acb6:	e01f      	b.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acc2:	d109      	bne.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800acc4:	4b19      	ldr	r3, [pc, #100]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	f003 0302 	and.w	r3, r3, #2
 800accc:	2b00      	cmp	r3, #0
 800acce:	d003      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800acd0:	f649 4340 	movw	r3, #40000	; 0x9c40
 800acd4:	61bb      	str	r3, [r7, #24]
 800acd6:	e00f      	b.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ace2:	d11c      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800ace4:	4b11      	ldr	r3, [pc, #68]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d016      	beq.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800acf0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800acf4:	61bb      	str	r3, [r7, #24]
      break;
 800acf6:	e012      	b.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800acf8:	e011      	b.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800acfa:	f7ff fe6b 	bl	800a9d4 <HAL_RCC_GetPCLK2Freq>
 800acfe:	4602      	mov	r2, r0
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	0b9b      	lsrs	r3, r3, #14
 800ad06:	f003 0303 	and.w	r3, r3, #3
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	005b      	lsls	r3, r3, #1
 800ad0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad12:	61bb      	str	r3, [r7, #24]
      break;
 800ad14:	e004      	b.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800ad16:	bf00      	nop
 800ad18:	e002      	b.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800ad1a:	bf00      	nop
 800ad1c:	e000      	b.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800ad1e:	bf00      	nop
    }
  }
  return (frequency);
 800ad20:	69bb      	ldr	r3, [r7, #24]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	40021000 	.word	0x40021000
 800ad30:	0801200c 	.word	0x0801200c
 800ad34:	0801201c 	.word	0x0801201c
 800ad38:	007a1200 	.word	0x007a1200
 800ad3c:	003d0900 	.word	0x003d0900
 800ad40:	aaaaaaab 	.word	0xaaaaaaab

0800ad44 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e07a      	b.n	800ae50 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7c5b      	ldrb	r3, [r3, #17]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d105      	bne.n	800ad70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7fe fa3a 	bl	80091e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2202      	movs	r2, #2
 800ad74:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f870 	bl	800ae5c <HAL_RTC_WaitForSynchro>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d004      	beq.n	800ad8c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2204      	movs	r2, #4
 800ad86:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e061      	b.n	800ae50 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f892 	bl	800aeb6 <RTC_EnterInitMode>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d004      	beq.n	800ada2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2204      	movs	r2, #4
 800ad9c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e056      	b.n	800ae50 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0207 	bic.w	r2, r2, #7
 800adb0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d005      	beq.n	800adc6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800adba:	4b27      	ldr	r3, [pc, #156]	; (800ae58 <HAL_RTC_Init+0x114>)
 800adbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbe:	4a26      	ldr	r2, [pc, #152]	; (800ae58 <HAL_RTC_Init+0x114>)
 800adc0:	f023 0301 	bic.w	r3, r3, #1
 800adc4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800adc6:	4b24      	ldr	r3, [pc, #144]	; (800ae58 <HAL_RTC_Init+0x114>)
 800adc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adca:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	4921      	ldr	r1, [pc, #132]	; (800ae58 <HAL_RTC_Init+0x114>)
 800add4:	4313      	orrs	r3, r2
 800add6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade0:	d003      	beq.n	800adea <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	e00e      	b.n	800ae08 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800adea:	2001      	movs	r0, #1
 800adec:	f7ff fef4 	bl	800abd8 <HAL_RCCEx_GetPeriphCLKFreq>
 800adf0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d104      	bne.n	800ae02 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2204      	movs	r2, #4
 800adfc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e026      	b.n	800ae50 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	0c1a      	lsrs	r2, r3, #16
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f002 020f 	and.w	r2, r2, #15
 800ae14:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	b292      	uxth	r2, r2
 800ae1e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f870 	bl	800af06 <RTC_ExitInitMode>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d004      	beq.n	800ae36 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2204      	movs	r2, #4
 800ae30:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e00c      	b.n	800ae50 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800ae4e:	2300      	movs	r3, #0
  }
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	40006c00 	.word	0x40006c00

0800ae5c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e01d      	b.n	800aeae <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f022 0208 	bic.w	r2, r2, #8
 800ae80:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800ae82:	f7fe fcc7 	bl	8009814 <HAL_GetTick>
 800ae86:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800ae88:	e009      	b.n	800ae9e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800ae8a:	f7fe fcc3 	bl	8009814 <HAL_GetTick>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae98:	d901      	bls.n	800ae9e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e007      	b.n	800aeae <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f003 0308 	and.w	r3, r3, #8
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d0ee      	beq.n	800ae8a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800aec2:	f7fe fca7 	bl	8009814 <HAL_GetTick>
 800aec6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800aec8:	e009      	b.n	800aede <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800aeca:	f7fe fca3 	bl	8009814 <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aed8:	d901      	bls.n	800aede <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e00f      	b.n	800aefe <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	f003 0320 	and.w	r3, r3, #32
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d0ee      	beq.n	800aeca <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f042 0210 	orr.w	r2, r2, #16
 800aefa:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800af0e:	2300      	movs	r3, #0
 800af10:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	685a      	ldr	r2, [r3, #4]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 0210 	bic.w	r2, r2, #16
 800af20:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800af22:	f7fe fc77 	bl	8009814 <HAL_GetTick>
 800af26:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800af28:	e009      	b.n	800af3e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800af2a:	f7fe fc73 	bl	8009814 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af38:	d901      	bls.n	800af3e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e007      	b.n	800af4e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f003 0320 	and.w	r3, r3, #32
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d0ee      	beq.n	800af2a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b082      	sub	sp, #8
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	e076      	b.n	800b056 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d108      	bne.n	800af82 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af78:	d009      	beq.n	800af8e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	61da      	str	r2, [r3, #28]
 800af80:	e005      	b.n	800af8e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d106      	bne.n	800afae <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7fe f93f 	bl	800922c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2202      	movs	r2, #2
 800afb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afc4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800afd6:	431a      	orrs	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afe0:	431a      	orrs	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	f003 0302 	and.w	r3, r3, #2
 800afea:	431a      	orrs	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	431a      	orrs	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800affe:	431a      	orrs	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b008:	431a      	orrs	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b012:	ea42 0103 	orr.w	r1, r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	0c1a      	lsrs	r2, r3, #16
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f002 0204 	and.w	r2, r2, #4
 800b034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	69da      	ldr	r2, [r3, #28]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b088      	sub	sp, #32
 800b062:	af00      	add	r7, sp, #0
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	60b9      	str	r1, [r7, #8]
 800b068:	603b      	str	r3, [r7, #0]
 800b06a:	4613      	mov	r3, r2
 800b06c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d101      	bne.n	800b080 <HAL_SPI_Transmit+0x22>
 800b07c:	2302      	movs	r3, #2
 800b07e:	e12d      	b.n	800b2dc <HAL_SPI_Transmit+0x27e>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b088:	f7fe fbc4 	bl	8009814 <HAL_GetTick>
 800b08c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b08e:	88fb      	ldrh	r3, [r7, #6]
 800b090:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d002      	beq.n	800b0a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b09e:	2302      	movs	r3, #2
 800b0a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b0a2:	e116      	b.n	800b2d2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <HAL_SPI_Transmit+0x52>
 800b0aa:	88fb      	ldrh	r3, [r7, #6]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d102      	bne.n	800b0b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b0b4:	e10d      	b.n	800b2d2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2203      	movs	r2, #3
 800b0ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	88fa      	ldrh	r2, [r7, #6]
 800b0ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	88fa      	ldrh	r2, [r7, #6]
 800b0d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0fc:	d10f      	bne.n	800b11e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b10c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b11c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b128:	2b40      	cmp	r3, #64	; 0x40
 800b12a:	d007      	beq.n	800b13c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b13a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b144:	d14f      	bne.n	800b1e6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <HAL_SPI_Transmit+0xf6>
 800b14e:	8afb      	ldrh	r3, [r7, #22]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d142      	bne.n	800b1da <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b158:	881a      	ldrh	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b164:	1c9a      	adds	r2, r3, #2
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b16e:	b29b      	uxth	r3, r3
 800b170:	3b01      	subs	r3, #1
 800b172:	b29a      	uxth	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b178:	e02f      	b.n	800b1da <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f003 0302 	and.w	r3, r3, #2
 800b184:	2b02      	cmp	r3, #2
 800b186:	d112      	bne.n	800b1ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18c:	881a      	ldrh	r2, [r3, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b198:	1c9a      	adds	r2, r3, #2
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	86da      	strh	r2, [r3, #54]	; 0x36
 800b1ac:	e015      	b.n	800b1da <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1ae:	f7fe fb31 	bl	8009814 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d803      	bhi.n	800b1c6 <HAL_SPI_Transmit+0x168>
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c4:	d102      	bne.n	800b1cc <HAL_SPI_Transmit+0x16e>
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d106      	bne.n	800b1da <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800b1d8:	e07b      	b.n	800b2d2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1ca      	bne.n	800b17a <HAL_SPI_Transmit+0x11c>
 800b1e4:	e050      	b.n	800b288 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d002      	beq.n	800b1f4 <HAL_SPI_Transmit+0x196>
 800b1ee:	8afb      	ldrh	r3, [r7, #22]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d144      	bne.n	800b27e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	330c      	adds	r3, #12
 800b1fe:	7812      	ldrb	r2, [r2, #0]
 800b200:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b210:	b29b      	uxth	r3, r3
 800b212:	3b01      	subs	r3, #1
 800b214:	b29a      	uxth	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b21a:	e030      	b.n	800b27e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f003 0302 	and.w	r3, r3, #2
 800b226:	2b02      	cmp	r3, #2
 800b228:	d113      	bne.n	800b252 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	330c      	adds	r3, #12
 800b234:	7812      	ldrb	r2, [r2, #0]
 800b236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b246:	b29b      	uxth	r3, r3
 800b248:	3b01      	subs	r3, #1
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b250:	e015      	b.n	800b27e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b252:	f7fe fadf 	bl	8009814 <HAL_GetTick>
 800b256:	4602      	mov	r2, r0
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d803      	bhi.n	800b26a <HAL_SPI_Transmit+0x20c>
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b268:	d102      	bne.n	800b270 <HAL_SPI_Transmit+0x212>
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d106      	bne.n	800b27e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800b270:	2303      	movs	r3, #3
 800b272:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800b27c:	e029      	b.n	800b2d2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b282:	b29b      	uxth	r3, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1c9      	bne.n	800b21c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f000 fbcb 	bl	800ba28 <SPI_EndRxTxTransaction>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2220      	movs	r2, #32
 800b29c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10a      	bne.n	800b2bc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	613b      	str	r3, [r7, #16]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	613b      	str	r3, [r7, #16]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	613b      	str	r3, [r7, #16]
 800b2ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	77fb      	strb	r3, [r7, #31]
 800b2c8:	e003      	b.n	800b2d2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b2da:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3720      	adds	r7, #32
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af02      	add	r7, sp, #8
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b01      	cmp	r3, #1
 800b302:	d002      	beq.n	800b30a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800b304:	2302      	movs	r3, #2
 800b306:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b308:	e0fb      	b.n	800b502 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b312:	d112      	bne.n	800b33a <HAL_SPI_Receive+0x56>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10e      	bne.n	800b33a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2204      	movs	r2, #4
 800b320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b324:	88fa      	ldrh	r2, [r7, #6]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	4613      	mov	r3, r2
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 f8ef 	bl	800b514 <HAL_SPI_TransmitReceive>
 800b336:	4603      	mov	r3, r0
 800b338:	e0e8      	b.n	800b50c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b340:	2b01      	cmp	r3, #1
 800b342:	d101      	bne.n	800b348 <HAL_SPI_Receive+0x64>
 800b344:	2302      	movs	r3, #2
 800b346:	e0e1      	b.n	800b50c <HAL_SPI_Receive+0x228>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b350:	f7fe fa60 	bl	8009814 <HAL_GetTick>
 800b354:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <HAL_SPI_Receive+0x7e>
 800b35c:	88fb      	ldrh	r3, [r7, #6]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d102      	bne.n	800b368 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b366:	e0cc      	b.n	800b502 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2204      	movs	r2, #4
 800b36c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	88fa      	ldrh	r2, [r7, #6]
 800b380:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	88fa      	ldrh	r2, [r7, #6]
 800b386:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3ae:	d10f      	bne.n	800b3d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b3ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3da:	2b40      	cmp	r3, #64	; 0x40
 800b3dc:	d007      	beq.n	800b3ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d16a      	bne.n	800b4cc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b3f6:	e032      	b.n	800b45e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b01      	cmp	r3, #1
 800b404:	d115      	bne.n	800b432 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f103 020c 	add.w	r2, r3, #12
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b412:	7812      	ldrb	r2, [r2, #0]
 800b414:	b2d2      	uxtb	r2, r2
 800b416:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b426:	b29b      	uxth	r3, r3
 800b428:	3b01      	subs	r3, #1
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b430:	e015      	b.n	800b45e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b432:	f7fe f9ef 	bl	8009814 <HAL_GetTick>
 800b436:	4602      	mov	r2, r0
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d803      	bhi.n	800b44a <HAL_SPI_Receive+0x166>
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b448:	d102      	bne.n	800b450 <HAL_SPI_Receive+0x16c>
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d106      	bne.n	800b45e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800b45c:	e051      	b.n	800b502 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b462:	b29b      	uxth	r3, r3
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1c7      	bne.n	800b3f8 <HAL_SPI_Receive+0x114>
 800b468:	e035      	b.n	800b4d6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b01      	cmp	r3, #1
 800b476:	d113      	bne.n	800b4a0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b482:	b292      	uxth	r2, r2
 800b484:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b48a:	1c9a      	adds	r2, r3, #2
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b494:	b29b      	uxth	r3, r3
 800b496:	3b01      	subs	r3, #1
 800b498:	b29a      	uxth	r2, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b49e:	e015      	b.n	800b4cc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4a0:	f7fe f9b8 	bl	8009814 <HAL_GetTick>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d803      	bhi.n	800b4b8 <HAL_SPI_Receive+0x1d4>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b6:	d102      	bne.n	800b4be <HAL_SPI_Receive+0x1da>
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800b4ca:	e01a      	b.n	800b502 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1c9      	bne.n	800b46a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	6839      	ldr	r1, [r7, #0]
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 fa52 	bl	800b984 <SPI_EndRxTransaction>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d002      	beq.n	800b4fa <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	75fb      	strb	r3, [r7, #23]
 800b4f8:	e003      	b.n	800b502 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08c      	sub	sp, #48	; 0x30
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
 800b520:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b522:	2301      	movs	r3, #1
 800b524:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b532:	2b01      	cmp	r3, #1
 800b534:	d101      	bne.n	800b53a <HAL_SPI_TransmitReceive+0x26>
 800b536:	2302      	movs	r3, #2
 800b538:	e198      	b.n	800b86c <HAL_SPI_TransmitReceive+0x358>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2201      	movs	r2, #1
 800b53e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b542:	f7fe f967 	bl	8009814 <HAL_GetTick>
 800b546:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b54e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b558:	887b      	ldrh	r3, [r7, #2]
 800b55a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b55c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b560:	2b01      	cmp	r3, #1
 800b562:	d00f      	beq.n	800b584 <HAL_SPI_TransmitReceive+0x70>
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b56a:	d107      	bne.n	800b57c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d103      	bne.n	800b57c <HAL_SPI_TransmitReceive+0x68>
 800b574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d003      	beq.n	800b584 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b57c:	2302      	movs	r3, #2
 800b57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b582:	e16d      	b.n	800b860 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d005      	beq.n	800b596 <HAL_SPI_TransmitReceive+0x82>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <HAL_SPI_TransmitReceive+0x82>
 800b590:	887b      	ldrh	r3, [r7, #2]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d103      	bne.n	800b59e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b59c:	e160      	b.n	800b860 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b04      	cmp	r3, #4
 800b5a8:	d003      	beq.n	800b5b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	887a      	ldrh	r2, [r7, #2]
 800b5c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	887a      	ldrh	r2, [r7, #2]
 800b5c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	887a      	ldrh	r2, [r7, #2]
 800b5d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	887a      	ldrh	r2, [r7, #2]
 800b5da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f2:	2b40      	cmp	r3, #64	; 0x40
 800b5f4:	d007      	beq.n	800b606 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b604:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b60e:	d17c      	bne.n	800b70a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <HAL_SPI_TransmitReceive+0x10a>
 800b618:	8b7b      	ldrh	r3, [r7, #26]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d16a      	bne.n	800b6f4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b622:	881a      	ldrh	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62e:	1c9a      	adds	r2, r3, #2
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b638:	b29b      	uxth	r3, r3
 800b63a:	3b01      	subs	r3, #1
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b642:	e057      	b.n	800b6f4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d11b      	bne.n	800b68a <HAL_SPI_TransmitReceive+0x176>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b656:	b29b      	uxth	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d016      	beq.n	800b68a <HAL_SPI_TransmitReceive+0x176>
 800b65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d113      	bne.n	800b68a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b666:	881a      	ldrh	r2, [r3, #0]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	1c9a      	adds	r2, r3, #2
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	3b01      	subs	r3, #1
 800b680:	b29a      	uxth	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b686:	2300      	movs	r3, #0
 800b688:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b01      	cmp	r3, #1
 800b696:	d119      	bne.n	800b6cc <HAL_SPI_TransmitReceive+0x1b8>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d014      	beq.n	800b6cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68da      	ldr	r2, [r3, #12]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ac:	b292      	uxth	r2, r2
 800b6ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b4:	1c9a      	adds	r2, r3, #2
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b6cc:	f7fe f8a2 	bl	8009814 <HAL_GetTick>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d80b      	bhi.n	800b6f4 <HAL_SPI_TransmitReceive+0x1e0>
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e2:	d007      	beq.n	800b6f4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b6f2:	e0b5      	b.n	800b860 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1a2      	bne.n	800b644 <HAL_SPI_TransmitReceive+0x130>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b702:	b29b      	uxth	r3, r3
 800b704:	2b00      	cmp	r3, #0
 800b706:	d19d      	bne.n	800b644 <HAL_SPI_TransmitReceive+0x130>
 800b708:	e080      	b.n	800b80c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d002      	beq.n	800b718 <HAL_SPI_TransmitReceive+0x204>
 800b712:	8b7b      	ldrh	r3, [r7, #26]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d16f      	bne.n	800b7f8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	330c      	adds	r3, #12
 800b722:	7812      	ldrb	r2, [r2, #0]
 800b724:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b734:	b29b      	uxth	r3, r3
 800b736:	3b01      	subs	r3, #1
 800b738:	b29a      	uxth	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b73e:	e05b      	b.n	800b7f8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f003 0302 	and.w	r3, r3, #2
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d11c      	bne.n	800b788 <HAL_SPI_TransmitReceive+0x274>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b752:	b29b      	uxth	r3, r3
 800b754:	2b00      	cmp	r3, #0
 800b756:	d017      	beq.n	800b788 <HAL_SPI_TransmitReceive+0x274>
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d114      	bne.n	800b788 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	330c      	adds	r3, #12
 800b768:	7812      	ldrb	r2, [r2, #0]
 800b76a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	3b01      	subs	r3, #1
 800b77e:	b29a      	uxth	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b784:	2300      	movs	r3, #0
 800b786:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	f003 0301 	and.w	r3, r3, #1
 800b792:	2b01      	cmp	r3, #1
 800b794:	d119      	bne.n	800b7ca <HAL_SPI_TransmitReceive+0x2b6>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d014      	beq.n	800b7ca <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68da      	ldr	r2, [r3, #12]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b7ca:	f7fe f823 	bl	8009814 <HAL_GetTick>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d803      	bhi.n	800b7e2 <HAL_SPI_TransmitReceive+0x2ce>
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e0:	d102      	bne.n	800b7e8 <HAL_SPI_TransmitReceive+0x2d4>
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d107      	bne.n	800b7f8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b7f6:	e033      	b.n	800b860 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d19e      	bne.n	800b740 <HAL_SPI_TransmitReceive+0x22c>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b806:	b29b      	uxth	r3, r3
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d199      	bne.n	800b740 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 f909 	bl	800ba28 <SPI_EndRxTxTransaction>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d006      	beq.n	800b82a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2220      	movs	r2, #32
 800b826:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b828:	e01a      	b.n	800b860 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10a      	bne.n	800b848 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b832:	2300      	movs	r3, #0
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	617b      	str	r3, [r7, #20]
 800b846:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d003      	beq.n	800b858 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b856:	e003      	b.n	800b860 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3730      	adds	r7, #48	; 0x30
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b088      	sub	sp, #32
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	4613      	mov	r3, r2
 800b882:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b884:	f7fd ffc6 	bl	8009814 <HAL_GetTick>
 800b888:	4602      	mov	r2, r0
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	683a      	ldr	r2, [r7, #0]
 800b890:	4413      	add	r3, r2
 800b892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b894:	f7fd ffbe 	bl	8009814 <HAL_GetTick>
 800b898:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b89a:	4b39      	ldr	r3, [pc, #228]	; (800b980 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	015b      	lsls	r3, r3, #5
 800b8a0:	0d1b      	lsrs	r3, r3, #20
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	fb02 f303 	mul.w	r3, r2, r3
 800b8a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8aa:	e054      	b.n	800b956 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b2:	d050      	beq.n	800b956 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b8b4:	f7fd ffae 	bl	8009814 <HAL_GetTick>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	69fa      	ldr	r2, [r7, #28]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d902      	bls.n	800b8ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d13d      	bne.n	800b946 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b8d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8e2:	d111      	bne.n	800b908 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8ec:	d004      	beq.n	800b8f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8f6:	d107      	bne.n	800b908 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b910:	d10f      	bne.n	800b932 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b920:	601a      	str	r2, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b942:	2303      	movs	r3, #3
 800b944:	e017      	b.n	800b976 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b94c:	2300      	movs	r3, #0
 800b94e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	3b01      	subs	r3, #1
 800b954:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	4013      	ands	r3, r2
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	429a      	cmp	r2, r3
 800b964:	bf0c      	ite	eq
 800b966:	2301      	moveq	r3, #1
 800b968:	2300      	movne	r3, #0
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	461a      	mov	r2, r3
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	429a      	cmp	r2, r3
 800b972:	d19b      	bne.n	800b8ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3720      	adds	r7, #32
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000000 	.word	0x20000000

0800b984 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af02      	add	r7, sp, #8
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b998:	d111      	bne.n	800b9be <SPI_EndRxTransaction+0x3a>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9a2:	d004      	beq.n	800b9ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ac:	d107      	bne.n	800b9be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9bc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9c6:	d117      	bne.n	800b9f8 <SPI_EndRxTransaction+0x74>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9d0:	d112      	bne.n	800b9f8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	2101      	movs	r1, #1
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f7ff ff49 	bl	800b874 <SPI_WaitFlagStateUntilTimeout>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d01a      	beq.n	800ba1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ec:	f043 0220 	orr.w	r2, r3, #32
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e013      	b.n	800ba20 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	2180      	movs	r1, #128	; 0x80
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f7ff ff36 	bl	800b874 <SPI_WaitFlagStateUntilTimeout>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d007      	beq.n	800ba1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba12:	f043 0220 	orr.w	r2, r3, #32
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e000      	b.n	800ba20 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af02      	add	r7, sp, #8
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2180      	movs	r1, #128	; 0x80
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7ff ff18 	bl	800b874 <SPI_WaitFlagStateUntilTimeout>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d007      	beq.n	800ba5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba4e:	f043 0220 	orr.w	r2, r3, #32
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e000      	b.n	800ba5c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e042      	b.n	800bafc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7fd fc54 	bl	8009338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2224      	movs	r2, #36	; 0x24
 800ba94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68da      	ldr	r2, [r3, #12]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800baa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fd71 	bl	800c590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	691a      	ldr	r2, [r3, #16]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800babc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	695a      	ldr	r2, [r3, #20]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bacc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68da      	ldr	r2, [r3, #12]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800badc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2220      	movs	r2, #32
 800bae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2220      	movs	r2, #32
 800baf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08a      	sub	sp, #40	; 0x28
 800bb08:	af02      	add	r7, sp, #8
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	603b      	str	r3, [r7, #0]
 800bb10:	4613      	mov	r3, r2
 800bb12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bb14:	2300      	movs	r3, #0
 800bb16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b20      	cmp	r3, #32
 800bb22:	d16d      	bne.n	800bc00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d002      	beq.n	800bb30 <HAL_UART_Transmit+0x2c>
 800bb2a:	88fb      	ldrh	r3, [r7, #6]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e066      	b.n	800bc02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2221      	movs	r2, #33	; 0x21
 800bb3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb42:	f7fd fe67 	bl	8009814 <HAL_GetTick>
 800bb46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	88fa      	ldrh	r2, [r7, #6]
 800bb4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	88fa      	ldrh	r2, [r7, #6]
 800bb52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb5c:	d108      	bne.n	800bb70 <HAL_UART_Transmit+0x6c>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d104      	bne.n	800bb70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	61bb      	str	r3, [r7, #24]
 800bb6e:	e003      	b.n	800bb78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb74:	2300      	movs	r3, #0
 800bb76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bb78:	e02a      	b.n	800bbd0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2200      	movs	r2, #0
 800bb82:	2180      	movs	r1, #128	; 0x80
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 faf9 	bl	800c17c <UART_WaitOnFlagUntilTimeout>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800bb90:	2303      	movs	r3, #3
 800bb92:	e036      	b.n	800bc02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10b      	bne.n	800bbb2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	3302      	adds	r3, #2
 800bbae:	61bb      	str	r3, [r7, #24]
 800bbb0:	e007      	b.n	800bbc2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	781a      	ldrb	r2, [r3, #0]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1cf      	bne.n	800bb7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	2140      	movs	r1, #64	; 0x40
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 fac9 	bl	800c17c <UART_WaitOnFlagUntilTimeout>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e006      	b.n	800bc02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e000      	b.n	800bc02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800bc00:	2302      	movs	r3, #2
  }
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3720      	adds	r7, #32
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
	...

0800bc0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b0ba      	sub	sp, #232	; 0xe8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc42:	f003 030f 	and.w	r3, r3, #15
 800bc46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10f      	bne.n	800bc72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc56:	f003 0320 	and.w	r3, r3, #32
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d009      	beq.n	800bc72 <HAL_UART_IRQHandler+0x66>
 800bc5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc62:	f003 0320 	and.w	r3, r3, #32
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fbd1 	bl	800c412 <UART_Receive_IT>
      return;
 800bc70:	e25b      	b.n	800c12a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bc72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 80de 	beq.w	800be38 <HAL_UART_IRQHandler+0x22c>
 800bc7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d106      	bne.n	800bc96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 80d1 	beq.w	800be38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bc96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00b      	beq.n	800bcba <HAL_UART_IRQHandler+0xae>
 800bca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d005      	beq.n	800bcba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb2:	f043 0201 	orr.w	r2, r3, #1
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbe:	f003 0304 	and.w	r3, r3, #4
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00b      	beq.n	800bcde <HAL_UART_IRQHandler+0xd2>
 800bcc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d005      	beq.n	800bcde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd6:	f043 0202 	orr.w	r2, r3, #2
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00b      	beq.n	800bd02 <HAL_UART_IRQHandler+0xf6>
 800bcea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcee:	f003 0301 	and.w	r3, r3, #1
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d005      	beq.n	800bd02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcfa:	f043 0204 	orr.w	r2, r3, #4
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bd02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd06:	f003 0308 	and.w	r3, r3, #8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d011      	beq.n	800bd32 <HAL_UART_IRQHandler+0x126>
 800bd0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd12:	f003 0320 	and.w	r3, r3, #32
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d105      	bne.n	800bd26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d005      	beq.n	800bd32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd2a:	f043 0208 	orr.w	r2, r3, #8
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 81f2 	beq.w	800c120 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd40:	f003 0320 	and.w	r3, r3, #32
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d008      	beq.n	800bd5a <HAL_UART_IRQHandler+0x14e>
 800bd48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd4c:	f003 0320 	and.w	r3, r3, #32
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fb5c 	bl	800c412 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	bf14      	ite	ne
 800bd68:	2301      	movne	r3, #1
 800bd6a:	2300      	moveq	r3, #0
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd76:	f003 0308 	and.w	r3, r3, #8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d103      	bne.n	800bd86 <HAL_UART_IRQHandler+0x17a>
 800bd7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d04f      	beq.n	800be26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fa66 	bl	800c258 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d041      	beq.n	800be1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3314      	adds	r3, #20
 800bda0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bda8:	e853 3f00 	ldrex	r3, [r3]
 800bdac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bdb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	3314      	adds	r3, #20
 800bdc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bdc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bdca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bdd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bdd6:	e841 2300 	strex	r3, r2, [r1]
 800bdda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bdde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1d9      	bne.n	800bd9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d013      	beq.n	800be16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf2:	4a7e      	ldr	r2, [pc, #504]	; (800bfec <HAL_UART_IRQHandler+0x3e0>)
 800bdf4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fd fedc 	bl	8009bb8 <HAL_DMA_Abort_IT>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d016      	beq.n	800be34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800be10:	4610      	mov	r0, r2
 800be12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be14:	e00e      	b.n	800be34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f99c 	bl	800c154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be1c:	e00a      	b.n	800be34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f998 	bl	800c154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be24:	e006      	b.n	800be34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f994 	bl	800c154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800be32:	e175      	b.n	800c120 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be34:	bf00      	nop
    return;
 800be36:	e173      	b.n	800c120 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	f040 814f 	bne.w	800c0e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800be42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be46:	f003 0310 	and.w	r3, r3, #16
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 8148 	beq.w	800c0e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be54:	f003 0310 	and.w	r3, r3, #16
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 8141 	beq.w	800c0e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be5e:	2300      	movs	r3, #0
 800be60:	60bb      	str	r3, [r7, #8]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	60bb      	str	r3, [r7, #8]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	60bb      	str	r3, [r7, #8]
 800be72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 80b6 	beq.w	800bff0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 8145 	beq.w	800c124 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bea2:	429a      	cmp	r2, r3
 800bea4:	f080 813e 	bcs.w	800c124 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800beae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	2b20      	cmp	r3, #32
 800beb8:	f000 8088 	beq.w	800bfcc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	330c      	adds	r3, #12
 800bec2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800beca:	e853 3f00 	ldrex	r3, [r3]
 800bece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800beda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	330c      	adds	r3, #12
 800bee4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bee8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800beec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bef4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bef8:	e841 2300 	strex	r3, r2, [r1]
 800befc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1d9      	bne.n	800bebc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3314      	adds	r3, #20
 800bf0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf12:	e853 3f00 	ldrex	r3, [r3]
 800bf16:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf1a:	f023 0301 	bic.w	r3, r3, #1
 800bf1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	3314      	adds	r3, #20
 800bf28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf38:	e841 2300 	strex	r3, r2, [r1]
 800bf3c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e1      	bne.n	800bf08 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3314      	adds	r3, #20
 800bf4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3314      	adds	r3, #20
 800bf64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf68:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf70:	e841 2300 	strex	r3, r2, [r1]
 800bf74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e3      	bne.n	800bf44 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	330c      	adds	r3, #12
 800bf90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf94:	e853 3f00 	ldrex	r3, [r3]
 800bf98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf9c:	f023 0310 	bic.w	r3, r3, #16
 800bfa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	330c      	adds	r3, #12
 800bfaa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bfae:	65ba      	str	r2, [r7, #88]	; 0x58
 800bfb0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfb6:	e841 2300 	strex	r3, r2, [r1]
 800bfba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1e3      	bne.n	800bf8a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fd fdba 	bl	8009b40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2202      	movs	r2, #2
 800bfd0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f8bf 	bl	800c166 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfe8:	e09c      	b.n	800c124 <HAL_UART_IRQHandler+0x518>
 800bfea:	bf00      	nop
 800bfec:	0800c31d 	.word	0x0800c31d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c004:	b29b      	uxth	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 808e 	beq.w	800c128 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c00c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 8089 	beq.w	800c128 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	330c      	adds	r3, #12
 800c01c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c020:	e853 3f00 	ldrex	r3, [r3]
 800c024:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c02c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	330c      	adds	r3, #12
 800c036:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c03a:	647a      	str	r2, [r7, #68]	; 0x44
 800c03c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c042:	e841 2300 	strex	r3, r2, [r1]
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1e3      	bne.n	800c016 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3314      	adds	r3, #20
 800c054:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c058:	e853 3f00 	ldrex	r3, [r3]
 800c05c:	623b      	str	r3, [r7, #32]
   return(result);
 800c05e:	6a3b      	ldr	r3, [r7, #32]
 800c060:	f023 0301 	bic.w	r3, r3, #1
 800c064:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3314      	adds	r3, #20
 800c06e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c072:	633a      	str	r2, [r7, #48]	; 0x30
 800c074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c07a:	e841 2300 	strex	r3, r2, [r1]
 800c07e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1e3      	bne.n	800c04e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2220      	movs	r2, #32
 800c08a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	330c      	adds	r3, #12
 800c09a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	e853 3f00 	ldrex	r3, [r3]
 800c0a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f023 0310 	bic.w	r3, r3, #16
 800c0aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	330c      	adds	r3, #12
 800c0b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c0b8:	61fa      	str	r2, [r7, #28]
 800c0ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0bc:	69b9      	ldr	r1, [r7, #24]
 800c0be:	69fa      	ldr	r2, [r7, #28]
 800c0c0:	e841 2300 	strex	r3, r2, [r1]
 800c0c4:	617b      	str	r3, [r7, #20]
   return(result);
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d1e3      	bne.n	800c094 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f844 	bl	800c166 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0de:	e023      	b.n	800c128 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d009      	beq.n	800c100 <HAL_UART_IRQHandler+0x4f4>
 800c0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d003      	beq.n	800c100 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f923 	bl	800c344 <UART_Transmit_IT>
    return;
 800c0fe:	e014      	b.n	800c12a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00e      	beq.n	800c12a <HAL_UART_IRQHandler+0x51e>
 800c10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c114:	2b00      	cmp	r3, #0
 800c116:	d008      	beq.n	800c12a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f962 	bl	800c3e2 <UART_EndTransmit_IT>
    return;
 800c11e:	e004      	b.n	800c12a <HAL_UART_IRQHandler+0x51e>
    return;
 800c120:	bf00      	nop
 800c122:	e002      	b.n	800c12a <HAL_UART_IRQHandler+0x51e>
      return;
 800c124:	bf00      	nop
 800c126:	e000      	b.n	800c12a <HAL_UART_IRQHandler+0x51e>
      return;
 800c128:	bf00      	nop
  }
}
 800c12a:	37e8      	adds	r7, #232	; 0xe8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bc80      	pop	{r7}
 800c140:	4770      	bx	lr

0800c142 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c142:	b480      	push	{r7}
 800c144:	b083      	sub	sp, #12
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c14a:	bf00      	nop
 800c14c:	370c      	adds	r7, #12
 800c14e:	46bd      	mov	sp, r7
 800c150:	bc80      	pop	{r7}
 800c152:	4770      	bx	lr

0800c154 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	bc80      	pop	{r7}
 800c164:	4770      	bx	lr

0800c166 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	460b      	mov	r3, r1
 800c170:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c172:	bf00      	nop
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	bc80      	pop	{r7}
 800c17a:	4770      	bx	lr

0800c17c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b090      	sub	sp, #64	; 0x40
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	603b      	str	r3, [r7, #0]
 800c188:	4613      	mov	r3, r2
 800c18a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c18c:	e050      	b.n	800c230 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c194:	d04c      	beq.n	800c230 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d007      	beq.n	800c1ac <UART_WaitOnFlagUntilTimeout+0x30>
 800c19c:	f7fd fb3a 	bl	8009814 <HAL_GetTick>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d241      	bcs.n	800c230 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	330c      	adds	r3, #12
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	e853 3f00 	ldrex	r3, [r3]
 800c1ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1cc:	637a      	str	r2, [r7, #52]	; 0x34
 800c1ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1d4:	e841 2300 	strex	r3, r2, [r1]
 800c1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1e5      	bne.n	800c1ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3314      	adds	r3, #20
 800c1e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	e853 3f00 	ldrex	r3, [r3]
 800c1ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	f023 0301 	bic.w	r3, r3, #1
 800c1f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	3314      	adds	r3, #20
 800c1fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c200:	623a      	str	r2, [r7, #32]
 800c202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c204:	69f9      	ldr	r1, [r7, #28]
 800c206:	6a3a      	ldr	r2, [r7, #32]
 800c208:	e841 2300 	strex	r3, r2, [r1]
 800c20c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1e5      	bne.n	800c1e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2220      	movs	r2, #32
 800c218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2220      	movs	r2, #32
 800c220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800c22c:	2303      	movs	r3, #3
 800c22e:	e00f      	b.n	800c250 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	4013      	ands	r3, r2
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	bf0c      	ite	eq
 800c240:	2301      	moveq	r3, #1
 800c242:	2300      	movne	r3, #0
 800c244:	b2db      	uxtb	r3, r3
 800c246:	461a      	mov	r2, r3
 800c248:	79fb      	ldrb	r3, [r7, #7]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d09f      	beq.n	800c18e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3740      	adds	r7, #64	; 0x40
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c258:	b480      	push	{r7}
 800c25a:	b095      	sub	sp, #84	; 0x54
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	330c      	adds	r3, #12
 800c266:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c26a:	e853 3f00 	ldrex	r3, [r3]
 800c26e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c276:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	330c      	adds	r3, #12
 800c27e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c280:	643a      	str	r2, [r7, #64]	; 0x40
 800c282:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e5      	bne.n	800c260 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3314      	adds	r3, #20
 800c29a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	e853 3f00 	ldrex	r3, [r3]
 800c2a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	f023 0301 	bic.w	r3, r3, #1
 800c2aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	3314      	adds	r3, #20
 800c2b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2bc:	e841 2300 	strex	r3, r2, [r1]
 800c2c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1e5      	bne.n	800c294 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d119      	bne.n	800c304 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	330c      	adds	r3, #12
 800c2d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	e853 3f00 	ldrex	r3, [r3]
 800c2de:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	f023 0310 	bic.w	r3, r3, #16
 800c2e6:	647b      	str	r3, [r7, #68]	; 0x44
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	330c      	adds	r3, #12
 800c2ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2f0:	61ba      	str	r2, [r7, #24]
 800c2f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f4:	6979      	ldr	r1, [r7, #20]
 800c2f6:	69ba      	ldr	r2, [r7, #24]
 800c2f8:	e841 2300 	strex	r3, r2, [r1]
 800c2fc:	613b      	str	r3, [r7, #16]
   return(result);
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e5      	bne.n	800c2d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2220      	movs	r2, #32
 800c308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c312:	bf00      	nop
 800c314:	3754      	adds	r7, #84	; 0x54
 800c316:	46bd      	mov	sp, r7
 800c318:	bc80      	pop	{r7}
 800c31a:	4770      	bx	lr

0800c31c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2200      	movs	r2, #0
 800c32e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7ff ff0c 	bl	800c154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c33c:	bf00      	nop
 800c33e:	3710      	adds	r7, #16
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c352:	b2db      	uxtb	r3, r3
 800c354:	2b21      	cmp	r3, #33	; 0x21
 800c356:	d13e      	bne.n	800c3d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c360:	d114      	bne.n	800c38c <UART_Transmit_IT+0x48>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d110      	bne.n	800c38c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a1b      	ldr	r3, [r3, #32]
 800c36e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	881b      	ldrh	r3, [r3, #0]
 800c374:	461a      	mov	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c37e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a1b      	ldr	r3, [r3, #32]
 800c384:	1c9a      	adds	r2, r3, #2
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	621a      	str	r2, [r3, #32]
 800c38a:	e008      	b.n	800c39e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a1b      	ldr	r3, [r3, #32]
 800c390:	1c59      	adds	r1, r3, #1
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	6211      	str	r1, [r2, #32]
 800c396:	781a      	ldrb	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d10f      	bne.n	800c3d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68da      	ldr	r2, [r3, #12]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c3c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	68da      	ldr	r2, [r3, #12]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	e000      	b.n	800c3d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c3d6:	2302      	movs	r3, #2
  }
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bc80      	pop	{r7}
 800c3e0:	4770      	bx	lr

0800c3e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68da      	ldr	r2, [r3, #12]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2220      	movs	r2, #32
 800c3fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff fe94 	bl	800c130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b08c      	sub	sp, #48	; 0x30
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2b22      	cmp	r3, #34	; 0x22
 800c424:	f040 80ae 	bne.w	800c584 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c430:	d117      	bne.n	800c462 <UART_Receive_IT+0x50>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d113      	bne.n	800c462 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c43a:	2300      	movs	r3, #0
 800c43c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c442:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c450:	b29a      	uxth	r2, r3
 800c452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c454:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c45a:	1c9a      	adds	r2, r3, #2
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	629a      	str	r2, [r3, #40]	; 0x28
 800c460:	e026      	b.n	800c4b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c466:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c468:	2300      	movs	r3, #0
 800c46a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c474:	d007      	beq.n	800c486 <UART_Receive_IT+0x74>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10a      	bne.n	800c494 <UART_Receive_IT+0x82>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d106      	bne.n	800c494 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c490:	701a      	strb	r2, [r3, #0]
 800c492:	e008      	b.n	800c4a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d15d      	bne.n	800c580 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	68da      	ldr	r2, [r3, #12]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f022 0220 	bic.w	r2, r2, #32
 800c4d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68da      	ldr	r2, [r3, #12]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c4e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	695a      	ldr	r2, [r3, #20]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f022 0201 	bic.w	r2, r2, #1
 800c4f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2220      	movs	r2, #32
 800c4f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c506:	2b01      	cmp	r3, #1
 800c508:	d135      	bne.n	800c576 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	330c      	adds	r3, #12
 800c516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	e853 3f00 	ldrex	r3, [r3]
 800c51e:	613b      	str	r3, [r7, #16]
   return(result);
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	f023 0310 	bic.w	r3, r3, #16
 800c526:	627b      	str	r3, [r7, #36]	; 0x24
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	330c      	adds	r3, #12
 800c52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c530:	623a      	str	r2, [r7, #32]
 800c532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c534:	69f9      	ldr	r1, [r7, #28]
 800c536:	6a3a      	ldr	r2, [r7, #32]
 800c538:	e841 2300 	strex	r3, r2, [r1]
 800c53c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1e5      	bne.n	800c510 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 0310 	and.w	r3, r3, #16
 800c54e:	2b10      	cmp	r3, #16
 800c550:	d10a      	bne.n	800c568 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c552:	2300      	movs	r3, #0
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	60fb      	str	r3, [r7, #12]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c56c:	4619      	mov	r1, r3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7ff fdf9 	bl	800c166 <HAL_UARTEx_RxEventCallback>
 800c574:	e002      	b.n	800c57c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7ff fde3 	bl	800c142 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	e002      	b.n	800c586 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	e000      	b.n	800c586 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c584:	2302      	movs	r3, #2
  }
}
 800c586:	4618      	mov	r0, r3
 800c588:	3730      	adds	r7, #48	; 0x30
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
	...

0800c590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68da      	ldr	r2, [r3, #12]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	689a      	ldr	r2, [r3, #8]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c5ca:	f023 030c 	bic.w	r3, r3, #12
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	6812      	ldr	r2, [r2, #0]
 800c5d2:	68b9      	ldr	r1, [r7, #8]
 800c5d4:	430b      	orrs	r3, r1
 800c5d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	699a      	ldr	r2, [r3, #24]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	430a      	orrs	r2, r1
 800c5ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a2c      	ldr	r2, [pc, #176]	; (800c6a4 <UART_SetConfig+0x114>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d103      	bne.n	800c600 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c5f8:	f7fe f9ec 	bl	800a9d4 <HAL_RCC_GetPCLK2Freq>
 800c5fc:	60f8      	str	r0, [r7, #12]
 800c5fe:	e002      	b.n	800c606 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c600:	f7fe f9d4 	bl	800a9ac <HAL_RCC_GetPCLK1Freq>
 800c604:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	009a      	lsls	r2, r3, #2
 800c610:	441a      	add	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	fbb2 f3f3 	udiv	r3, r2, r3
 800c61c:	4a22      	ldr	r2, [pc, #136]	; (800c6a8 <UART_SetConfig+0x118>)
 800c61e:	fba2 2303 	umull	r2, r3, r2, r3
 800c622:	095b      	lsrs	r3, r3, #5
 800c624:	0119      	lsls	r1, r3, #4
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	4613      	mov	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	009a      	lsls	r2, r3, #2
 800c630:	441a      	add	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	fbb2 f2f3 	udiv	r2, r2, r3
 800c63c:	4b1a      	ldr	r3, [pc, #104]	; (800c6a8 <UART_SetConfig+0x118>)
 800c63e:	fba3 0302 	umull	r0, r3, r3, r2
 800c642:	095b      	lsrs	r3, r3, #5
 800c644:	2064      	movs	r0, #100	; 0x64
 800c646:	fb00 f303 	mul.w	r3, r0, r3
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	011b      	lsls	r3, r3, #4
 800c64e:	3332      	adds	r3, #50	; 0x32
 800c650:	4a15      	ldr	r2, [pc, #84]	; (800c6a8 <UART_SetConfig+0x118>)
 800c652:	fba2 2303 	umull	r2, r3, r2, r3
 800c656:	095b      	lsrs	r3, r3, #5
 800c658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c65c:	4419      	add	r1, r3
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	4613      	mov	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4413      	add	r3, r2
 800c666:	009a      	lsls	r2, r3, #2
 800c668:	441a      	add	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	fbb2 f2f3 	udiv	r2, r2, r3
 800c674:	4b0c      	ldr	r3, [pc, #48]	; (800c6a8 <UART_SetConfig+0x118>)
 800c676:	fba3 0302 	umull	r0, r3, r3, r2
 800c67a:	095b      	lsrs	r3, r3, #5
 800c67c:	2064      	movs	r0, #100	; 0x64
 800c67e:	fb00 f303 	mul.w	r3, r0, r3
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	011b      	lsls	r3, r3, #4
 800c686:	3332      	adds	r3, #50	; 0x32
 800c688:	4a07      	ldr	r2, [pc, #28]	; (800c6a8 <UART_SetConfig+0x118>)
 800c68a:	fba2 2303 	umull	r2, r3, r2, r3
 800c68e:	095b      	lsrs	r3, r3, #5
 800c690:	f003 020f 	and.w	r2, r3, #15
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	440a      	add	r2, r1
 800c69a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c69c:	bf00      	nop
 800c69e:	3710      	adds	r7, #16
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	40013800 	.word	0x40013800
 800c6a8:	51eb851f 	.word	0x51eb851f

0800c6ac <__assert_func>:
 800c6ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6ae:	4614      	mov	r4, r2
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	4b09      	ldr	r3, [pc, #36]	; (800c6d8 <__assert_func+0x2c>)
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68d8      	ldr	r0, [r3, #12]
 800c6ba:	b14c      	cbz	r4, 800c6d0 <__assert_func+0x24>
 800c6bc:	4b07      	ldr	r3, [pc, #28]	; (800c6dc <__assert_func+0x30>)
 800c6be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6c2:	9100      	str	r1, [sp, #0]
 800c6c4:	462b      	mov	r3, r5
 800c6c6:	4906      	ldr	r1, [pc, #24]	; (800c6e0 <__assert_func+0x34>)
 800c6c8:	f000 f814 	bl	800c6f4 <fiprintf>
 800c6cc:	f002 f976 	bl	800e9bc <abort>
 800c6d0:	4b04      	ldr	r3, [pc, #16]	; (800c6e4 <__assert_func+0x38>)
 800c6d2:	461c      	mov	r4, r3
 800c6d4:	e7f3      	b.n	800c6be <__assert_func+0x12>
 800c6d6:	bf00      	nop
 800c6d8:	2000000c 	.word	0x2000000c
 800c6dc:	0801201e 	.word	0x0801201e
 800c6e0:	0801202b 	.word	0x0801202b
 800c6e4:	08012059 	.word	0x08012059

0800c6e8 <__errno>:
 800c6e8:	4b01      	ldr	r3, [pc, #4]	; (800c6f0 <__errno+0x8>)
 800c6ea:	6818      	ldr	r0, [r3, #0]
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	2000000c 	.word	0x2000000c

0800c6f4 <fiprintf>:
 800c6f4:	b40e      	push	{r1, r2, r3}
 800c6f6:	b503      	push	{r0, r1, lr}
 800c6f8:	4601      	mov	r1, r0
 800c6fa:	ab03      	add	r3, sp, #12
 800c6fc:	4805      	ldr	r0, [pc, #20]	; (800c714 <fiprintf+0x20>)
 800c6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c702:	6800      	ldr	r0, [r0, #0]
 800c704:	9301      	str	r3, [sp, #4]
 800c706:	f000 f92d 	bl	800c964 <_vfiprintf_r>
 800c70a:	b002      	add	sp, #8
 800c70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c710:	b003      	add	sp, #12
 800c712:	4770      	bx	lr
 800c714:	2000000c 	.word	0x2000000c

0800c718 <__libc_init_array>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	2600      	movs	r6, #0
 800c71c:	4d0c      	ldr	r5, [pc, #48]	; (800c750 <__libc_init_array+0x38>)
 800c71e:	4c0d      	ldr	r4, [pc, #52]	; (800c754 <__libc_init_array+0x3c>)
 800c720:	1b64      	subs	r4, r4, r5
 800c722:	10a4      	asrs	r4, r4, #2
 800c724:	42a6      	cmp	r6, r4
 800c726:	d109      	bne.n	800c73c <__libc_init_array+0x24>
 800c728:	f004 fd00 	bl	801112c <_init>
 800c72c:	2600      	movs	r6, #0
 800c72e:	4d0a      	ldr	r5, [pc, #40]	; (800c758 <__libc_init_array+0x40>)
 800c730:	4c0a      	ldr	r4, [pc, #40]	; (800c75c <__libc_init_array+0x44>)
 800c732:	1b64      	subs	r4, r4, r5
 800c734:	10a4      	asrs	r4, r4, #2
 800c736:	42a6      	cmp	r6, r4
 800c738:	d105      	bne.n	800c746 <__libc_init_array+0x2e>
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c740:	4798      	blx	r3
 800c742:	3601      	adds	r6, #1
 800c744:	e7ee      	b.n	800c724 <__libc_init_array+0xc>
 800c746:	f855 3b04 	ldr.w	r3, [r5], #4
 800c74a:	4798      	blx	r3
 800c74c:	3601      	adds	r6, #1
 800c74e:	e7f2      	b.n	800c736 <__libc_init_array+0x1e>
 800c750:	080124d4 	.word	0x080124d4
 800c754:	080124d4 	.word	0x080124d4
 800c758:	080124d4 	.word	0x080124d4
 800c75c:	080124d8 	.word	0x080124d8

0800c760 <malloc>:
 800c760:	4b02      	ldr	r3, [pc, #8]	; (800c76c <malloc+0xc>)
 800c762:	4601      	mov	r1, r0
 800c764:	6818      	ldr	r0, [r3, #0]
 800c766:	f000 b87b 	b.w	800c860 <_malloc_r>
 800c76a:	bf00      	nop
 800c76c:	2000000c 	.word	0x2000000c

0800c770 <free>:
 800c770:	4b02      	ldr	r3, [pc, #8]	; (800c77c <free+0xc>)
 800c772:	4601      	mov	r1, r0
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f000 b827 	b.w	800c7c8 <_free_r>
 800c77a:	bf00      	nop
 800c77c:	2000000c 	.word	0x2000000c

0800c780 <memcmp>:
 800c780:	b530      	push	{r4, r5, lr}
 800c782:	2400      	movs	r4, #0
 800c784:	3901      	subs	r1, #1
 800c786:	42a2      	cmp	r2, r4
 800c788:	d101      	bne.n	800c78e <memcmp+0xe>
 800c78a:	2000      	movs	r0, #0
 800c78c:	e005      	b.n	800c79a <memcmp+0x1a>
 800c78e:	5d03      	ldrb	r3, [r0, r4]
 800c790:	3401      	adds	r4, #1
 800c792:	5d0d      	ldrb	r5, [r1, r4]
 800c794:	42ab      	cmp	r3, r5
 800c796:	d0f6      	beq.n	800c786 <memcmp+0x6>
 800c798:	1b58      	subs	r0, r3, r5
 800c79a:	bd30      	pop	{r4, r5, pc}

0800c79c <memcpy>:
 800c79c:	440a      	add	r2, r1
 800c79e:	4291      	cmp	r1, r2
 800c7a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7a4:	d100      	bne.n	800c7a8 <memcpy+0xc>
 800c7a6:	4770      	bx	lr
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ae:	4291      	cmp	r1, r2
 800c7b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7b4:	d1f9      	bne.n	800c7aa <memcpy+0xe>
 800c7b6:	bd10      	pop	{r4, pc}

0800c7b8 <memset>:
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	4402      	add	r2, r0
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d100      	bne.n	800c7c2 <memset+0xa>
 800c7c0:	4770      	bx	lr
 800c7c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c7c6:	e7f9      	b.n	800c7bc <memset+0x4>

0800c7c8 <_free_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4605      	mov	r5, r0
 800c7cc:	2900      	cmp	r1, #0
 800c7ce:	d043      	beq.n	800c858 <_free_r+0x90>
 800c7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7d4:	1f0c      	subs	r4, r1, #4
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	bfb8      	it	lt
 800c7da:	18e4      	addlt	r4, r4, r3
 800c7dc:	f003 fd36 	bl	801024c <__malloc_lock>
 800c7e0:	4a1e      	ldr	r2, [pc, #120]	; (800c85c <_free_r+0x94>)
 800c7e2:	6813      	ldr	r3, [r2, #0]
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	b933      	cbnz	r3, 800c7f6 <_free_r+0x2e>
 800c7e8:	6063      	str	r3, [r4, #4]
 800c7ea:	6014      	str	r4, [r2, #0]
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7f2:	f003 bd31 	b.w	8010258 <__malloc_unlock>
 800c7f6:	42a3      	cmp	r3, r4
 800c7f8:	d90a      	bls.n	800c810 <_free_r+0x48>
 800c7fa:	6821      	ldr	r1, [r4, #0]
 800c7fc:	1862      	adds	r2, r4, r1
 800c7fe:	4293      	cmp	r3, r2
 800c800:	bf01      	itttt	eq
 800c802:	681a      	ldreq	r2, [r3, #0]
 800c804:	685b      	ldreq	r3, [r3, #4]
 800c806:	1852      	addeq	r2, r2, r1
 800c808:	6022      	streq	r2, [r4, #0]
 800c80a:	6063      	str	r3, [r4, #4]
 800c80c:	6004      	str	r4, [r0, #0]
 800c80e:	e7ed      	b.n	800c7ec <_free_r+0x24>
 800c810:	461a      	mov	r2, r3
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	b10b      	cbz	r3, 800c81a <_free_r+0x52>
 800c816:	42a3      	cmp	r3, r4
 800c818:	d9fa      	bls.n	800c810 <_free_r+0x48>
 800c81a:	6811      	ldr	r1, [r2, #0]
 800c81c:	1850      	adds	r0, r2, r1
 800c81e:	42a0      	cmp	r0, r4
 800c820:	d10b      	bne.n	800c83a <_free_r+0x72>
 800c822:	6820      	ldr	r0, [r4, #0]
 800c824:	4401      	add	r1, r0
 800c826:	1850      	adds	r0, r2, r1
 800c828:	4283      	cmp	r3, r0
 800c82a:	6011      	str	r1, [r2, #0]
 800c82c:	d1de      	bne.n	800c7ec <_free_r+0x24>
 800c82e:	6818      	ldr	r0, [r3, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	4401      	add	r1, r0
 800c834:	6011      	str	r1, [r2, #0]
 800c836:	6053      	str	r3, [r2, #4]
 800c838:	e7d8      	b.n	800c7ec <_free_r+0x24>
 800c83a:	d902      	bls.n	800c842 <_free_r+0x7a>
 800c83c:	230c      	movs	r3, #12
 800c83e:	602b      	str	r3, [r5, #0]
 800c840:	e7d4      	b.n	800c7ec <_free_r+0x24>
 800c842:	6820      	ldr	r0, [r4, #0]
 800c844:	1821      	adds	r1, r4, r0
 800c846:	428b      	cmp	r3, r1
 800c848:	bf01      	itttt	eq
 800c84a:	6819      	ldreq	r1, [r3, #0]
 800c84c:	685b      	ldreq	r3, [r3, #4]
 800c84e:	1809      	addeq	r1, r1, r0
 800c850:	6021      	streq	r1, [r4, #0]
 800c852:	6063      	str	r3, [r4, #4]
 800c854:	6054      	str	r4, [r2, #4]
 800c856:	e7c9      	b.n	800c7ec <_free_r+0x24>
 800c858:	bd38      	pop	{r3, r4, r5, pc}
 800c85a:	bf00      	nop
 800c85c:	200002a4 	.word	0x200002a4

0800c860 <_malloc_r>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	1ccd      	adds	r5, r1, #3
 800c864:	f025 0503 	bic.w	r5, r5, #3
 800c868:	3508      	adds	r5, #8
 800c86a:	2d0c      	cmp	r5, #12
 800c86c:	bf38      	it	cc
 800c86e:	250c      	movcc	r5, #12
 800c870:	2d00      	cmp	r5, #0
 800c872:	4606      	mov	r6, r0
 800c874:	db01      	blt.n	800c87a <_malloc_r+0x1a>
 800c876:	42a9      	cmp	r1, r5
 800c878:	d903      	bls.n	800c882 <_malloc_r+0x22>
 800c87a:	230c      	movs	r3, #12
 800c87c:	6033      	str	r3, [r6, #0]
 800c87e:	2000      	movs	r0, #0
 800c880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c882:	f003 fce3 	bl	801024c <__malloc_lock>
 800c886:	4921      	ldr	r1, [pc, #132]	; (800c90c <_malloc_r+0xac>)
 800c888:	680a      	ldr	r2, [r1, #0]
 800c88a:	4614      	mov	r4, r2
 800c88c:	b99c      	cbnz	r4, 800c8b6 <_malloc_r+0x56>
 800c88e:	4f20      	ldr	r7, [pc, #128]	; (800c910 <_malloc_r+0xb0>)
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	b923      	cbnz	r3, 800c89e <_malloc_r+0x3e>
 800c894:	4621      	mov	r1, r4
 800c896:	4630      	mov	r0, r6
 800c898:	f001 f894 	bl	800d9c4 <_sbrk_r>
 800c89c:	6038      	str	r0, [r7, #0]
 800c89e:	4629      	mov	r1, r5
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f001 f88f 	bl	800d9c4 <_sbrk_r>
 800c8a6:	1c43      	adds	r3, r0, #1
 800c8a8:	d123      	bne.n	800c8f2 <_malloc_r+0x92>
 800c8aa:	230c      	movs	r3, #12
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	6033      	str	r3, [r6, #0]
 800c8b0:	f003 fcd2 	bl	8010258 <__malloc_unlock>
 800c8b4:	e7e3      	b.n	800c87e <_malloc_r+0x1e>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	1b5b      	subs	r3, r3, r5
 800c8ba:	d417      	bmi.n	800c8ec <_malloc_r+0x8c>
 800c8bc:	2b0b      	cmp	r3, #11
 800c8be:	d903      	bls.n	800c8c8 <_malloc_r+0x68>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	441c      	add	r4, r3
 800c8c4:	6025      	str	r5, [r4, #0]
 800c8c6:	e004      	b.n	800c8d2 <_malloc_r+0x72>
 800c8c8:	6863      	ldr	r3, [r4, #4]
 800c8ca:	42a2      	cmp	r2, r4
 800c8cc:	bf0c      	ite	eq
 800c8ce:	600b      	streq	r3, [r1, #0]
 800c8d0:	6053      	strne	r3, [r2, #4]
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f003 fcc0 	bl	8010258 <__malloc_unlock>
 800c8d8:	f104 000b 	add.w	r0, r4, #11
 800c8dc:	1d23      	adds	r3, r4, #4
 800c8de:	f020 0007 	bic.w	r0, r0, #7
 800c8e2:	1ac2      	subs	r2, r0, r3
 800c8e4:	d0cc      	beq.n	800c880 <_malloc_r+0x20>
 800c8e6:	1a1b      	subs	r3, r3, r0
 800c8e8:	50a3      	str	r3, [r4, r2]
 800c8ea:	e7c9      	b.n	800c880 <_malloc_r+0x20>
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	6864      	ldr	r4, [r4, #4]
 800c8f0:	e7cc      	b.n	800c88c <_malloc_r+0x2c>
 800c8f2:	1cc4      	adds	r4, r0, #3
 800c8f4:	f024 0403 	bic.w	r4, r4, #3
 800c8f8:	42a0      	cmp	r0, r4
 800c8fa:	d0e3      	beq.n	800c8c4 <_malloc_r+0x64>
 800c8fc:	1a21      	subs	r1, r4, r0
 800c8fe:	4630      	mov	r0, r6
 800c900:	f001 f860 	bl	800d9c4 <_sbrk_r>
 800c904:	3001      	adds	r0, #1
 800c906:	d1dd      	bne.n	800c8c4 <_malloc_r+0x64>
 800c908:	e7cf      	b.n	800c8aa <_malloc_r+0x4a>
 800c90a:	bf00      	nop
 800c90c:	200002a4 	.word	0x200002a4
 800c910:	200002a8 	.word	0x200002a8

0800c914 <__sfputc_r>:
 800c914:	6893      	ldr	r3, [r2, #8]
 800c916:	b410      	push	{r4}
 800c918:	3b01      	subs	r3, #1
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	6093      	str	r3, [r2, #8]
 800c91e:	da07      	bge.n	800c930 <__sfputc_r+0x1c>
 800c920:	6994      	ldr	r4, [r2, #24]
 800c922:	42a3      	cmp	r3, r4
 800c924:	db01      	blt.n	800c92a <__sfputc_r+0x16>
 800c926:	290a      	cmp	r1, #10
 800c928:	d102      	bne.n	800c930 <__sfputc_r+0x1c>
 800c92a:	bc10      	pop	{r4}
 800c92c:	f001 bf86 	b.w	800e83c <__swbuf_r>
 800c930:	6813      	ldr	r3, [r2, #0]
 800c932:	1c58      	adds	r0, r3, #1
 800c934:	6010      	str	r0, [r2, #0]
 800c936:	7019      	strb	r1, [r3, #0]
 800c938:	4608      	mov	r0, r1
 800c93a:	bc10      	pop	{r4}
 800c93c:	4770      	bx	lr

0800c93e <__sfputs_r>:
 800c93e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c940:	4606      	mov	r6, r0
 800c942:	460f      	mov	r7, r1
 800c944:	4614      	mov	r4, r2
 800c946:	18d5      	adds	r5, r2, r3
 800c948:	42ac      	cmp	r4, r5
 800c94a:	d101      	bne.n	800c950 <__sfputs_r+0x12>
 800c94c:	2000      	movs	r0, #0
 800c94e:	e007      	b.n	800c960 <__sfputs_r+0x22>
 800c950:	463a      	mov	r2, r7
 800c952:	4630      	mov	r0, r6
 800c954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c958:	f7ff ffdc 	bl	800c914 <__sfputc_r>
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	d1f3      	bne.n	800c948 <__sfputs_r+0xa>
 800c960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c964 <_vfiprintf_r>:
 800c964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c968:	460d      	mov	r5, r1
 800c96a:	4614      	mov	r4, r2
 800c96c:	4698      	mov	r8, r3
 800c96e:	4606      	mov	r6, r0
 800c970:	b09d      	sub	sp, #116	; 0x74
 800c972:	b118      	cbz	r0, 800c97c <_vfiprintf_r+0x18>
 800c974:	6983      	ldr	r3, [r0, #24]
 800c976:	b90b      	cbnz	r3, 800c97c <_vfiprintf_r+0x18>
 800c978:	f002 ffbe 	bl	800f8f8 <__sinit>
 800c97c:	4b89      	ldr	r3, [pc, #548]	; (800cba4 <_vfiprintf_r+0x240>)
 800c97e:	429d      	cmp	r5, r3
 800c980:	d11b      	bne.n	800c9ba <_vfiprintf_r+0x56>
 800c982:	6875      	ldr	r5, [r6, #4]
 800c984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c986:	07d9      	lsls	r1, r3, #31
 800c988:	d405      	bmi.n	800c996 <_vfiprintf_r+0x32>
 800c98a:	89ab      	ldrh	r3, [r5, #12]
 800c98c:	059a      	lsls	r2, r3, #22
 800c98e:	d402      	bmi.n	800c996 <_vfiprintf_r+0x32>
 800c990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c992:	f003 fbba 	bl	801010a <__retarget_lock_acquire_recursive>
 800c996:	89ab      	ldrh	r3, [r5, #12]
 800c998:	071b      	lsls	r3, r3, #28
 800c99a:	d501      	bpl.n	800c9a0 <_vfiprintf_r+0x3c>
 800c99c:	692b      	ldr	r3, [r5, #16]
 800c99e:	b9eb      	cbnz	r3, 800c9dc <_vfiprintf_r+0x78>
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f001 ff9c 	bl	800e8e0 <__swsetup_r>
 800c9a8:	b1c0      	cbz	r0, 800c9dc <_vfiprintf_r+0x78>
 800c9aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9ac:	07dc      	lsls	r4, r3, #31
 800c9ae:	d50e      	bpl.n	800c9ce <_vfiprintf_r+0x6a>
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	b01d      	add	sp, #116	; 0x74
 800c9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ba:	4b7b      	ldr	r3, [pc, #492]	; (800cba8 <_vfiprintf_r+0x244>)
 800c9bc:	429d      	cmp	r5, r3
 800c9be:	d101      	bne.n	800c9c4 <_vfiprintf_r+0x60>
 800c9c0:	68b5      	ldr	r5, [r6, #8]
 800c9c2:	e7df      	b.n	800c984 <_vfiprintf_r+0x20>
 800c9c4:	4b79      	ldr	r3, [pc, #484]	; (800cbac <_vfiprintf_r+0x248>)
 800c9c6:	429d      	cmp	r5, r3
 800c9c8:	bf08      	it	eq
 800c9ca:	68f5      	ldreq	r5, [r6, #12]
 800c9cc:	e7da      	b.n	800c984 <_vfiprintf_r+0x20>
 800c9ce:	89ab      	ldrh	r3, [r5, #12]
 800c9d0:	0598      	lsls	r0, r3, #22
 800c9d2:	d4ed      	bmi.n	800c9b0 <_vfiprintf_r+0x4c>
 800c9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d6:	f003 fb99 	bl	801010c <__retarget_lock_release_recursive>
 800c9da:	e7e9      	b.n	800c9b0 <_vfiprintf_r+0x4c>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	9309      	str	r3, [sp, #36]	; 0x24
 800c9e0:	2320      	movs	r3, #32
 800c9e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9e6:	2330      	movs	r3, #48	; 0x30
 800c9e8:	f04f 0901 	mov.w	r9, #1
 800c9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cbb0 <_vfiprintf_r+0x24c>
 800c9f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9f8:	4623      	mov	r3, r4
 800c9fa:	469a      	mov	sl, r3
 800c9fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca00:	b10a      	cbz	r2, 800ca06 <_vfiprintf_r+0xa2>
 800ca02:	2a25      	cmp	r2, #37	; 0x25
 800ca04:	d1f9      	bne.n	800c9fa <_vfiprintf_r+0x96>
 800ca06:	ebba 0b04 	subs.w	fp, sl, r4
 800ca0a:	d00b      	beq.n	800ca24 <_vfiprintf_r+0xc0>
 800ca0c:	465b      	mov	r3, fp
 800ca0e:	4622      	mov	r2, r4
 800ca10:	4629      	mov	r1, r5
 800ca12:	4630      	mov	r0, r6
 800ca14:	f7ff ff93 	bl	800c93e <__sfputs_r>
 800ca18:	3001      	adds	r0, #1
 800ca1a:	f000 80aa 	beq.w	800cb72 <_vfiprintf_r+0x20e>
 800ca1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca20:	445a      	add	r2, fp
 800ca22:	9209      	str	r2, [sp, #36]	; 0x24
 800ca24:	f89a 3000 	ldrb.w	r3, [sl]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f000 80a2 	beq.w	800cb72 <_vfiprintf_r+0x20e>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f04f 32ff 	mov.w	r2, #4294967295
 800ca34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca38:	f10a 0a01 	add.w	sl, sl, #1
 800ca3c:	9304      	str	r3, [sp, #16]
 800ca3e:	9307      	str	r3, [sp, #28]
 800ca40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca44:	931a      	str	r3, [sp, #104]	; 0x68
 800ca46:	4654      	mov	r4, sl
 800ca48:	2205      	movs	r2, #5
 800ca4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4e:	4858      	ldr	r0, [pc, #352]	; (800cbb0 <_vfiprintf_r+0x24c>)
 800ca50:	f003 fbd4 	bl	80101fc <memchr>
 800ca54:	9a04      	ldr	r2, [sp, #16]
 800ca56:	b9d8      	cbnz	r0, 800ca90 <_vfiprintf_r+0x12c>
 800ca58:	06d1      	lsls	r1, r2, #27
 800ca5a:	bf44      	itt	mi
 800ca5c:	2320      	movmi	r3, #32
 800ca5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca62:	0713      	lsls	r3, r2, #28
 800ca64:	bf44      	itt	mi
 800ca66:	232b      	movmi	r3, #43	; 0x2b
 800ca68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca70:	2b2a      	cmp	r3, #42	; 0x2a
 800ca72:	d015      	beq.n	800caa0 <_vfiprintf_r+0x13c>
 800ca74:	4654      	mov	r4, sl
 800ca76:	2000      	movs	r0, #0
 800ca78:	f04f 0c0a 	mov.w	ip, #10
 800ca7c:	9a07      	ldr	r2, [sp, #28]
 800ca7e:	4621      	mov	r1, r4
 800ca80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca84:	3b30      	subs	r3, #48	; 0x30
 800ca86:	2b09      	cmp	r3, #9
 800ca88:	d94e      	bls.n	800cb28 <_vfiprintf_r+0x1c4>
 800ca8a:	b1b0      	cbz	r0, 800caba <_vfiprintf_r+0x156>
 800ca8c:	9207      	str	r2, [sp, #28]
 800ca8e:	e014      	b.n	800caba <_vfiprintf_r+0x156>
 800ca90:	eba0 0308 	sub.w	r3, r0, r8
 800ca94:	fa09 f303 	lsl.w	r3, r9, r3
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	46a2      	mov	sl, r4
 800ca9c:	9304      	str	r3, [sp, #16]
 800ca9e:	e7d2      	b.n	800ca46 <_vfiprintf_r+0xe2>
 800caa0:	9b03      	ldr	r3, [sp, #12]
 800caa2:	1d19      	adds	r1, r3, #4
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	9103      	str	r1, [sp, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	bfbb      	ittet	lt
 800caac:	425b      	neglt	r3, r3
 800caae:	f042 0202 	orrlt.w	r2, r2, #2
 800cab2:	9307      	strge	r3, [sp, #28]
 800cab4:	9307      	strlt	r3, [sp, #28]
 800cab6:	bfb8      	it	lt
 800cab8:	9204      	strlt	r2, [sp, #16]
 800caba:	7823      	ldrb	r3, [r4, #0]
 800cabc:	2b2e      	cmp	r3, #46	; 0x2e
 800cabe:	d10c      	bne.n	800cada <_vfiprintf_r+0x176>
 800cac0:	7863      	ldrb	r3, [r4, #1]
 800cac2:	2b2a      	cmp	r3, #42	; 0x2a
 800cac4:	d135      	bne.n	800cb32 <_vfiprintf_r+0x1ce>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	3402      	adds	r4, #2
 800caca:	1d1a      	adds	r2, r3, #4
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	9203      	str	r2, [sp, #12]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	bfb8      	it	lt
 800cad4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cad8:	9305      	str	r3, [sp, #20]
 800cada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cbc0 <_vfiprintf_r+0x25c>
 800cade:	2203      	movs	r2, #3
 800cae0:	4650      	mov	r0, sl
 800cae2:	7821      	ldrb	r1, [r4, #0]
 800cae4:	f003 fb8a 	bl	80101fc <memchr>
 800cae8:	b140      	cbz	r0, 800cafc <_vfiprintf_r+0x198>
 800caea:	2340      	movs	r3, #64	; 0x40
 800caec:	eba0 000a 	sub.w	r0, r0, sl
 800caf0:	fa03 f000 	lsl.w	r0, r3, r0
 800caf4:	9b04      	ldr	r3, [sp, #16]
 800caf6:	3401      	adds	r4, #1
 800caf8:	4303      	orrs	r3, r0
 800cafa:	9304      	str	r3, [sp, #16]
 800cafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb00:	2206      	movs	r2, #6
 800cb02:	482c      	ldr	r0, [pc, #176]	; (800cbb4 <_vfiprintf_r+0x250>)
 800cb04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb08:	f003 fb78 	bl	80101fc <memchr>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d03f      	beq.n	800cb90 <_vfiprintf_r+0x22c>
 800cb10:	4b29      	ldr	r3, [pc, #164]	; (800cbb8 <_vfiprintf_r+0x254>)
 800cb12:	bb1b      	cbnz	r3, 800cb5c <_vfiprintf_r+0x1f8>
 800cb14:	9b03      	ldr	r3, [sp, #12]
 800cb16:	3307      	adds	r3, #7
 800cb18:	f023 0307 	bic.w	r3, r3, #7
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	9303      	str	r3, [sp, #12]
 800cb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb22:	443b      	add	r3, r7
 800cb24:	9309      	str	r3, [sp, #36]	; 0x24
 800cb26:	e767      	b.n	800c9f8 <_vfiprintf_r+0x94>
 800cb28:	460c      	mov	r4, r1
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb30:	e7a5      	b.n	800ca7e <_vfiprintf_r+0x11a>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f04f 0c0a 	mov.w	ip, #10
 800cb38:	4619      	mov	r1, r3
 800cb3a:	3401      	adds	r4, #1
 800cb3c:	9305      	str	r3, [sp, #20]
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb44:	3a30      	subs	r2, #48	; 0x30
 800cb46:	2a09      	cmp	r2, #9
 800cb48:	d903      	bls.n	800cb52 <_vfiprintf_r+0x1ee>
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d0c5      	beq.n	800cada <_vfiprintf_r+0x176>
 800cb4e:	9105      	str	r1, [sp, #20]
 800cb50:	e7c3      	b.n	800cada <_vfiprintf_r+0x176>
 800cb52:	4604      	mov	r4, r0
 800cb54:	2301      	movs	r3, #1
 800cb56:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb5a:	e7f0      	b.n	800cb3e <_vfiprintf_r+0x1da>
 800cb5c:	ab03      	add	r3, sp, #12
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	462a      	mov	r2, r5
 800cb62:	4630      	mov	r0, r6
 800cb64:	4b15      	ldr	r3, [pc, #84]	; (800cbbc <_vfiprintf_r+0x258>)
 800cb66:	a904      	add	r1, sp, #16
 800cb68:	f000 f8ca 	bl	800cd00 <_printf_float>
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	1c78      	adds	r0, r7, #1
 800cb70:	d1d6      	bne.n	800cb20 <_vfiprintf_r+0x1bc>
 800cb72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb74:	07d9      	lsls	r1, r3, #31
 800cb76:	d405      	bmi.n	800cb84 <_vfiprintf_r+0x220>
 800cb78:	89ab      	ldrh	r3, [r5, #12]
 800cb7a:	059a      	lsls	r2, r3, #22
 800cb7c:	d402      	bmi.n	800cb84 <_vfiprintf_r+0x220>
 800cb7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb80:	f003 fac4 	bl	801010c <__retarget_lock_release_recursive>
 800cb84:	89ab      	ldrh	r3, [r5, #12]
 800cb86:	065b      	lsls	r3, r3, #25
 800cb88:	f53f af12 	bmi.w	800c9b0 <_vfiprintf_r+0x4c>
 800cb8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb8e:	e711      	b.n	800c9b4 <_vfiprintf_r+0x50>
 800cb90:	ab03      	add	r3, sp, #12
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	462a      	mov	r2, r5
 800cb96:	4630      	mov	r0, r6
 800cb98:	4b08      	ldr	r3, [pc, #32]	; (800cbbc <_vfiprintf_r+0x258>)
 800cb9a:	a904      	add	r1, sp, #16
 800cb9c:	f000 fb4c 	bl	800d238 <_printf_i>
 800cba0:	e7e4      	b.n	800cb6c <_vfiprintf_r+0x208>
 800cba2:	bf00      	nop
 800cba4:	080122b8 	.word	0x080122b8
 800cba8:	080122d8 	.word	0x080122d8
 800cbac:	08012298 	.word	0x08012298
 800cbb0:	08012060 	.word	0x08012060
 800cbb4:	0801206a 	.word	0x0801206a
 800cbb8:	0800cd01 	.word	0x0800cd01
 800cbbc:	0800c93f 	.word	0x0800c93f
 800cbc0:	08012066 	.word	0x08012066

0800cbc4 <__cvt>:
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbca:	461f      	mov	r7, r3
 800cbcc:	bfbb      	ittet	lt
 800cbce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800cbd2:	461f      	movlt	r7, r3
 800cbd4:	2300      	movge	r3, #0
 800cbd6:	232d      	movlt	r3, #45	; 0x2d
 800cbd8:	b088      	sub	sp, #32
 800cbda:	4614      	mov	r4, r2
 800cbdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cbde:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800cbe0:	7013      	strb	r3, [r2, #0]
 800cbe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbe4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800cbe8:	f023 0820 	bic.w	r8, r3, #32
 800cbec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cbf0:	d005      	beq.n	800cbfe <__cvt+0x3a>
 800cbf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cbf6:	d100      	bne.n	800cbfa <__cvt+0x36>
 800cbf8:	3501      	adds	r5, #1
 800cbfa:	2302      	movs	r3, #2
 800cbfc:	e000      	b.n	800cc00 <__cvt+0x3c>
 800cbfe:	2303      	movs	r3, #3
 800cc00:	aa07      	add	r2, sp, #28
 800cc02:	9204      	str	r2, [sp, #16]
 800cc04:	aa06      	add	r2, sp, #24
 800cc06:	e9cd a202 	strd	sl, r2, [sp, #8]
 800cc0a:	e9cd 3500 	strd	r3, r5, [sp]
 800cc0e:	4622      	mov	r2, r4
 800cc10:	463b      	mov	r3, r7
 800cc12:	f001 ff69 	bl	800eae8 <_dtoa_r>
 800cc16:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	d102      	bne.n	800cc24 <__cvt+0x60>
 800cc1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc20:	07db      	lsls	r3, r3, #31
 800cc22:	d522      	bpl.n	800cc6a <__cvt+0xa6>
 800cc24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc28:	eb06 0905 	add.w	r9, r6, r5
 800cc2c:	d110      	bne.n	800cc50 <__cvt+0x8c>
 800cc2e:	7833      	ldrb	r3, [r6, #0]
 800cc30:	2b30      	cmp	r3, #48	; 0x30
 800cc32:	d10a      	bne.n	800cc4a <__cvt+0x86>
 800cc34:	2200      	movs	r2, #0
 800cc36:	2300      	movs	r3, #0
 800cc38:	4620      	mov	r0, r4
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	f7f3 febe 	bl	80009bc <__aeabi_dcmpeq>
 800cc40:	b918      	cbnz	r0, 800cc4a <__cvt+0x86>
 800cc42:	f1c5 0501 	rsb	r5, r5, #1
 800cc46:	f8ca 5000 	str.w	r5, [sl]
 800cc4a:	f8da 3000 	ldr.w	r3, [sl]
 800cc4e:	4499      	add	r9, r3
 800cc50:	2200      	movs	r2, #0
 800cc52:	2300      	movs	r3, #0
 800cc54:	4620      	mov	r0, r4
 800cc56:	4639      	mov	r1, r7
 800cc58:	f7f3 feb0 	bl	80009bc <__aeabi_dcmpeq>
 800cc5c:	b108      	cbz	r0, 800cc62 <__cvt+0x9e>
 800cc5e:	f8cd 901c 	str.w	r9, [sp, #28]
 800cc62:	2230      	movs	r2, #48	; 0x30
 800cc64:	9b07      	ldr	r3, [sp, #28]
 800cc66:	454b      	cmp	r3, r9
 800cc68:	d307      	bcc.n	800cc7a <__cvt+0xb6>
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	9b07      	ldr	r3, [sp, #28]
 800cc6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cc70:	1b9b      	subs	r3, r3, r6
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	b008      	add	sp, #32
 800cc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc7a:	1c59      	adds	r1, r3, #1
 800cc7c:	9107      	str	r1, [sp, #28]
 800cc7e:	701a      	strb	r2, [r3, #0]
 800cc80:	e7f0      	b.n	800cc64 <__cvt+0xa0>

0800cc82 <__exponent>:
 800cc82:	4603      	mov	r3, r0
 800cc84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc86:	2900      	cmp	r1, #0
 800cc88:	f803 2b02 	strb.w	r2, [r3], #2
 800cc8c:	bfb6      	itet	lt
 800cc8e:	222d      	movlt	r2, #45	; 0x2d
 800cc90:	222b      	movge	r2, #43	; 0x2b
 800cc92:	4249      	neglt	r1, r1
 800cc94:	2909      	cmp	r1, #9
 800cc96:	7042      	strb	r2, [r0, #1]
 800cc98:	dd2b      	ble.n	800ccf2 <__exponent+0x70>
 800cc9a:	f10d 0407 	add.w	r4, sp, #7
 800cc9e:	46a4      	mov	ip, r4
 800cca0:	270a      	movs	r7, #10
 800cca2:	fb91 f6f7 	sdiv	r6, r1, r7
 800cca6:	460a      	mov	r2, r1
 800cca8:	46a6      	mov	lr, r4
 800ccaa:	fb07 1516 	mls	r5, r7, r6, r1
 800ccae:	2a63      	cmp	r2, #99	; 0x63
 800ccb0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800ccb4:	4631      	mov	r1, r6
 800ccb6:	f104 34ff 	add.w	r4, r4, #4294967295
 800ccba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ccbe:	dcf0      	bgt.n	800cca2 <__exponent+0x20>
 800ccc0:	3130      	adds	r1, #48	; 0x30
 800ccc2:	f1ae 0502 	sub.w	r5, lr, #2
 800ccc6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ccca:	4629      	mov	r1, r5
 800cccc:	1c44      	adds	r4, r0, #1
 800ccce:	4561      	cmp	r1, ip
 800ccd0:	d30a      	bcc.n	800cce8 <__exponent+0x66>
 800ccd2:	f10d 0209 	add.w	r2, sp, #9
 800ccd6:	eba2 020e 	sub.w	r2, r2, lr
 800ccda:	4565      	cmp	r5, ip
 800ccdc:	bf88      	it	hi
 800ccde:	2200      	movhi	r2, #0
 800cce0:	4413      	add	r3, r2
 800cce2:	1a18      	subs	r0, r3, r0
 800cce4:	b003      	add	sp, #12
 800cce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cce8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccec:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ccf0:	e7ed      	b.n	800ccce <__exponent+0x4c>
 800ccf2:	2330      	movs	r3, #48	; 0x30
 800ccf4:	3130      	adds	r1, #48	; 0x30
 800ccf6:	7083      	strb	r3, [r0, #2]
 800ccf8:	70c1      	strb	r1, [r0, #3]
 800ccfa:	1d03      	adds	r3, r0, #4
 800ccfc:	e7f1      	b.n	800cce2 <__exponent+0x60>
	...

0800cd00 <_printf_float>:
 800cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd04:	b091      	sub	sp, #68	; 0x44
 800cd06:	460c      	mov	r4, r1
 800cd08:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cd0c:	4616      	mov	r6, r2
 800cd0e:	461f      	mov	r7, r3
 800cd10:	4605      	mov	r5, r0
 800cd12:	f003 f9f5 	bl	8010100 <_localeconv_r>
 800cd16:	6803      	ldr	r3, [r0, #0]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd1c:	f7f3 fa22 	bl	8000164 <strlen>
 800cd20:	2300      	movs	r3, #0
 800cd22:	930e      	str	r3, [sp, #56]	; 0x38
 800cd24:	f8d8 3000 	ldr.w	r3, [r8]
 800cd28:	900a      	str	r0, [sp, #40]	; 0x28
 800cd2a:	3307      	adds	r3, #7
 800cd2c:	f023 0307 	bic.w	r3, r3, #7
 800cd30:	f103 0208 	add.w	r2, r3, #8
 800cd34:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cd38:	f8d4 b000 	ldr.w	fp, [r4]
 800cd3c:	f8c8 2000 	str.w	r2, [r8]
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cd48:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800cd4c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800cd50:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd52:	f04f 32ff 	mov.w	r2, #4294967295
 800cd56:	4640      	mov	r0, r8
 800cd58:	4b9c      	ldr	r3, [pc, #624]	; (800cfcc <_printf_float+0x2cc>)
 800cd5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd5c:	f7f3 fe60 	bl	8000a20 <__aeabi_dcmpun>
 800cd60:	bb70      	cbnz	r0, 800cdc0 <_printf_float+0xc0>
 800cd62:	f04f 32ff 	mov.w	r2, #4294967295
 800cd66:	4640      	mov	r0, r8
 800cd68:	4b98      	ldr	r3, [pc, #608]	; (800cfcc <_printf_float+0x2cc>)
 800cd6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd6c:	f7f3 fe3a 	bl	80009e4 <__aeabi_dcmple>
 800cd70:	bb30      	cbnz	r0, 800cdc0 <_printf_float+0xc0>
 800cd72:	2200      	movs	r2, #0
 800cd74:	2300      	movs	r3, #0
 800cd76:	4640      	mov	r0, r8
 800cd78:	4651      	mov	r1, sl
 800cd7a:	f7f3 fe29 	bl	80009d0 <__aeabi_dcmplt>
 800cd7e:	b110      	cbz	r0, 800cd86 <_printf_float+0x86>
 800cd80:	232d      	movs	r3, #45	; 0x2d
 800cd82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd86:	4b92      	ldr	r3, [pc, #584]	; (800cfd0 <_printf_float+0x2d0>)
 800cd88:	4892      	ldr	r0, [pc, #584]	; (800cfd4 <_printf_float+0x2d4>)
 800cd8a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cd8e:	bf94      	ite	ls
 800cd90:	4698      	movls	r8, r3
 800cd92:	4680      	movhi	r8, r0
 800cd94:	2303      	movs	r3, #3
 800cd96:	f04f 0a00 	mov.w	sl, #0
 800cd9a:	6123      	str	r3, [r4, #16]
 800cd9c:	f02b 0304 	bic.w	r3, fp, #4
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	4633      	mov	r3, r6
 800cda4:	4621      	mov	r1, r4
 800cda6:	4628      	mov	r0, r5
 800cda8:	9700      	str	r7, [sp, #0]
 800cdaa:	aa0f      	add	r2, sp, #60	; 0x3c
 800cdac:	f000 f9d4 	bl	800d158 <_printf_common>
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	f040 8090 	bne.w	800ced6 <_printf_float+0x1d6>
 800cdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdba:	b011      	add	sp, #68	; 0x44
 800cdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc0:	4642      	mov	r2, r8
 800cdc2:	4653      	mov	r3, sl
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	4651      	mov	r1, sl
 800cdc8:	f7f3 fe2a 	bl	8000a20 <__aeabi_dcmpun>
 800cdcc:	b148      	cbz	r0, 800cde2 <_printf_float+0xe2>
 800cdce:	f1ba 0f00 	cmp.w	sl, #0
 800cdd2:	bfb8      	it	lt
 800cdd4:	232d      	movlt	r3, #45	; 0x2d
 800cdd6:	4880      	ldr	r0, [pc, #512]	; (800cfd8 <_printf_float+0x2d8>)
 800cdd8:	bfb8      	it	lt
 800cdda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cdde:	4b7f      	ldr	r3, [pc, #508]	; (800cfdc <_printf_float+0x2dc>)
 800cde0:	e7d3      	b.n	800cd8a <_printf_float+0x8a>
 800cde2:	6863      	ldr	r3, [r4, #4]
 800cde4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cde8:	1c5a      	adds	r2, r3, #1
 800cdea:	d142      	bne.n	800ce72 <_printf_float+0x172>
 800cdec:	2306      	movs	r3, #6
 800cdee:	6063      	str	r3, [r4, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	9206      	str	r2, [sp, #24]
 800cdf4:	aa0e      	add	r2, sp, #56	; 0x38
 800cdf6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800cdfa:	aa0d      	add	r2, sp, #52	; 0x34
 800cdfc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ce00:	9203      	str	r2, [sp, #12]
 800ce02:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ce06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ce0a:	6023      	str	r3, [r4, #0]
 800ce0c:	6863      	ldr	r3, [r4, #4]
 800ce0e:	4642      	mov	r2, r8
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	4628      	mov	r0, r5
 800ce14:	4653      	mov	r3, sl
 800ce16:	910b      	str	r1, [sp, #44]	; 0x2c
 800ce18:	f7ff fed4 	bl	800cbc4 <__cvt>
 800ce1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce1e:	4680      	mov	r8, r0
 800ce20:	2947      	cmp	r1, #71	; 0x47
 800ce22:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ce24:	d108      	bne.n	800ce38 <_printf_float+0x138>
 800ce26:	1cc8      	adds	r0, r1, #3
 800ce28:	db02      	blt.n	800ce30 <_printf_float+0x130>
 800ce2a:	6863      	ldr	r3, [r4, #4]
 800ce2c:	4299      	cmp	r1, r3
 800ce2e:	dd40      	ble.n	800ceb2 <_printf_float+0x1b2>
 800ce30:	f1a9 0902 	sub.w	r9, r9, #2
 800ce34:	fa5f f989 	uxtb.w	r9, r9
 800ce38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ce3c:	d81f      	bhi.n	800ce7e <_printf_float+0x17e>
 800ce3e:	464a      	mov	r2, r9
 800ce40:	3901      	subs	r1, #1
 800ce42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce46:	910d      	str	r1, [sp, #52]	; 0x34
 800ce48:	f7ff ff1b 	bl	800cc82 <__exponent>
 800ce4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce4e:	4682      	mov	sl, r0
 800ce50:	1813      	adds	r3, r2, r0
 800ce52:	2a01      	cmp	r2, #1
 800ce54:	6123      	str	r3, [r4, #16]
 800ce56:	dc02      	bgt.n	800ce5e <_printf_float+0x15e>
 800ce58:	6822      	ldr	r2, [r4, #0]
 800ce5a:	07d2      	lsls	r2, r2, #31
 800ce5c:	d501      	bpl.n	800ce62 <_printf_float+0x162>
 800ce5e:	3301      	adds	r3, #1
 800ce60:	6123      	str	r3, [r4, #16]
 800ce62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d09b      	beq.n	800cda2 <_printf_float+0xa2>
 800ce6a:	232d      	movs	r3, #45	; 0x2d
 800ce6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce70:	e797      	b.n	800cda2 <_printf_float+0xa2>
 800ce72:	2947      	cmp	r1, #71	; 0x47
 800ce74:	d1bc      	bne.n	800cdf0 <_printf_float+0xf0>
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1ba      	bne.n	800cdf0 <_printf_float+0xf0>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e7b7      	b.n	800cdee <_printf_float+0xee>
 800ce7e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ce82:	d118      	bne.n	800ceb6 <_printf_float+0x1b6>
 800ce84:	2900      	cmp	r1, #0
 800ce86:	6863      	ldr	r3, [r4, #4]
 800ce88:	dd0b      	ble.n	800cea2 <_printf_float+0x1a2>
 800ce8a:	6121      	str	r1, [r4, #16]
 800ce8c:	b913      	cbnz	r3, 800ce94 <_printf_float+0x194>
 800ce8e:	6822      	ldr	r2, [r4, #0]
 800ce90:	07d0      	lsls	r0, r2, #31
 800ce92:	d502      	bpl.n	800ce9a <_printf_float+0x19a>
 800ce94:	3301      	adds	r3, #1
 800ce96:	440b      	add	r3, r1
 800ce98:	6123      	str	r3, [r4, #16]
 800ce9a:	f04f 0a00 	mov.w	sl, #0
 800ce9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cea0:	e7df      	b.n	800ce62 <_printf_float+0x162>
 800cea2:	b913      	cbnz	r3, 800ceaa <_printf_float+0x1aa>
 800cea4:	6822      	ldr	r2, [r4, #0]
 800cea6:	07d2      	lsls	r2, r2, #31
 800cea8:	d501      	bpl.n	800ceae <_printf_float+0x1ae>
 800ceaa:	3302      	adds	r3, #2
 800ceac:	e7f4      	b.n	800ce98 <_printf_float+0x198>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e7f2      	b.n	800ce98 <_printf_float+0x198>
 800ceb2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ceb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ceb8:	4299      	cmp	r1, r3
 800ceba:	db05      	blt.n	800cec8 <_printf_float+0x1c8>
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	6121      	str	r1, [r4, #16]
 800cec0:	07d8      	lsls	r0, r3, #31
 800cec2:	d5ea      	bpl.n	800ce9a <_printf_float+0x19a>
 800cec4:	1c4b      	adds	r3, r1, #1
 800cec6:	e7e7      	b.n	800ce98 <_printf_float+0x198>
 800cec8:	2900      	cmp	r1, #0
 800ceca:	bfcc      	ite	gt
 800cecc:	2201      	movgt	r2, #1
 800cece:	f1c1 0202 	rsble	r2, r1, #2
 800ced2:	4413      	add	r3, r2
 800ced4:	e7e0      	b.n	800ce98 <_printf_float+0x198>
 800ced6:	6823      	ldr	r3, [r4, #0]
 800ced8:	055a      	lsls	r2, r3, #21
 800ceda:	d407      	bmi.n	800ceec <_printf_float+0x1ec>
 800cedc:	6923      	ldr	r3, [r4, #16]
 800cede:	4642      	mov	r2, r8
 800cee0:	4631      	mov	r1, r6
 800cee2:	4628      	mov	r0, r5
 800cee4:	47b8      	blx	r7
 800cee6:	3001      	adds	r0, #1
 800cee8:	d12b      	bne.n	800cf42 <_printf_float+0x242>
 800ceea:	e764      	b.n	800cdb6 <_printf_float+0xb6>
 800ceec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cef0:	f240 80dd 	bls.w	800d0ae <_printf_float+0x3ae>
 800cef4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cef8:	2200      	movs	r2, #0
 800cefa:	2300      	movs	r3, #0
 800cefc:	f7f3 fd5e 	bl	80009bc <__aeabi_dcmpeq>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	d033      	beq.n	800cf6c <_printf_float+0x26c>
 800cf04:	2301      	movs	r3, #1
 800cf06:	4631      	mov	r1, r6
 800cf08:	4628      	mov	r0, r5
 800cf0a:	4a35      	ldr	r2, [pc, #212]	; (800cfe0 <_printf_float+0x2e0>)
 800cf0c:	47b8      	blx	r7
 800cf0e:	3001      	adds	r0, #1
 800cf10:	f43f af51 	beq.w	800cdb6 <_printf_float+0xb6>
 800cf14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	db02      	blt.n	800cf22 <_printf_float+0x222>
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	07d8      	lsls	r0, r3, #31
 800cf20:	d50f      	bpl.n	800cf42 <_printf_float+0x242>
 800cf22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf26:	4631      	mov	r1, r6
 800cf28:	4628      	mov	r0, r5
 800cf2a:	47b8      	blx	r7
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	f43f af42 	beq.w	800cdb6 <_printf_float+0xb6>
 800cf32:	f04f 0800 	mov.w	r8, #0
 800cf36:	f104 091a 	add.w	r9, r4, #26
 800cf3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	4543      	cmp	r3, r8
 800cf40:	dc09      	bgt.n	800cf56 <_printf_float+0x256>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	079b      	lsls	r3, r3, #30
 800cf46:	f100 8102 	bmi.w	800d14e <_printf_float+0x44e>
 800cf4a:	68e0      	ldr	r0, [r4, #12]
 800cf4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf4e:	4298      	cmp	r0, r3
 800cf50:	bfb8      	it	lt
 800cf52:	4618      	movlt	r0, r3
 800cf54:	e731      	b.n	800cdba <_printf_float+0xba>
 800cf56:	2301      	movs	r3, #1
 800cf58:	464a      	mov	r2, r9
 800cf5a:	4631      	mov	r1, r6
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	47b8      	blx	r7
 800cf60:	3001      	adds	r0, #1
 800cf62:	f43f af28 	beq.w	800cdb6 <_printf_float+0xb6>
 800cf66:	f108 0801 	add.w	r8, r8, #1
 800cf6a:	e7e6      	b.n	800cf3a <_printf_float+0x23a>
 800cf6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	dc38      	bgt.n	800cfe4 <_printf_float+0x2e4>
 800cf72:	2301      	movs	r3, #1
 800cf74:	4631      	mov	r1, r6
 800cf76:	4628      	mov	r0, r5
 800cf78:	4a19      	ldr	r2, [pc, #100]	; (800cfe0 <_printf_float+0x2e0>)
 800cf7a:	47b8      	blx	r7
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	f43f af1a 	beq.w	800cdb6 <_printf_float+0xb6>
 800cf82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cf86:	4313      	orrs	r3, r2
 800cf88:	d102      	bne.n	800cf90 <_printf_float+0x290>
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	07d9      	lsls	r1, r3, #31
 800cf8e:	d5d8      	bpl.n	800cf42 <_printf_float+0x242>
 800cf90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf94:	4631      	mov	r1, r6
 800cf96:	4628      	mov	r0, r5
 800cf98:	47b8      	blx	r7
 800cf9a:	3001      	adds	r0, #1
 800cf9c:	f43f af0b 	beq.w	800cdb6 <_printf_float+0xb6>
 800cfa0:	f04f 0900 	mov.w	r9, #0
 800cfa4:	f104 0a1a 	add.w	sl, r4, #26
 800cfa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfaa:	425b      	negs	r3, r3
 800cfac:	454b      	cmp	r3, r9
 800cfae:	dc01      	bgt.n	800cfb4 <_printf_float+0x2b4>
 800cfb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfb2:	e794      	b.n	800cede <_printf_float+0x1de>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	4652      	mov	r2, sl
 800cfb8:	4631      	mov	r1, r6
 800cfba:	4628      	mov	r0, r5
 800cfbc:	47b8      	blx	r7
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	f43f aef9 	beq.w	800cdb6 <_printf_float+0xb6>
 800cfc4:	f109 0901 	add.w	r9, r9, #1
 800cfc8:	e7ee      	b.n	800cfa8 <_printf_float+0x2a8>
 800cfca:	bf00      	nop
 800cfcc:	7fefffff 	.word	0x7fefffff
 800cfd0:	08012071 	.word	0x08012071
 800cfd4:	08012075 	.word	0x08012075
 800cfd8:	0801207d 	.word	0x0801207d
 800cfdc:	08012079 	.word	0x08012079
 800cfe0:	08012081 	.word	0x08012081
 800cfe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	bfa8      	it	ge
 800cfec:	461a      	movge	r2, r3
 800cfee:	2a00      	cmp	r2, #0
 800cff0:	4691      	mov	r9, r2
 800cff2:	dc37      	bgt.n	800d064 <_printf_float+0x364>
 800cff4:	f04f 0b00 	mov.w	fp, #0
 800cff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cffc:	f104 021a 	add.w	r2, r4, #26
 800d000:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d004:	ebaa 0309 	sub.w	r3, sl, r9
 800d008:	455b      	cmp	r3, fp
 800d00a:	dc33      	bgt.n	800d074 <_printf_float+0x374>
 800d00c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d010:	429a      	cmp	r2, r3
 800d012:	db3b      	blt.n	800d08c <_printf_float+0x38c>
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	07da      	lsls	r2, r3, #31
 800d018:	d438      	bmi.n	800d08c <_printf_float+0x38c>
 800d01a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d01c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d01e:	eba2 030a 	sub.w	r3, r2, sl
 800d022:	eba2 0901 	sub.w	r9, r2, r1
 800d026:	4599      	cmp	r9, r3
 800d028:	bfa8      	it	ge
 800d02a:	4699      	movge	r9, r3
 800d02c:	f1b9 0f00 	cmp.w	r9, #0
 800d030:	dc34      	bgt.n	800d09c <_printf_float+0x39c>
 800d032:	f04f 0800 	mov.w	r8, #0
 800d036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d03a:	f104 0a1a 	add.w	sl, r4, #26
 800d03e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d042:	1a9b      	subs	r3, r3, r2
 800d044:	eba3 0309 	sub.w	r3, r3, r9
 800d048:	4543      	cmp	r3, r8
 800d04a:	f77f af7a 	ble.w	800cf42 <_printf_float+0x242>
 800d04e:	2301      	movs	r3, #1
 800d050:	4652      	mov	r2, sl
 800d052:	4631      	mov	r1, r6
 800d054:	4628      	mov	r0, r5
 800d056:	47b8      	blx	r7
 800d058:	3001      	adds	r0, #1
 800d05a:	f43f aeac 	beq.w	800cdb6 <_printf_float+0xb6>
 800d05e:	f108 0801 	add.w	r8, r8, #1
 800d062:	e7ec      	b.n	800d03e <_printf_float+0x33e>
 800d064:	4613      	mov	r3, r2
 800d066:	4631      	mov	r1, r6
 800d068:	4642      	mov	r2, r8
 800d06a:	4628      	mov	r0, r5
 800d06c:	47b8      	blx	r7
 800d06e:	3001      	adds	r0, #1
 800d070:	d1c0      	bne.n	800cff4 <_printf_float+0x2f4>
 800d072:	e6a0      	b.n	800cdb6 <_printf_float+0xb6>
 800d074:	2301      	movs	r3, #1
 800d076:	4631      	mov	r1, r6
 800d078:	4628      	mov	r0, r5
 800d07a:	920b      	str	r2, [sp, #44]	; 0x2c
 800d07c:	47b8      	blx	r7
 800d07e:	3001      	adds	r0, #1
 800d080:	f43f ae99 	beq.w	800cdb6 <_printf_float+0xb6>
 800d084:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d086:	f10b 0b01 	add.w	fp, fp, #1
 800d08a:	e7b9      	b.n	800d000 <_printf_float+0x300>
 800d08c:	4631      	mov	r1, r6
 800d08e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d092:	4628      	mov	r0, r5
 800d094:	47b8      	blx	r7
 800d096:	3001      	adds	r0, #1
 800d098:	d1bf      	bne.n	800d01a <_printf_float+0x31a>
 800d09a:	e68c      	b.n	800cdb6 <_printf_float+0xb6>
 800d09c:	464b      	mov	r3, r9
 800d09e:	4631      	mov	r1, r6
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	eb08 020a 	add.w	r2, r8, sl
 800d0a6:	47b8      	blx	r7
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	d1c2      	bne.n	800d032 <_printf_float+0x332>
 800d0ac:	e683      	b.n	800cdb6 <_printf_float+0xb6>
 800d0ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0b0:	2a01      	cmp	r2, #1
 800d0b2:	dc01      	bgt.n	800d0b8 <_printf_float+0x3b8>
 800d0b4:	07db      	lsls	r3, r3, #31
 800d0b6:	d537      	bpl.n	800d128 <_printf_float+0x428>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	4642      	mov	r2, r8
 800d0bc:	4631      	mov	r1, r6
 800d0be:	4628      	mov	r0, r5
 800d0c0:	47b8      	blx	r7
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	f43f ae77 	beq.w	800cdb6 <_printf_float+0xb6>
 800d0c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	47b8      	blx	r7
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	f43f ae6f 	beq.w	800cdb6 <_printf_float+0xb6>
 800d0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2300      	movs	r3, #0
 800d0e0:	f7f3 fc6c 	bl	80009bc <__aeabi_dcmpeq>
 800d0e4:	b9d8      	cbnz	r0, 800d11e <_printf_float+0x41e>
 800d0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0e8:	f108 0201 	add.w	r2, r8, #1
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	4631      	mov	r1, r6
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	47b8      	blx	r7
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d10e      	bne.n	800d116 <_printf_float+0x416>
 800d0f8:	e65d      	b.n	800cdb6 <_printf_float+0xb6>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	464a      	mov	r2, r9
 800d0fe:	4631      	mov	r1, r6
 800d100:	4628      	mov	r0, r5
 800d102:	47b8      	blx	r7
 800d104:	3001      	adds	r0, #1
 800d106:	f43f ae56 	beq.w	800cdb6 <_printf_float+0xb6>
 800d10a:	f108 0801 	add.w	r8, r8, #1
 800d10e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d110:	3b01      	subs	r3, #1
 800d112:	4543      	cmp	r3, r8
 800d114:	dcf1      	bgt.n	800d0fa <_printf_float+0x3fa>
 800d116:	4653      	mov	r3, sl
 800d118:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d11c:	e6e0      	b.n	800cee0 <_printf_float+0x1e0>
 800d11e:	f04f 0800 	mov.w	r8, #0
 800d122:	f104 091a 	add.w	r9, r4, #26
 800d126:	e7f2      	b.n	800d10e <_printf_float+0x40e>
 800d128:	2301      	movs	r3, #1
 800d12a:	4642      	mov	r2, r8
 800d12c:	e7df      	b.n	800d0ee <_printf_float+0x3ee>
 800d12e:	2301      	movs	r3, #1
 800d130:	464a      	mov	r2, r9
 800d132:	4631      	mov	r1, r6
 800d134:	4628      	mov	r0, r5
 800d136:	47b8      	blx	r7
 800d138:	3001      	adds	r0, #1
 800d13a:	f43f ae3c 	beq.w	800cdb6 <_printf_float+0xb6>
 800d13e:	f108 0801 	add.w	r8, r8, #1
 800d142:	68e3      	ldr	r3, [r4, #12]
 800d144:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d146:	1a5b      	subs	r3, r3, r1
 800d148:	4543      	cmp	r3, r8
 800d14a:	dcf0      	bgt.n	800d12e <_printf_float+0x42e>
 800d14c:	e6fd      	b.n	800cf4a <_printf_float+0x24a>
 800d14e:	f04f 0800 	mov.w	r8, #0
 800d152:	f104 0919 	add.w	r9, r4, #25
 800d156:	e7f4      	b.n	800d142 <_printf_float+0x442>

0800d158 <_printf_common>:
 800d158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d15c:	4616      	mov	r6, r2
 800d15e:	4699      	mov	r9, r3
 800d160:	688a      	ldr	r2, [r1, #8]
 800d162:	690b      	ldr	r3, [r1, #16]
 800d164:	4607      	mov	r7, r0
 800d166:	4293      	cmp	r3, r2
 800d168:	bfb8      	it	lt
 800d16a:	4613      	movlt	r3, r2
 800d16c:	6033      	str	r3, [r6, #0]
 800d16e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d172:	460c      	mov	r4, r1
 800d174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d178:	b10a      	cbz	r2, 800d17e <_printf_common+0x26>
 800d17a:	3301      	adds	r3, #1
 800d17c:	6033      	str	r3, [r6, #0]
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	0699      	lsls	r1, r3, #26
 800d182:	bf42      	ittt	mi
 800d184:	6833      	ldrmi	r3, [r6, #0]
 800d186:	3302      	addmi	r3, #2
 800d188:	6033      	strmi	r3, [r6, #0]
 800d18a:	6825      	ldr	r5, [r4, #0]
 800d18c:	f015 0506 	ands.w	r5, r5, #6
 800d190:	d106      	bne.n	800d1a0 <_printf_common+0x48>
 800d192:	f104 0a19 	add.w	sl, r4, #25
 800d196:	68e3      	ldr	r3, [r4, #12]
 800d198:	6832      	ldr	r2, [r6, #0]
 800d19a:	1a9b      	subs	r3, r3, r2
 800d19c:	42ab      	cmp	r3, r5
 800d19e:	dc28      	bgt.n	800d1f2 <_printf_common+0x9a>
 800d1a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1a4:	1e13      	subs	r3, r2, #0
 800d1a6:	6822      	ldr	r2, [r4, #0]
 800d1a8:	bf18      	it	ne
 800d1aa:	2301      	movne	r3, #1
 800d1ac:	0692      	lsls	r2, r2, #26
 800d1ae:	d42d      	bmi.n	800d20c <_printf_common+0xb4>
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1b8:	47c0      	blx	r8
 800d1ba:	3001      	adds	r0, #1
 800d1bc:	d020      	beq.n	800d200 <_printf_common+0xa8>
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	68e5      	ldr	r5, [r4, #12]
 800d1c2:	f003 0306 	and.w	r3, r3, #6
 800d1c6:	2b04      	cmp	r3, #4
 800d1c8:	bf18      	it	ne
 800d1ca:	2500      	movne	r5, #0
 800d1cc:	6832      	ldr	r2, [r6, #0]
 800d1ce:	f04f 0600 	mov.w	r6, #0
 800d1d2:	68a3      	ldr	r3, [r4, #8]
 800d1d4:	bf08      	it	eq
 800d1d6:	1aad      	subeq	r5, r5, r2
 800d1d8:	6922      	ldr	r2, [r4, #16]
 800d1da:	bf08      	it	eq
 800d1dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	bfc4      	itt	gt
 800d1e4:	1a9b      	subgt	r3, r3, r2
 800d1e6:	18ed      	addgt	r5, r5, r3
 800d1e8:	341a      	adds	r4, #26
 800d1ea:	42b5      	cmp	r5, r6
 800d1ec:	d11a      	bne.n	800d224 <_printf_common+0xcc>
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	e008      	b.n	800d204 <_printf_common+0xac>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4652      	mov	r2, sl
 800d1f6:	4649      	mov	r1, r9
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	47c0      	blx	r8
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	d103      	bne.n	800d208 <_printf_common+0xb0>
 800d200:	f04f 30ff 	mov.w	r0, #4294967295
 800d204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d208:	3501      	adds	r5, #1
 800d20a:	e7c4      	b.n	800d196 <_printf_common+0x3e>
 800d20c:	2030      	movs	r0, #48	; 0x30
 800d20e:	18e1      	adds	r1, r4, r3
 800d210:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d214:	1c5a      	adds	r2, r3, #1
 800d216:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d21a:	4422      	add	r2, r4
 800d21c:	3302      	adds	r3, #2
 800d21e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d222:	e7c5      	b.n	800d1b0 <_printf_common+0x58>
 800d224:	2301      	movs	r3, #1
 800d226:	4622      	mov	r2, r4
 800d228:	4649      	mov	r1, r9
 800d22a:	4638      	mov	r0, r7
 800d22c:	47c0      	blx	r8
 800d22e:	3001      	adds	r0, #1
 800d230:	d0e6      	beq.n	800d200 <_printf_common+0xa8>
 800d232:	3601      	adds	r6, #1
 800d234:	e7d9      	b.n	800d1ea <_printf_common+0x92>
	...

0800d238 <_printf_i>:
 800d238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d23c:	460c      	mov	r4, r1
 800d23e:	7e27      	ldrb	r7, [r4, #24]
 800d240:	4691      	mov	r9, r2
 800d242:	2f78      	cmp	r7, #120	; 0x78
 800d244:	4680      	mov	r8, r0
 800d246:	469a      	mov	sl, r3
 800d248:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d24a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d24e:	d807      	bhi.n	800d260 <_printf_i+0x28>
 800d250:	2f62      	cmp	r7, #98	; 0x62
 800d252:	d80a      	bhi.n	800d26a <_printf_i+0x32>
 800d254:	2f00      	cmp	r7, #0
 800d256:	f000 80d9 	beq.w	800d40c <_printf_i+0x1d4>
 800d25a:	2f58      	cmp	r7, #88	; 0x58
 800d25c:	f000 80a4 	beq.w	800d3a8 <_printf_i+0x170>
 800d260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d268:	e03a      	b.n	800d2e0 <_printf_i+0xa8>
 800d26a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d26e:	2b15      	cmp	r3, #21
 800d270:	d8f6      	bhi.n	800d260 <_printf_i+0x28>
 800d272:	a001      	add	r0, pc, #4	; (adr r0, 800d278 <_printf_i+0x40>)
 800d274:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d278:	0800d2d1 	.word	0x0800d2d1
 800d27c:	0800d2e5 	.word	0x0800d2e5
 800d280:	0800d261 	.word	0x0800d261
 800d284:	0800d261 	.word	0x0800d261
 800d288:	0800d261 	.word	0x0800d261
 800d28c:	0800d261 	.word	0x0800d261
 800d290:	0800d2e5 	.word	0x0800d2e5
 800d294:	0800d261 	.word	0x0800d261
 800d298:	0800d261 	.word	0x0800d261
 800d29c:	0800d261 	.word	0x0800d261
 800d2a0:	0800d261 	.word	0x0800d261
 800d2a4:	0800d3f3 	.word	0x0800d3f3
 800d2a8:	0800d315 	.word	0x0800d315
 800d2ac:	0800d3d5 	.word	0x0800d3d5
 800d2b0:	0800d261 	.word	0x0800d261
 800d2b4:	0800d261 	.word	0x0800d261
 800d2b8:	0800d415 	.word	0x0800d415
 800d2bc:	0800d261 	.word	0x0800d261
 800d2c0:	0800d315 	.word	0x0800d315
 800d2c4:	0800d261 	.word	0x0800d261
 800d2c8:	0800d261 	.word	0x0800d261
 800d2cc:	0800d3dd 	.word	0x0800d3dd
 800d2d0:	680b      	ldr	r3, [r1, #0]
 800d2d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d2d6:	1d1a      	adds	r2, r3, #4
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	600a      	str	r2, [r1, #0]
 800d2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e0a4      	b.n	800d42e <_printf_i+0x1f6>
 800d2e4:	6825      	ldr	r5, [r4, #0]
 800d2e6:	6808      	ldr	r0, [r1, #0]
 800d2e8:	062e      	lsls	r6, r5, #24
 800d2ea:	f100 0304 	add.w	r3, r0, #4
 800d2ee:	d50a      	bpl.n	800d306 <_printf_i+0xce>
 800d2f0:	6805      	ldr	r5, [r0, #0]
 800d2f2:	600b      	str	r3, [r1, #0]
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	da03      	bge.n	800d300 <_printf_i+0xc8>
 800d2f8:	232d      	movs	r3, #45	; 0x2d
 800d2fa:	426d      	negs	r5, r5
 800d2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d300:	230a      	movs	r3, #10
 800d302:	485e      	ldr	r0, [pc, #376]	; (800d47c <_printf_i+0x244>)
 800d304:	e019      	b.n	800d33a <_printf_i+0x102>
 800d306:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d30a:	6805      	ldr	r5, [r0, #0]
 800d30c:	600b      	str	r3, [r1, #0]
 800d30e:	bf18      	it	ne
 800d310:	b22d      	sxthne	r5, r5
 800d312:	e7ef      	b.n	800d2f4 <_printf_i+0xbc>
 800d314:	680b      	ldr	r3, [r1, #0]
 800d316:	6825      	ldr	r5, [r4, #0]
 800d318:	1d18      	adds	r0, r3, #4
 800d31a:	6008      	str	r0, [r1, #0]
 800d31c:	0628      	lsls	r0, r5, #24
 800d31e:	d501      	bpl.n	800d324 <_printf_i+0xec>
 800d320:	681d      	ldr	r5, [r3, #0]
 800d322:	e002      	b.n	800d32a <_printf_i+0xf2>
 800d324:	0669      	lsls	r1, r5, #25
 800d326:	d5fb      	bpl.n	800d320 <_printf_i+0xe8>
 800d328:	881d      	ldrh	r5, [r3, #0]
 800d32a:	2f6f      	cmp	r7, #111	; 0x6f
 800d32c:	bf0c      	ite	eq
 800d32e:	2308      	moveq	r3, #8
 800d330:	230a      	movne	r3, #10
 800d332:	4852      	ldr	r0, [pc, #328]	; (800d47c <_printf_i+0x244>)
 800d334:	2100      	movs	r1, #0
 800d336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d33a:	6866      	ldr	r6, [r4, #4]
 800d33c:	2e00      	cmp	r6, #0
 800d33e:	bfa8      	it	ge
 800d340:	6821      	ldrge	r1, [r4, #0]
 800d342:	60a6      	str	r6, [r4, #8]
 800d344:	bfa4      	itt	ge
 800d346:	f021 0104 	bicge.w	r1, r1, #4
 800d34a:	6021      	strge	r1, [r4, #0]
 800d34c:	b90d      	cbnz	r5, 800d352 <_printf_i+0x11a>
 800d34e:	2e00      	cmp	r6, #0
 800d350:	d04d      	beq.n	800d3ee <_printf_i+0x1b6>
 800d352:	4616      	mov	r6, r2
 800d354:	fbb5 f1f3 	udiv	r1, r5, r3
 800d358:	fb03 5711 	mls	r7, r3, r1, r5
 800d35c:	5dc7      	ldrb	r7, [r0, r7]
 800d35e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d362:	462f      	mov	r7, r5
 800d364:	42bb      	cmp	r3, r7
 800d366:	460d      	mov	r5, r1
 800d368:	d9f4      	bls.n	800d354 <_printf_i+0x11c>
 800d36a:	2b08      	cmp	r3, #8
 800d36c:	d10b      	bne.n	800d386 <_printf_i+0x14e>
 800d36e:	6823      	ldr	r3, [r4, #0]
 800d370:	07df      	lsls	r7, r3, #31
 800d372:	d508      	bpl.n	800d386 <_printf_i+0x14e>
 800d374:	6923      	ldr	r3, [r4, #16]
 800d376:	6861      	ldr	r1, [r4, #4]
 800d378:	4299      	cmp	r1, r3
 800d37a:	bfde      	ittt	le
 800d37c:	2330      	movle	r3, #48	; 0x30
 800d37e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d382:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d386:	1b92      	subs	r2, r2, r6
 800d388:	6122      	str	r2, [r4, #16]
 800d38a:	464b      	mov	r3, r9
 800d38c:	4621      	mov	r1, r4
 800d38e:	4640      	mov	r0, r8
 800d390:	f8cd a000 	str.w	sl, [sp]
 800d394:	aa03      	add	r2, sp, #12
 800d396:	f7ff fedf 	bl	800d158 <_printf_common>
 800d39a:	3001      	adds	r0, #1
 800d39c:	d14c      	bne.n	800d438 <_printf_i+0x200>
 800d39e:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a2:	b004      	add	sp, #16
 800d3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a8:	4834      	ldr	r0, [pc, #208]	; (800d47c <_printf_i+0x244>)
 800d3aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d3ae:	680e      	ldr	r6, [r1, #0]
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d3b6:	061f      	lsls	r7, r3, #24
 800d3b8:	600e      	str	r6, [r1, #0]
 800d3ba:	d514      	bpl.n	800d3e6 <_printf_i+0x1ae>
 800d3bc:	07d9      	lsls	r1, r3, #31
 800d3be:	bf44      	itt	mi
 800d3c0:	f043 0320 	orrmi.w	r3, r3, #32
 800d3c4:	6023      	strmi	r3, [r4, #0]
 800d3c6:	b91d      	cbnz	r5, 800d3d0 <_printf_i+0x198>
 800d3c8:	6823      	ldr	r3, [r4, #0]
 800d3ca:	f023 0320 	bic.w	r3, r3, #32
 800d3ce:	6023      	str	r3, [r4, #0]
 800d3d0:	2310      	movs	r3, #16
 800d3d2:	e7af      	b.n	800d334 <_printf_i+0xfc>
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	f043 0320 	orr.w	r3, r3, #32
 800d3da:	6023      	str	r3, [r4, #0]
 800d3dc:	2378      	movs	r3, #120	; 0x78
 800d3de:	4828      	ldr	r0, [pc, #160]	; (800d480 <_printf_i+0x248>)
 800d3e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3e4:	e7e3      	b.n	800d3ae <_printf_i+0x176>
 800d3e6:	065e      	lsls	r6, r3, #25
 800d3e8:	bf48      	it	mi
 800d3ea:	b2ad      	uxthmi	r5, r5
 800d3ec:	e7e6      	b.n	800d3bc <_printf_i+0x184>
 800d3ee:	4616      	mov	r6, r2
 800d3f0:	e7bb      	b.n	800d36a <_printf_i+0x132>
 800d3f2:	680b      	ldr	r3, [r1, #0]
 800d3f4:	6826      	ldr	r6, [r4, #0]
 800d3f6:	1d1d      	adds	r5, r3, #4
 800d3f8:	6960      	ldr	r0, [r4, #20]
 800d3fa:	600d      	str	r5, [r1, #0]
 800d3fc:	0635      	lsls	r5, r6, #24
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	d501      	bpl.n	800d406 <_printf_i+0x1ce>
 800d402:	6018      	str	r0, [r3, #0]
 800d404:	e002      	b.n	800d40c <_printf_i+0x1d4>
 800d406:	0671      	lsls	r1, r6, #25
 800d408:	d5fb      	bpl.n	800d402 <_printf_i+0x1ca>
 800d40a:	8018      	strh	r0, [r3, #0]
 800d40c:	2300      	movs	r3, #0
 800d40e:	4616      	mov	r6, r2
 800d410:	6123      	str	r3, [r4, #16]
 800d412:	e7ba      	b.n	800d38a <_printf_i+0x152>
 800d414:	680b      	ldr	r3, [r1, #0]
 800d416:	1d1a      	adds	r2, r3, #4
 800d418:	600a      	str	r2, [r1, #0]
 800d41a:	681e      	ldr	r6, [r3, #0]
 800d41c:	2100      	movs	r1, #0
 800d41e:	4630      	mov	r0, r6
 800d420:	6862      	ldr	r2, [r4, #4]
 800d422:	f002 feeb 	bl	80101fc <memchr>
 800d426:	b108      	cbz	r0, 800d42c <_printf_i+0x1f4>
 800d428:	1b80      	subs	r0, r0, r6
 800d42a:	6060      	str	r0, [r4, #4]
 800d42c:	6863      	ldr	r3, [r4, #4]
 800d42e:	6123      	str	r3, [r4, #16]
 800d430:	2300      	movs	r3, #0
 800d432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d436:	e7a8      	b.n	800d38a <_printf_i+0x152>
 800d438:	4632      	mov	r2, r6
 800d43a:	4649      	mov	r1, r9
 800d43c:	4640      	mov	r0, r8
 800d43e:	6923      	ldr	r3, [r4, #16]
 800d440:	47d0      	blx	sl
 800d442:	3001      	adds	r0, #1
 800d444:	d0ab      	beq.n	800d39e <_printf_i+0x166>
 800d446:	6823      	ldr	r3, [r4, #0]
 800d448:	079b      	lsls	r3, r3, #30
 800d44a:	d413      	bmi.n	800d474 <_printf_i+0x23c>
 800d44c:	68e0      	ldr	r0, [r4, #12]
 800d44e:	9b03      	ldr	r3, [sp, #12]
 800d450:	4298      	cmp	r0, r3
 800d452:	bfb8      	it	lt
 800d454:	4618      	movlt	r0, r3
 800d456:	e7a4      	b.n	800d3a2 <_printf_i+0x16a>
 800d458:	2301      	movs	r3, #1
 800d45a:	4632      	mov	r2, r6
 800d45c:	4649      	mov	r1, r9
 800d45e:	4640      	mov	r0, r8
 800d460:	47d0      	blx	sl
 800d462:	3001      	adds	r0, #1
 800d464:	d09b      	beq.n	800d39e <_printf_i+0x166>
 800d466:	3501      	adds	r5, #1
 800d468:	68e3      	ldr	r3, [r4, #12]
 800d46a:	9903      	ldr	r1, [sp, #12]
 800d46c:	1a5b      	subs	r3, r3, r1
 800d46e:	42ab      	cmp	r3, r5
 800d470:	dcf2      	bgt.n	800d458 <_printf_i+0x220>
 800d472:	e7eb      	b.n	800d44c <_printf_i+0x214>
 800d474:	2500      	movs	r5, #0
 800d476:	f104 0619 	add.w	r6, r4, #25
 800d47a:	e7f5      	b.n	800d468 <_printf_i+0x230>
 800d47c:	08012083 	.word	0x08012083
 800d480:	08012094 	.word	0x08012094

0800d484 <_scanf_float>:
 800d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d488:	b087      	sub	sp, #28
 800d48a:	9303      	str	r3, [sp, #12]
 800d48c:	688b      	ldr	r3, [r1, #8]
 800d48e:	4617      	mov	r7, r2
 800d490:	1e5a      	subs	r2, r3, #1
 800d492:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d496:	bf85      	ittet	hi
 800d498:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d49c:	195b      	addhi	r3, r3, r5
 800d49e:	2300      	movls	r3, #0
 800d4a0:	9302      	strhi	r3, [sp, #8]
 800d4a2:	bf88      	it	hi
 800d4a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d4a8:	468b      	mov	fp, r1
 800d4aa:	f04f 0500 	mov.w	r5, #0
 800d4ae:	bf8c      	ite	hi
 800d4b0:	608b      	strhi	r3, [r1, #8]
 800d4b2:	9302      	strls	r3, [sp, #8]
 800d4b4:	680b      	ldr	r3, [r1, #0]
 800d4b6:	4680      	mov	r8, r0
 800d4b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d4bc:	f84b 3b1c 	str.w	r3, [fp], #28
 800d4c0:	460c      	mov	r4, r1
 800d4c2:	465e      	mov	r6, fp
 800d4c4:	46aa      	mov	sl, r5
 800d4c6:	46a9      	mov	r9, r5
 800d4c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d4cc:	9501      	str	r5, [sp, #4]
 800d4ce:	68a2      	ldr	r2, [r4, #8]
 800d4d0:	b152      	cbz	r2, 800d4e8 <_scanf_float+0x64>
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b4e      	cmp	r3, #78	; 0x4e
 800d4d8:	d864      	bhi.n	800d5a4 <_scanf_float+0x120>
 800d4da:	2b40      	cmp	r3, #64	; 0x40
 800d4dc:	d83c      	bhi.n	800d558 <_scanf_float+0xd4>
 800d4de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d4e2:	b2c8      	uxtb	r0, r1
 800d4e4:	280e      	cmp	r0, #14
 800d4e6:	d93a      	bls.n	800d55e <_scanf_float+0xda>
 800d4e8:	f1b9 0f00 	cmp.w	r9, #0
 800d4ec:	d003      	beq.n	800d4f6 <_scanf_float+0x72>
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4f4:	6023      	str	r3, [r4, #0]
 800d4f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4fa:	f1ba 0f01 	cmp.w	sl, #1
 800d4fe:	f200 8113 	bhi.w	800d728 <_scanf_float+0x2a4>
 800d502:	455e      	cmp	r6, fp
 800d504:	f200 8105 	bhi.w	800d712 <_scanf_float+0x28e>
 800d508:	2501      	movs	r5, #1
 800d50a:	4628      	mov	r0, r5
 800d50c:	b007      	add	sp, #28
 800d50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d512:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d516:	2a0d      	cmp	r2, #13
 800d518:	d8e6      	bhi.n	800d4e8 <_scanf_float+0x64>
 800d51a:	a101      	add	r1, pc, #4	; (adr r1, 800d520 <_scanf_float+0x9c>)
 800d51c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d520:	0800d65f 	.word	0x0800d65f
 800d524:	0800d4e9 	.word	0x0800d4e9
 800d528:	0800d4e9 	.word	0x0800d4e9
 800d52c:	0800d4e9 	.word	0x0800d4e9
 800d530:	0800d6bf 	.word	0x0800d6bf
 800d534:	0800d697 	.word	0x0800d697
 800d538:	0800d4e9 	.word	0x0800d4e9
 800d53c:	0800d4e9 	.word	0x0800d4e9
 800d540:	0800d66d 	.word	0x0800d66d
 800d544:	0800d4e9 	.word	0x0800d4e9
 800d548:	0800d4e9 	.word	0x0800d4e9
 800d54c:	0800d4e9 	.word	0x0800d4e9
 800d550:	0800d4e9 	.word	0x0800d4e9
 800d554:	0800d625 	.word	0x0800d625
 800d558:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d55c:	e7db      	b.n	800d516 <_scanf_float+0x92>
 800d55e:	290e      	cmp	r1, #14
 800d560:	d8c2      	bhi.n	800d4e8 <_scanf_float+0x64>
 800d562:	a001      	add	r0, pc, #4	; (adr r0, 800d568 <_scanf_float+0xe4>)
 800d564:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d568:	0800d617 	.word	0x0800d617
 800d56c:	0800d4e9 	.word	0x0800d4e9
 800d570:	0800d617 	.word	0x0800d617
 800d574:	0800d6ab 	.word	0x0800d6ab
 800d578:	0800d4e9 	.word	0x0800d4e9
 800d57c:	0800d5c5 	.word	0x0800d5c5
 800d580:	0800d601 	.word	0x0800d601
 800d584:	0800d601 	.word	0x0800d601
 800d588:	0800d601 	.word	0x0800d601
 800d58c:	0800d601 	.word	0x0800d601
 800d590:	0800d601 	.word	0x0800d601
 800d594:	0800d601 	.word	0x0800d601
 800d598:	0800d601 	.word	0x0800d601
 800d59c:	0800d601 	.word	0x0800d601
 800d5a0:	0800d601 	.word	0x0800d601
 800d5a4:	2b6e      	cmp	r3, #110	; 0x6e
 800d5a6:	d809      	bhi.n	800d5bc <_scanf_float+0x138>
 800d5a8:	2b60      	cmp	r3, #96	; 0x60
 800d5aa:	d8b2      	bhi.n	800d512 <_scanf_float+0x8e>
 800d5ac:	2b54      	cmp	r3, #84	; 0x54
 800d5ae:	d077      	beq.n	800d6a0 <_scanf_float+0x21c>
 800d5b0:	2b59      	cmp	r3, #89	; 0x59
 800d5b2:	d199      	bne.n	800d4e8 <_scanf_float+0x64>
 800d5b4:	2d07      	cmp	r5, #7
 800d5b6:	d197      	bne.n	800d4e8 <_scanf_float+0x64>
 800d5b8:	2508      	movs	r5, #8
 800d5ba:	e029      	b.n	800d610 <_scanf_float+0x18c>
 800d5bc:	2b74      	cmp	r3, #116	; 0x74
 800d5be:	d06f      	beq.n	800d6a0 <_scanf_float+0x21c>
 800d5c0:	2b79      	cmp	r3, #121	; 0x79
 800d5c2:	e7f6      	b.n	800d5b2 <_scanf_float+0x12e>
 800d5c4:	6821      	ldr	r1, [r4, #0]
 800d5c6:	05c8      	lsls	r0, r1, #23
 800d5c8:	d51a      	bpl.n	800d600 <_scanf_float+0x17c>
 800d5ca:	9b02      	ldr	r3, [sp, #8]
 800d5cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d5d0:	6021      	str	r1, [r4, #0]
 800d5d2:	f109 0901 	add.w	r9, r9, #1
 800d5d6:	b11b      	cbz	r3, 800d5e0 <_scanf_float+0x15c>
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	3201      	adds	r2, #1
 800d5dc:	9302      	str	r3, [sp, #8]
 800d5de:	60a2      	str	r2, [r4, #8]
 800d5e0:	68a3      	ldr	r3, [r4, #8]
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	60a3      	str	r3, [r4, #8]
 800d5e6:	6923      	ldr	r3, [r4, #16]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	6123      	str	r3, [r4, #16]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	607b      	str	r3, [r7, #4]
 800d5f4:	f340 8084 	ble.w	800d700 <_scanf_float+0x27c>
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	603b      	str	r3, [r7, #0]
 800d5fe:	e766      	b.n	800d4ce <_scanf_float+0x4a>
 800d600:	eb1a 0f05 	cmn.w	sl, r5
 800d604:	f47f af70 	bne.w	800d4e8 <_scanf_float+0x64>
 800d608:	6822      	ldr	r2, [r4, #0]
 800d60a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d60e:	6022      	str	r2, [r4, #0]
 800d610:	f806 3b01 	strb.w	r3, [r6], #1
 800d614:	e7e4      	b.n	800d5e0 <_scanf_float+0x15c>
 800d616:	6822      	ldr	r2, [r4, #0]
 800d618:	0610      	lsls	r0, r2, #24
 800d61a:	f57f af65 	bpl.w	800d4e8 <_scanf_float+0x64>
 800d61e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d622:	e7f4      	b.n	800d60e <_scanf_float+0x18a>
 800d624:	f1ba 0f00 	cmp.w	sl, #0
 800d628:	d10e      	bne.n	800d648 <_scanf_float+0x1c4>
 800d62a:	f1b9 0f00 	cmp.w	r9, #0
 800d62e:	d10e      	bne.n	800d64e <_scanf_float+0x1ca>
 800d630:	6822      	ldr	r2, [r4, #0]
 800d632:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d636:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d63a:	d108      	bne.n	800d64e <_scanf_float+0x1ca>
 800d63c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d640:	f04f 0a01 	mov.w	sl, #1
 800d644:	6022      	str	r2, [r4, #0]
 800d646:	e7e3      	b.n	800d610 <_scanf_float+0x18c>
 800d648:	f1ba 0f02 	cmp.w	sl, #2
 800d64c:	d055      	beq.n	800d6fa <_scanf_float+0x276>
 800d64e:	2d01      	cmp	r5, #1
 800d650:	d002      	beq.n	800d658 <_scanf_float+0x1d4>
 800d652:	2d04      	cmp	r5, #4
 800d654:	f47f af48 	bne.w	800d4e8 <_scanf_float+0x64>
 800d658:	3501      	adds	r5, #1
 800d65a:	b2ed      	uxtb	r5, r5
 800d65c:	e7d8      	b.n	800d610 <_scanf_float+0x18c>
 800d65e:	f1ba 0f01 	cmp.w	sl, #1
 800d662:	f47f af41 	bne.w	800d4e8 <_scanf_float+0x64>
 800d666:	f04f 0a02 	mov.w	sl, #2
 800d66a:	e7d1      	b.n	800d610 <_scanf_float+0x18c>
 800d66c:	b97d      	cbnz	r5, 800d68e <_scanf_float+0x20a>
 800d66e:	f1b9 0f00 	cmp.w	r9, #0
 800d672:	f47f af3c 	bne.w	800d4ee <_scanf_float+0x6a>
 800d676:	6822      	ldr	r2, [r4, #0]
 800d678:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d67c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d680:	f47f af39 	bne.w	800d4f6 <_scanf_float+0x72>
 800d684:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d688:	2501      	movs	r5, #1
 800d68a:	6022      	str	r2, [r4, #0]
 800d68c:	e7c0      	b.n	800d610 <_scanf_float+0x18c>
 800d68e:	2d03      	cmp	r5, #3
 800d690:	d0e2      	beq.n	800d658 <_scanf_float+0x1d4>
 800d692:	2d05      	cmp	r5, #5
 800d694:	e7de      	b.n	800d654 <_scanf_float+0x1d0>
 800d696:	2d02      	cmp	r5, #2
 800d698:	f47f af26 	bne.w	800d4e8 <_scanf_float+0x64>
 800d69c:	2503      	movs	r5, #3
 800d69e:	e7b7      	b.n	800d610 <_scanf_float+0x18c>
 800d6a0:	2d06      	cmp	r5, #6
 800d6a2:	f47f af21 	bne.w	800d4e8 <_scanf_float+0x64>
 800d6a6:	2507      	movs	r5, #7
 800d6a8:	e7b2      	b.n	800d610 <_scanf_float+0x18c>
 800d6aa:	6822      	ldr	r2, [r4, #0]
 800d6ac:	0591      	lsls	r1, r2, #22
 800d6ae:	f57f af1b 	bpl.w	800d4e8 <_scanf_float+0x64>
 800d6b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d6b6:	6022      	str	r2, [r4, #0]
 800d6b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800d6bc:	e7a8      	b.n	800d610 <_scanf_float+0x18c>
 800d6be:	6822      	ldr	r2, [r4, #0]
 800d6c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d6c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d6c8:	d006      	beq.n	800d6d8 <_scanf_float+0x254>
 800d6ca:	0550      	lsls	r0, r2, #21
 800d6cc:	f57f af0c 	bpl.w	800d4e8 <_scanf_float+0x64>
 800d6d0:	f1b9 0f00 	cmp.w	r9, #0
 800d6d4:	f43f af0f 	beq.w	800d4f6 <_scanf_float+0x72>
 800d6d8:	0591      	lsls	r1, r2, #22
 800d6da:	bf58      	it	pl
 800d6dc:	9901      	ldrpl	r1, [sp, #4]
 800d6de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d6e2:	bf58      	it	pl
 800d6e4:	eba9 0101 	subpl.w	r1, r9, r1
 800d6e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d6ec:	f04f 0900 	mov.w	r9, #0
 800d6f0:	bf58      	it	pl
 800d6f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d6f6:	6022      	str	r2, [r4, #0]
 800d6f8:	e78a      	b.n	800d610 <_scanf_float+0x18c>
 800d6fa:	f04f 0a03 	mov.w	sl, #3
 800d6fe:	e787      	b.n	800d610 <_scanf_float+0x18c>
 800d700:	4639      	mov	r1, r7
 800d702:	4640      	mov	r0, r8
 800d704:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d708:	4798      	blx	r3
 800d70a:	2800      	cmp	r0, #0
 800d70c:	f43f aedf 	beq.w	800d4ce <_scanf_float+0x4a>
 800d710:	e6ea      	b.n	800d4e8 <_scanf_float+0x64>
 800d712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d716:	463a      	mov	r2, r7
 800d718:	4640      	mov	r0, r8
 800d71a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d71e:	4798      	blx	r3
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	3b01      	subs	r3, #1
 800d724:	6123      	str	r3, [r4, #16]
 800d726:	e6ec      	b.n	800d502 <_scanf_float+0x7e>
 800d728:	1e6b      	subs	r3, r5, #1
 800d72a:	2b06      	cmp	r3, #6
 800d72c:	d825      	bhi.n	800d77a <_scanf_float+0x2f6>
 800d72e:	2d02      	cmp	r5, #2
 800d730:	d836      	bhi.n	800d7a0 <_scanf_float+0x31c>
 800d732:	455e      	cmp	r6, fp
 800d734:	f67f aee8 	bls.w	800d508 <_scanf_float+0x84>
 800d738:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d73c:	463a      	mov	r2, r7
 800d73e:	4640      	mov	r0, r8
 800d740:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d744:	4798      	blx	r3
 800d746:	6923      	ldr	r3, [r4, #16]
 800d748:	3b01      	subs	r3, #1
 800d74a:	6123      	str	r3, [r4, #16]
 800d74c:	e7f1      	b.n	800d732 <_scanf_float+0x2ae>
 800d74e:	9802      	ldr	r0, [sp, #8]
 800d750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d754:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d758:	463a      	mov	r2, r7
 800d75a:	9002      	str	r0, [sp, #8]
 800d75c:	4640      	mov	r0, r8
 800d75e:	4798      	blx	r3
 800d760:	6923      	ldr	r3, [r4, #16]
 800d762:	3b01      	subs	r3, #1
 800d764:	6123      	str	r3, [r4, #16]
 800d766:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d76a:	fa5f fa8a 	uxtb.w	sl, sl
 800d76e:	f1ba 0f02 	cmp.w	sl, #2
 800d772:	d1ec      	bne.n	800d74e <_scanf_float+0x2ca>
 800d774:	3d03      	subs	r5, #3
 800d776:	b2ed      	uxtb	r5, r5
 800d778:	1b76      	subs	r6, r6, r5
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	05da      	lsls	r2, r3, #23
 800d77e:	d52f      	bpl.n	800d7e0 <_scanf_float+0x35c>
 800d780:	055b      	lsls	r3, r3, #21
 800d782:	d510      	bpl.n	800d7a6 <_scanf_float+0x322>
 800d784:	455e      	cmp	r6, fp
 800d786:	f67f aebf 	bls.w	800d508 <_scanf_float+0x84>
 800d78a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d78e:	463a      	mov	r2, r7
 800d790:	4640      	mov	r0, r8
 800d792:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d796:	4798      	blx	r3
 800d798:	6923      	ldr	r3, [r4, #16]
 800d79a:	3b01      	subs	r3, #1
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	e7f1      	b.n	800d784 <_scanf_float+0x300>
 800d7a0:	46aa      	mov	sl, r5
 800d7a2:	9602      	str	r6, [sp, #8]
 800d7a4:	e7df      	b.n	800d766 <_scanf_float+0x2e2>
 800d7a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d7aa:	6923      	ldr	r3, [r4, #16]
 800d7ac:	2965      	cmp	r1, #101	; 0x65
 800d7ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800d7b2:	f106 35ff 	add.w	r5, r6, #4294967295
 800d7b6:	6123      	str	r3, [r4, #16]
 800d7b8:	d00c      	beq.n	800d7d4 <_scanf_float+0x350>
 800d7ba:	2945      	cmp	r1, #69	; 0x45
 800d7bc:	d00a      	beq.n	800d7d4 <_scanf_float+0x350>
 800d7be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7c2:	463a      	mov	r2, r7
 800d7c4:	4640      	mov	r0, r8
 800d7c6:	4798      	blx	r3
 800d7c8:	6923      	ldr	r3, [r4, #16]
 800d7ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	1eb5      	subs	r5, r6, #2
 800d7d2:	6123      	str	r3, [r4, #16]
 800d7d4:	463a      	mov	r2, r7
 800d7d6:	4640      	mov	r0, r8
 800d7d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7dc:	4798      	blx	r3
 800d7de:	462e      	mov	r6, r5
 800d7e0:	6825      	ldr	r5, [r4, #0]
 800d7e2:	f015 0510 	ands.w	r5, r5, #16
 800d7e6:	d159      	bne.n	800d89c <_scanf_float+0x418>
 800d7e8:	7035      	strb	r5, [r6, #0]
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d7f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7f4:	d11c      	bne.n	800d830 <_scanf_float+0x3ac>
 800d7f6:	9b01      	ldr	r3, [sp, #4]
 800d7f8:	454b      	cmp	r3, r9
 800d7fa:	eba3 0209 	sub.w	r2, r3, r9
 800d7fe:	d124      	bne.n	800d84a <_scanf_float+0x3c6>
 800d800:	2200      	movs	r2, #0
 800d802:	4659      	mov	r1, fp
 800d804:	4640      	mov	r0, r8
 800d806:	f000 ff8b 	bl	800e720 <_strtod_r>
 800d80a:	f8d4 c000 	ldr.w	ip, [r4]
 800d80e:	9b03      	ldr	r3, [sp, #12]
 800d810:	f01c 0f02 	tst.w	ip, #2
 800d814:	4606      	mov	r6, r0
 800d816:	460f      	mov	r7, r1
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	d021      	beq.n	800d860 <_scanf_float+0x3dc>
 800d81c:	9903      	ldr	r1, [sp, #12]
 800d81e:	1d1a      	adds	r2, r3, #4
 800d820:	600a      	str	r2, [r1, #0]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	e9c3 6700 	strd	r6, r7, [r3]
 800d828:	68e3      	ldr	r3, [r4, #12]
 800d82a:	3301      	adds	r3, #1
 800d82c:	60e3      	str	r3, [r4, #12]
 800d82e:	e66c      	b.n	800d50a <_scanf_float+0x86>
 800d830:	9b04      	ldr	r3, [sp, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d0e4      	beq.n	800d800 <_scanf_float+0x37c>
 800d836:	9905      	ldr	r1, [sp, #20]
 800d838:	230a      	movs	r3, #10
 800d83a:	462a      	mov	r2, r5
 800d83c:	4640      	mov	r0, r8
 800d83e:	3101      	adds	r1, #1
 800d840:	f000 fffa 	bl	800e838 <_strtol_r>
 800d844:	9b04      	ldr	r3, [sp, #16]
 800d846:	9e05      	ldr	r6, [sp, #20]
 800d848:	1ac2      	subs	r2, r0, r3
 800d84a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d84e:	429e      	cmp	r6, r3
 800d850:	bf28      	it	cs
 800d852:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d856:	4630      	mov	r0, r6
 800d858:	4911      	ldr	r1, [pc, #68]	; (800d8a0 <_scanf_float+0x41c>)
 800d85a:	f000 f8fb 	bl	800da54 <siprintf>
 800d85e:	e7cf      	b.n	800d800 <_scanf_float+0x37c>
 800d860:	f01c 0f04 	tst.w	ip, #4
 800d864:	f103 0e04 	add.w	lr, r3, #4
 800d868:	d003      	beq.n	800d872 <_scanf_float+0x3ee>
 800d86a:	9903      	ldr	r1, [sp, #12]
 800d86c:	f8c1 e000 	str.w	lr, [r1]
 800d870:	e7d7      	b.n	800d822 <_scanf_float+0x39e>
 800d872:	9a03      	ldr	r2, [sp, #12]
 800d874:	f8c2 e000 	str.w	lr, [r2]
 800d878:	f8d3 8000 	ldr.w	r8, [r3]
 800d87c:	4602      	mov	r2, r0
 800d87e:	460b      	mov	r3, r1
 800d880:	f7f3 f8ce 	bl	8000a20 <__aeabi_dcmpun>
 800d884:	b128      	cbz	r0, 800d892 <_scanf_float+0x40e>
 800d886:	4807      	ldr	r0, [pc, #28]	; (800d8a4 <_scanf_float+0x420>)
 800d888:	f000 f8ac 	bl	800d9e4 <nanf>
 800d88c:	f8c8 0000 	str.w	r0, [r8]
 800d890:	e7ca      	b.n	800d828 <_scanf_float+0x3a4>
 800d892:	4630      	mov	r0, r6
 800d894:	4639      	mov	r1, r7
 800d896:	f7f3 f921 	bl	8000adc <__aeabi_d2f>
 800d89a:	e7f7      	b.n	800d88c <_scanf_float+0x408>
 800d89c:	2500      	movs	r5, #0
 800d89e:	e634      	b.n	800d50a <_scanf_float+0x86>
 800d8a0:	080120a5 	.word	0x080120a5
 800d8a4:	08012059 	.word	0x08012059

0800d8a8 <iprintf>:
 800d8a8:	b40f      	push	{r0, r1, r2, r3}
 800d8aa:	4b0a      	ldr	r3, [pc, #40]	; (800d8d4 <iprintf+0x2c>)
 800d8ac:	b513      	push	{r0, r1, r4, lr}
 800d8ae:	681c      	ldr	r4, [r3, #0]
 800d8b0:	b124      	cbz	r4, 800d8bc <iprintf+0x14>
 800d8b2:	69a3      	ldr	r3, [r4, #24]
 800d8b4:	b913      	cbnz	r3, 800d8bc <iprintf+0x14>
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	f002 f81e 	bl	800f8f8 <__sinit>
 800d8bc:	ab05      	add	r3, sp, #20
 800d8be:	4620      	mov	r0, r4
 800d8c0:	9a04      	ldr	r2, [sp, #16]
 800d8c2:	68a1      	ldr	r1, [r4, #8]
 800d8c4:	9301      	str	r3, [sp, #4]
 800d8c6:	f7ff f84d 	bl	800c964 <_vfiprintf_r>
 800d8ca:	b002      	add	sp, #8
 800d8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8d0:	b004      	add	sp, #16
 800d8d2:	4770      	bx	lr
 800d8d4:	2000000c 	.word	0x2000000c

0800d8d8 <_puts_r>:
 800d8d8:	b570      	push	{r4, r5, r6, lr}
 800d8da:	460e      	mov	r6, r1
 800d8dc:	4605      	mov	r5, r0
 800d8de:	b118      	cbz	r0, 800d8e8 <_puts_r+0x10>
 800d8e0:	6983      	ldr	r3, [r0, #24]
 800d8e2:	b90b      	cbnz	r3, 800d8e8 <_puts_r+0x10>
 800d8e4:	f002 f808 	bl	800f8f8 <__sinit>
 800d8e8:	69ab      	ldr	r3, [r5, #24]
 800d8ea:	68ac      	ldr	r4, [r5, #8]
 800d8ec:	b913      	cbnz	r3, 800d8f4 <_puts_r+0x1c>
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	f002 f802 	bl	800f8f8 <__sinit>
 800d8f4:	4b2c      	ldr	r3, [pc, #176]	; (800d9a8 <_puts_r+0xd0>)
 800d8f6:	429c      	cmp	r4, r3
 800d8f8:	d120      	bne.n	800d93c <_puts_r+0x64>
 800d8fa:	686c      	ldr	r4, [r5, #4]
 800d8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8fe:	07db      	lsls	r3, r3, #31
 800d900:	d405      	bmi.n	800d90e <_puts_r+0x36>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	0598      	lsls	r0, r3, #22
 800d906:	d402      	bmi.n	800d90e <_puts_r+0x36>
 800d908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d90a:	f002 fbfe 	bl	801010a <__retarget_lock_acquire_recursive>
 800d90e:	89a3      	ldrh	r3, [r4, #12]
 800d910:	0719      	lsls	r1, r3, #28
 800d912:	d51d      	bpl.n	800d950 <_puts_r+0x78>
 800d914:	6923      	ldr	r3, [r4, #16]
 800d916:	b1db      	cbz	r3, 800d950 <_puts_r+0x78>
 800d918:	3e01      	subs	r6, #1
 800d91a:	68a3      	ldr	r3, [r4, #8]
 800d91c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d920:	3b01      	subs	r3, #1
 800d922:	60a3      	str	r3, [r4, #8]
 800d924:	bb39      	cbnz	r1, 800d976 <_puts_r+0x9e>
 800d926:	2b00      	cmp	r3, #0
 800d928:	da38      	bge.n	800d99c <_puts_r+0xc4>
 800d92a:	4622      	mov	r2, r4
 800d92c:	210a      	movs	r1, #10
 800d92e:	4628      	mov	r0, r5
 800d930:	f000 ff84 	bl	800e83c <__swbuf_r>
 800d934:	3001      	adds	r0, #1
 800d936:	d011      	beq.n	800d95c <_puts_r+0x84>
 800d938:	250a      	movs	r5, #10
 800d93a:	e011      	b.n	800d960 <_puts_r+0x88>
 800d93c:	4b1b      	ldr	r3, [pc, #108]	; (800d9ac <_puts_r+0xd4>)
 800d93e:	429c      	cmp	r4, r3
 800d940:	d101      	bne.n	800d946 <_puts_r+0x6e>
 800d942:	68ac      	ldr	r4, [r5, #8]
 800d944:	e7da      	b.n	800d8fc <_puts_r+0x24>
 800d946:	4b1a      	ldr	r3, [pc, #104]	; (800d9b0 <_puts_r+0xd8>)
 800d948:	429c      	cmp	r4, r3
 800d94a:	bf08      	it	eq
 800d94c:	68ec      	ldreq	r4, [r5, #12]
 800d94e:	e7d5      	b.n	800d8fc <_puts_r+0x24>
 800d950:	4621      	mov	r1, r4
 800d952:	4628      	mov	r0, r5
 800d954:	f000 ffc4 	bl	800e8e0 <__swsetup_r>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d0dd      	beq.n	800d918 <_puts_r+0x40>
 800d95c:	f04f 35ff 	mov.w	r5, #4294967295
 800d960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d962:	07da      	lsls	r2, r3, #31
 800d964:	d405      	bmi.n	800d972 <_puts_r+0x9a>
 800d966:	89a3      	ldrh	r3, [r4, #12]
 800d968:	059b      	lsls	r3, r3, #22
 800d96a:	d402      	bmi.n	800d972 <_puts_r+0x9a>
 800d96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d96e:	f002 fbcd 	bl	801010c <__retarget_lock_release_recursive>
 800d972:	4628      	mov	r0, r5
 800d974:	bd70      	pop	{r4, r5, r6, pc}
 800d976:	2b00      	cmp	r3, #0
 800d978:	da04      	bge.n	800d984 <_puts_r+0xac>
 800d97a:	69a2      	ldr	r2, [r4, #24]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	dc06      	bgt.n	800d98e <_puts_r+0xb6>
 800d980:	290a      	cmp	r1, #10
 800d982:	d004      	beq.n	800d98e <_puts_r+0xb6>
 800d984:	6823      	ldr	r3, [r4, #0]
 800d986:	1c5a      	adds	r2, r3, #1
 800d988:	6022      	str	r2, [r4, #0]
 800d98a:	7019      	strb	r1, [r3, #0]
 800d98c:	e7c5      	b.n	800d91a <_puts_r+0x42>
 800d98e:	4622      	mov	r2, r4
 800d990:	4628      	mov	r0, r5
 800d992:	f000 ff53 	bl	800e83c <__swbuf_r>
 800d996:	3001      	adds	r0, #1
 800d998:	d1bf      	bne.n	800d91a <_puts_r+0x42>
 800d99a:	e7df      	b.n	800d95c <_puts_r+0x84>
 800d99c:	250a      	movs	r5, #10
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	1c5a      	adds	r2, r3, #1
 800d9a2:	6022      	str	r2, [r4, #0]
 800d9a4:	701d      	strb	r5, [r3, #0]
 800d9a6:	e7db      	b.n	800d960 <_puts_r+0x88>
 800d9a8:	080122b8 	.word	0x080122b8
 800d9ac:	080122d8 	.word	0x080122d8
 800d9b0:	08012298 	.word	0x08012298

0800d9b4 <puts>:
 800d9b4:	4b02      	ldr	r3, [pc, #8]	; (800d9c0 <puts+0xc>)
 800d9b6:	4601      	mov	r1, r0
 800d9b8:	6818      	ldr	r0, [r3, #0]
 800d9ba:	f7ff bf8d 	b.w	800d8d8 <_puts_r>
 800d9be:	bf00      	nop
 800d9c0:	2000000c 	.word	0x2000000c

0800d9c4 <_sbrk_r>:
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	4d05      	ldr	r5, [pc, #20]	; (800d9e0 <_sbrk_r+0x1c>)
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	4608      	mov	r0, r1
 800d9ce:	602b      	str	r3, [r5, #0]
 800d9d0:	f7fb fe66 	bl	80096a0 <_sbrk>
 800d9d4:	1c43      	adds	r3, r0, #1
 800d9d6:	d102      	bne.n	800d9de <_sbrk_r+0x1a>
 800d9d8:	682b      	ldr	r3, [r5, #0]
 800d9da:	b103      	cbz	r3, 800d9de <_sbrk_r+0x1a>
 800d9dc:	6023      	str	r3, [r4, #0]
 800d9de:	bd38      	pop	{r3, r4, r5, pc}
 800d9e0:	2000077c 	.word	0x2000077c

0800d9e4 <nanf>:
 800d9e4:	4800      	ldr	r0, [pc, #0]	; (800d9e8 <nanf+0x4>)
 800d9e6:	4770      	bx	lr
 800d9e8:	7fc00000 	.word	0x7fc00000

0800d9ec <sniprintf>:
 800d9ec:	b40c      	push	{r2, r3}
 800d9ee:	b530      	push	{r4, r5, lr}
 800d9f0:	4b17      	ldr	r3, [pc, #92]	; (800da50 <sniprintf+0x64>)
 800d9f2:	1e0c      	subs	r4, r1, #0
 800d9f4:	681d      	ldr	r5, [r3, #0]
 800d9f6:	b09d      	sub	sp, #116	; 0x74
 800d9f8:	da08      	bge.n	800da0c <sniprintf+0x20>
 800d9fa:	238b      	movs	r3, #139	; 0x8b
 800d9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800da00:	602b      	str	r3, [r5, #0]
 800da02:	b01d      	add	sp, #116	; 0x74
 800da04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da08:	b002      	add	sp, #8
 800da0a:	4770      	bx	lr
 800da0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800da10:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da14:	bf0c      	ite	eq
 800da16:	4623      	moveq	r3, r4
 800da18:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da1c:	9304      	str	r3, [sp, #16]
 800da1e:	9307      	str	r3, [sp, #28]
 800da20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da24:	9002      	str	r0, [sp, #8]
 800da26:	9006      	str	r0, [sp, #24]
 800da28:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da2c:	4628      	mov	r0, r5
 800da2e:	ab21      	add	r3, sp, #132	; 0x84
 800da30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da32:	a902      	add	r1, sp, #8
 800da34:	9301      	str	r3, [sp, #4]
 800da36:	f003 f95d 	bl	8010cf4 <_svfiprintf_r>
 800da3a:	1c43      	adds	r3, r0, #1
 800da3c:	bfbc      	itt	lt
 800da3e:	238b      	movlt	r3, #139	; 0x8b
 800da40:	602b      	strlt	r3, [r5, #0]
 800da42:	2c00      	cmp	r4, #0
 800da44:	d0dd      	beq.n	800da02 <sniprintf+0x16>
 800da46:	2200      	movs	r2, #0
 800da48:	9b02      	ldr	r3, [sp, #8]
 800da4a:	701a      	strb	r2, [r3, #0]
 800da4c:	e7d9      	b.n	800da02 <sniprintf+0x16>
 800da4e:	bf00      	nop
 800da50:	2000000c 	.word	0x2000000c

0800da54 <siprintf>:
 800da54:	b40e      	push	{r1, r2, r3}
 800da56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da5a:	b500      	push	{lr}
 800da5c:	b09c      	sub	sp, #112	; 0x70
 800da5e:	ab1d      	add	r3, sp, #116	; 0x74
 800da60:	9002      	str	r0, [sp, #8]
 800da62:	9006      	str	r0, [sp, #24]
 800da64:	9107      	str	r1, [sp, #28]
 800da66:	9104      	str	r1, [sp, #16]
 800da68:	4808      	ldr	r0, [pc, #32]	; (800da8c <siprintf+0x38>)
 800da6a:	4909      	ldr	r1, [pc, #36]	; (800da90 <siprintf+0x3c>)
 800da6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da70:	9105      	str	r1, [sp, #20]
 800da72:	6800      	ldr	r0, [r0, #0]
 800da74:	a902      	add	r1, sp, #8
 800da76:	9301      	str	r3, [sp, #4]
 800da78:	f003 f93c 	bl	8010cf4 <_svfiprintf_r>
 800da7c:	2200      	movs	r2, #0
 800da7e:	9b02      	ldr	r3, [sp, #8]
 800da80:	701a      	strb	r2, [r3, #0]
 800da82:	b01c      	add	sp, #112	; 0x70
 800da84:	f85d eb04 	ldr.w	lr, [sp], #4
 800da88:	b003      	add	sp, #12
 800da8a:	4770      	bx	lr
 800da8c:	2000000c 	.word	0x2000000c
 800da90:	ffff0208 	.word	0xffff0208

0800da94 <strchr>:
 800da94:	4603      	mov	r3, r0
 800da96:	b2c9      	uxtb	r1, r1
 800da98:	4618      	mov	r0, r3
 800da9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da9e:	b112      	cbz	r2, 800daa6 <strchr+0x12>
 800daa0:	428a      	cmp	r2, r1
 800daa2:	d1f9      	bne.n	800da98 <strchr+0x4>
 800daa4:	4770      	bx	lr
 800daa6:	2900      	cmp	r1, #0
 800daa8:	bf18      	it	ne
 800daaa:	2000      	movne	r0, #0
 800daac:	4770      	bx	lr

0800daae <strcspn>:
 800daae:	4603      	mov	r3, r0
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	461e      	mov	r6, r3
 800dab4:	f813 4b01 	ldrb.w	r4, [r3], #1
 800dab8:	b144      	cbz	r4, 800dacc <strcspn+0x1e>
 800daba:	1e4a      	subs	r2, r1, #1
 800dabc:	e001      	b.n	800dac2 <strcspn+0x14>
 800dabe:	42a5      	cmp	r5, r4
 800dac0:	d004      	beq.n	800dacc <strcspn+0x1e>
 800dac2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800dac6:	2d00      	cmp	r5, #0
 800dac8:	d1f9      	bne.n	800dabe <strcspn+0x10>
 800daca:	e7f2      	b.n	800dab2 <strcspn+0x4>
 800dacc:	1a30      	subs	r0, r6, r0
 800dace:	bd70      	pop	{r4, r5, r6, pc}

0800dad0 <strspn>:
 800dad0:	4603      	mov	r3, r0
 800dad2:	b570      	push	{r4, r5, r6, lr}
 800dad4:	461e      	mov	r6, r3
 800dad6:	f813 4b01 	ldrb.w	r4, [r3], #1
 800dada:	b13c      	cbz	r4, 800daec <strspn+0x1c>
 800dadc:	1e4a      	subs	r2, r1, #1
 800dade:	e001      	b.n	800dae4 <strspn+0x14>
 800dae0:	42a5      	cmp	r5, r4
 800dae2:	d0f7      	beq.n	800dad4 <strspn+0x4>
 800dae4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800dae8:	2d00      	cmp	r5, #0
 800daea:	d1f9      	bne.n	800dae0 <strspn+0x10>
 800daec:	1a30      	subs	r0, r6, r0
 800daee:	bd70      	pop	{r4, r5, r6, pc}

0800daf0 <sulp>:
 800daf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf4:	460f      	mov	r7, r1
 800daf6:	4690      	mov	r8, r2
 800daf8:	f002 ff24 	bl	8010944 <__ulp>
 800dafc:	4604      	mov	r4, r0
 800dafe:	460d      	mov	r5, r1
 800db00:	f1b8 0f00 	cmp.w	r8, #0
 800db04:	d011      	beq.n	800db2a <sulp+0x3a>
 800db06:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800db0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800db0e:	2b00      	cmp	r3, #0
 800db10:	dd0b      	ble.n	800db2a <sulp+0x3a>
 800db12:	2400      	movs	r4, #0
 800db14:	051b      	lsls	r3, r3, #20
 800db16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800db1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800db1e:	4622      	mov	r2, r4
 800db20:	462b      	mov	r3, r5
 800db22:	f7f2 fce3 	bl	80004ec <__aeabi_dmul>
 800db26:	4604      	mov	r4, r0
 800db28:	460d      	mov	r5, r1
 800db2a:	4620      	mov	r0, r4
 800db2c:	4629      	mov	r1, r5
 800db2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db32:	0000      	movs	r0, r0
 800db34:	0000      	movs	r0, r0
	...

0800db38 <_strtod_l>:
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	469b      	mov	fp, r3
 800db3e:	2300      	movs	r3, #0
 800db40:	b0a1      	sub	sp, #132	; 0x84
 800db42:	931c      	str	r3, [sp, #112]	; 0x70
 800db44:	4ba1      	ldr	r3, [pc, #644]	; (800ddcc <_strtod_l+0x294>)
 800db46:	4682      	mov	sl, r0
 800db48:	681f      	ldr	r7, [r3, #0]
 800db4a:	460e      	mov	r6, r1
 800db4c:	4638      	mov	r0, r7
 800db4e:	9217      	str	r2, [sp, #92]	; 0x5c
 800db50:	f7f2 fb08 	bl	8000164 <strlen>
 800db54:	f04f 0800 	mov.w	r8, #0
 800db58:	4604      	mov	r4, r0
 800db5a:	f04f 0900 	mov.w	r9, #0
 800db5e:	961b      	str	r6, [sp, #108]	; 0x6c
 800db60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db62:	781a      	ldrb	r2, [r3, #0]
 800db64:	2a2b      	cmp	r2, #43	; 0x2b
 800db66:	d04c      	beq.n	800dc02 <_strtod_l+0xca>
 800db68:	d83a      	bhi.n	800dbe0 <_strtod_l+0xa8>
 800db6a:	2a0d      	cmp	r2, #13
 800db6c:	d833      	bhi.n	800dbd6 <_strtod_l+0x9e>
 800db6e:	2a08      	cmp	r2, #8
 800db70:	d833      	bhi.n	800dbda <_strtod_l+0xa2>
 800db72:	2a00      	cmp	r2, #0
 800db74:	d03d      	beq.n	800dbf2 <_strtod_l+0xba>
 800db76:	2300      	movs	r3, #0
 800db78:	930c      	str	r3, [sp, #48]	; 0x30
 800db7a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800db7c:	782b      	ldrb	r3, [r5, #0]
 800db7e:	2b30      	cmp	r3, #48	; 0x30
 800db80:	f040 80af 	bne.w	800dce2 <_strtod_l+0x1aa>
 800db84:	786b      	ldrb	r3, [r5, #1]
 800db86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db8a:	2b58      	cmp	r3, #88	; 0x58
 800db8c:	d16c      	bne.n	800dc68 <_strtod_l+0x130>
 800db8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db90:	4650      	mov	r0, sl
 800db92:	9301      	str	r3, [sp, #4]
 800db94:	ab1c      	add	r3, sp, #112	; 0x70
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	4a8d      	ldr	r2, [pc, #564]	; (800ddd0 <_strtod_l+0x298>)
 800db9a:	f8cd b008 	str.w	fp, [sp, #8]
 800db9e:	ab1d      	add	r3, sp, #116	; 0x74
 800dba0:	a91b      	add	r1, sp, #108	; 0x6c
 800dba2:	f001 ffaf 	bl	800fb04 <__gethex>
 800dba6:	f010 0607 	ands.w	r6, r0, #7
 800dbaa:	4604      	mov	r4, r0
 800dbac:	d005      	beq.n	800dbba <_strtod_l+0x82>
 800dbae:	2e06      	cmp	r6, #6
 800dbb0:	d129      	bne.n	800dc06 <_strtod_l+0xce>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	3501      	adds	r5, #1
 800dbb6:	951b      	str	r5, [sp, #108]	; 0x6c
 800dbb8:	930c      	str	r3, [sp, #48]	; 0x30
 800dbba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f040 8596 	bne.w	800e6ee <_strtod_l+0xbb6>
 800dbc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbc4:	b1d3      	cbz	r3, 800dbfc <_strtod_l+0xc4>
 800dbc6:	4642      	mov	r2, r8
 800dbc8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dbcc:	4610      	mov	r0, r2
 800dbce:	4619      	mov	r1, r3
 800dbd0:	b021      	add	sp, #132	; 0x84
 800dbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd6:	2a20      	cmp	r2, #32
 800dbd8:	d1cd      	bne.n	800db76 <_strtod_l+0x3e>
 800dbda:	3301      	adds	r3, #1
 800dbdc:	931b      	str	r3, [sp, #108]	; 0x6c
 800dbde:	e7bf      	b.n	800db60 <_strtod_l+0x28>
 800dbe0:	2a2d      	cmp	r2, #45	; 0x2d
 800dbe2:	d1c8      	bne.n	800db76 <_strtod_l+0x3e>
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	920c      	str	r2, [sp, #48]	; 0x30
 800dbe8:	1c5a      	adds	r2, r3, #1
 800dbea:	921b      	str	r2, [sp, #108]	; 0x6c
 800dbec:	785b      	ldrb	r3, [r3, #1]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1c3      	bne.n	800db7a <_strtod_l+0x42>
 800dbf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbf4:	961b      	str	r6, [sp, #108]	; 0x6c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f040 8577 	bne.w	800e6ea <_strtod_l+0xbb2>
 800dbfc:	4642      	mov	r2, r8
 800dbfe:	464b      	mov	r3, r9
 800dc00:	e7e4      	b.n	800dbcc <_strtod_l+0x94>
 800dc02:	2200      	movs	r2, #0
 800dc04:	e7ef      	b.n	800dbe6 <_strtod_l+0xae>
 800dc06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dc08:	b13a      	cbz	r2, 800dc1a <_strtod_l+0xe2>
 800dc0a:	2135      	movs	r1, #53	; 0x35
 800dc0c:	a81e      	add	r0, sp, #120	; 0x78
 800dc0e:	f002 ff9d 	bl	8010b4c <__copybits>
 800dc12:	4650      	mov	r0, sl
 800dc14:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dc16:	f002 fb65 	bl	80102e4 <_Bfree>
 800dc1a:	3e01      	subs	r6, #1
 800dc1c:	2e05      	cmp	r6, #5
 800dc1e:	d807      	bhi.n	800dc30 <_strtod_l+0xf8>
 800dc20:	e8df f006 	tbb	[pc, r6]
 800dc24:	1d180b0e 	.word	0x1d180b0e
 800dc28:	030e      	.short	0x030e
 800dc2a:	f04f 0900 	mov.w	r9, #0
 800dc2e:	46c8      	mov	r8, r9
 800dc30:	0721      	lsls	r1, r4, #28
 800dc32:	d5c2      	bpl.n	800dbba <_strtod_l+0x82>
 800dc34:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800dc38:	e7bf      	b.n	800dbba <_strtod_l+0x82>
 800dc3a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800dc3e:	e7f7      	b.n	800dc30 <_strtod_l+0xf8>
 800dc40:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dc42:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800dc46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dc4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dc4e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800dc52:	e7ed      	b.n	800dc30 <_strtod_l+0xf8>
 800dc54:	f04f 0800 	mov.w	r8, #0
 800dc58:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ddd4 <_strtod_l+0x29c>
 800dc5c:	e7e8      	b.n	800dc30 <_strtod_l+0xf8>
 800dc5e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dc62:	f04f 38ff 	mov.w	r8, #4294967295
 800dc66:	e7e3      	b.n	800dc30 <_strtod_l+0xf8>
 800dc68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	921b      	str	r2, [sp, #108]	; 0x6c
 800dc6e:	785b      	ldrb	r3, [r3, #1]
 800dc70:	2b30      	cmp	r3, #48	; 0x30
 800dc72:	d0f9      	beq.n	800dc68 <_strtod_l+0x130>
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d0a0      	beq.n	800dbba <_strtod_l+0x82>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	9307      	str	r3, [sp, #28]
 800dc7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc7e:	220a      	movs	r2, #10
 800dc80:	9308      	str	r3, [sp, #32]
 800dc82:	2300      	movs	r3, #0
 800dc84:	469b      	mov	fp, r3
 800dc86:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800dc8a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800dc8c:	7805      	ldrb	r5, [r0, #0]
 800dc8e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800dc92:	b2d9      	uxtb	r1, r3
 800dc94:	2909      	cmp	r1, #9
 800dc96:	d926      	bls.n	800dce6 <_strtod_l+0x1ae>
 800dc98:	4622      	mov	r2, r4
 800dc9a:	4639      	mov	r1, r7
 800dc9c:	f003 f9b7 	bl	801100e <strncmp>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d032      	beq.n	800dd0a <_strtod_l+0x1d2>
 800dca4:	2000      	movs	r0, #0
 800dca6:	462b      	mov	r3, r5
 800dca8:	465c      	mov	r4, fp
 800dcaa:	4602      	mov	r2, r0
 800dcac:	9004      	str	r0, [sp, #16]
 800dcae:	2b65      	cmp	r3, #101	; 0x65
 800dcb0:	d001      	beq.n	800dcb6 <_strtod_l+0x17e>
 800dcb2:	2b45      	cmp	r3, #69	; 0x45
 800dcb4:	d113      	bne.n	800dcde <_strtod_l+0x1a6>
 800dcb6:	b91c      	cbnz	r4, 800dcc0 <_strtod_l+0x188>
 800dcb8:	9b07      	ldr	r3, [sp, #28]
 800dcba:	4303      	orrs	r3, r0
 800dcbc:	d099      	beq.n	800dbf2 <_strtod_l+0xba>
 800dcbe:	2400      	movs	r4, #0
 800dcc0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800dcc2:	1c73      	adds	r3, r6, #1
 800dcc4:	931b      	str	r3, [sp, #108]	; 0x6c
 800dcc6:	7873      	ldrb	r3, [r6, #1]
 800dcc8:	2b2b      	cmp	r3, #43	; 0x2b
 800dcca:	d078      	beq.n	800ddbe <_strtod_l+0x286>
 800dccc:	2b2d      	cmp	r3, #45	; 0x2d
 800dcce:	d07b      	beq.n	800ddc8 <_strtod_l+0x290>
 800dcd0:	2700      	movs	r7, #0
 800dcd2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dcd6:	2909      	cmp	r1, #9
 800dcd8:	f240 8082 	bls.w	800dde0 <_strtod_l+0x2a8>
 800dcdc:	961b      	str	r6, [sp, #108]	; 0x6c
 800dcde:	2500      	movs	r5, #0
 800dce0:	e09e      	b.n	800de20 <_strtod_l+0x2e8>
 800dce2:	2300      	movs	r3, #0
 800dce4:	e7c9      	b.n	800dc7a <_strtod_l+0x142>
 800dce6:	f1bb 0f08 	cmp.w	fp, #8
 800dcea:	bfd5      	itete	le
 800dcec:	9906      	ldrle	r1, [sp, #24]
 800dcee:	9905      	ldrgt	r1, [sp, #20]
 800dcf0:	fb02 3301 	mlale	r3, r2, r1, r3
 800dcf4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dcf8:	f100 0001 	add.w	r0, r0, #1
 800dcfc:	bfd4      	ite	le
 800dcfe:	9306      	strle	r3, [sp, #24]
 800dd00:	9305      	strgt	r3, [sp, #20]
 800dd02:	f10b 0b01 	add.w	fp, fp, #1
 800dd06:	901b      	str	r0, [sp, #108]	; 0x6c
 800dd08:	e7bf      	b.n	800dc8a <_strtod_l+0x152>
 800dd0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd0c:	191a      	adds	r2, r3, r4
 800dd0e:	921b      	str	r2, [sp, #108]	; 0x6c
 800dd10:	5d1b      	ldrb	r3, [r3, r4]
 800dd12:	f1bb 0f00 	cmp.w	fp, #0
 800dd16:	d036      	beq.n	800dd86 <_strtod_l+0x24e>
 800dd18:	465c      	mov	r4, fp
 800dd1a:	9004      	str	r0, [sp, #16]
 800dd1c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dd20:	2a09      	cmp	r2, #9
 800dd22:	d912      	bls.n	800dd4a <_strtod_l+0x212>
 800dd24:	2201      	movs	r2, #1
 800dd26:	e7c2      	b.n	800dcae <_strtod_l+0x176>
 800dd28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd2a:	3001      	adds	r0, #1
 800dd2c:	1c5a      	adds	r2, r3, #1
 800dd2e:	921b      	str	r2, [sp, #108]	; 0x6c
 800dd30:	785b      	ldrb	r3, [r3, #1]
 800dd32:	2b30      	cmp	r3, #48	; 0x30
 800dd34:	d0f8      	beq.n	800dd28 <_strtod_l+0x1f0>
 800dd36:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800dd3a:	2a08      	cmp	r2, #8
 800dd3c:	f200 84dc 	bhi.w	800e6f8 <_strtod_l+0xbc0>
 800dd40:	9004      	str	r0, [sp, #16]
 800dd42:	2000      	movs	r0, #0
 800dd44:	4604      	mov	r4, r0
 800dd46:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dd48:	9208      	str	r2, [sp, #32]
 800dd4a:	3b30      	subs	r3, #48	; 0x30
 800dd4c:	f100 0201 	add.w	r2, r0, #1
 800dd50:	d013      	beq.n	800dd7a <_strtod_l+0x242>
 800dd52:	9904      	ldr	r1, [sp, #16]
 800dd54:	1905      	adds	r5, r0, r4
 800dd56:	4411      	add	r1, r2
 800dd58:	9104      	str	r1, [sp, #16]
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	210a      	movs	r1, #10
 800dd5e:	42aa      	cmp	r2, r5
 800dd60:	d113      	bne.n	800dd8a <_strtod_l+0x252>
 800dd62:	1822      	adds	r2, r4, r0
 800dd64:	2a08      	cmp	r2, #8
 800dd66:	f104 0401 	add.w	r4, r4, #1
 800dd6a:	4404      	add	r4, r0
 800dd6c:	dc1b      	bgt.n	800dda6 <_strtod_l+0x26e>
 800dd6e:	220a      	movs	r2, #10
 800dd70:	9906      	ldr	r1, [sp, #24]
 800dd72:	fb02 3301 	mla	r3, r2, r1, r3
 800dd76:	9306      	str	r3, [sp, #24]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd7c:	4610      	mov	r0, r2
 800dd7e:	1c59      	adds	r1, r3, #1
 800dd80:	911b      	str	r1, [sp, #108]	; 0x6c
 800dd82:	785b      	ldrb	r3, [r3, #1]
 800dd84:	e7ca      	b.n	800dd1c <_strtod_l+0x1e4>
 800dd86:	4658      	mov	r0, fp
 800dd88:	e7d3      	b.n	800dd32 <_strtod_l+0x1fa>
 800dd8a:	2a08      	cmp	r2, #8
 800dd8c:	dc04      	bgt.n	800dd98 <_strtod_l+0x260>
 800dd8e:	9f06      	ldr	r7, [sp, #24]
 800dd90:	434f      	muls	r7, r1
 800dd92:	9706      	str	r7, [sp, #24]
 800dd94:	3201      	adds	r2, #1
 800dd96:	e7e2      	b.n	800dd5e <_strtod_l+0x226>
 800dd98:	1c57      	adds	r7, r2, #1
 800dd9a:	2f10      	cmp	r7, #16
 800dd9c:	bfde      	ittt	le
 800dd9e:	9f05      	ldrle	r7, [sp, #20]
 800dda0:	434f      	mulle	r7, r1
 800dda2:	9705      	strle	r7, [sp, #20]
 800dda4:	e7f6      	b.n	800dd94 <_strtod_l+0x25c>
 800dda6:	2c10      	cmp	r4, #16
 800dda8:	bfdf      	itttt	le
 800ddaa:	220a      	movle	r2, #10
 800ddac:	9905      	ldrle	r1, [sp, #20]
 800ddae:	fb02 3301 	mlale	r3, r2, r1, r3
 800ddb2:	9305      	strle	r3, [sp, #20]
 800ddb4:	e7e0      	b.n	800dd78 <_strtod_l+0x240>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	2201      	movs	r2, #1
 800ddba:	9304      	str	r3, [sp, #16]
 800ddbc:	e77c      	b.n	800dcb8 <_strtod_l+0x180>
 800ddbe:	2700      	movs	r7, #0
 800ddc0:	1cb3      	adds	r3, r6, #2
 800ddc2:	931b      	str	r3, [sp, #108]	; 0x6c
 800ddc4:	78b3      	ldrb	r3, [r6, #2]
 800ddc6:	e784      	b.n	800dcd2 <_strtod_l+0x19a>
 800ddc8:	2701      	movs	r7, #1
 800ddca:	e7f9      	b.n	800ddc0 <_strtod_l+0x288>
 800ddcc:	08012364 	.word	0x08012364
 800ddd0:	080120ac 	.word	0x080120ac
 800ddd4:	7ff00000 	.word	0x7ff00000
 800ddd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ddda:	1c59      	adds	r1, r3, #1
 800dddc:	911b      	str	r1, [sp, #108]	; 0x6c
 800ddde:	785b      	ldrb	r3, [r3, #1]
 800dde0:	2b30      	cmp	r3, #48	; 0x30
 800dde2:	d0f9      	beq.n	800ddd8 <_strtod_l+0x2a0>
 800dde4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800dde8:	2908      	cmp	r1, #8
 800ddea:	f63f af78 	bhi.w	800dcde <_strtod_l+0x1a6>
 800ddee:	f04f 0e0a 	mov.w	lr, #10
 800ddf2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800ddf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ddf8:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ddfc:	1c59      	adds	r1, r3, #1
 800ddfe:	911b      	str	r1, [sp, #108]	; 0x6c
 800de00:	785b      	ldrb	r3, [r3, #1]
 800de02:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800de06:	2d09      	cmp	r5, #9
 800de08:	d935      	bls.n	800de76 <_strtod_l+0x33e>
 800de0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800de0c:	1b49      	subs	r1, r1, r5
 800de0e:	2908      	cmp	r1, #8
 800de10:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800de14:	dc02      	bgt.n	800de1c <_strtod_l+0x2e4>
 800de16:	4565      	cmp	r5, ip
 800de18:	bfa8      	it	ge
 800de1a:	4665      	movge	r5, ip
 800de1c:	b107      	cbz	r7, 800de20 <_strtod_l+0x2e8>
 800de1e:	426d      	negs	r5, r5
 800de20:	2c00      	cmp	r4, #0
 800de22:	d14c      	bne.n	800debe <_strtod_l+0x386>
 800de24:	9907      	ldr	r1, [sp, #28]
 800de26:	4301      	orrs	r1, r0
 800de28:	f47f aec7 	bne.w	800dbba <_strtod_l+0x82>
 800de2c:	2a00      	cmp	r2, #0
 800de2e:	f47f aee0 	bne.w	800dbf2 <_strtod_l+0xba>
 800de32:	2b69      	cmp	r3, #105	; 0x69
 800de34:	d026      	beq.n	800de84 <_strtod_l+0x34c>
 800de36:	dc23      	bgt.n	800de80 <_strtod_l+0x348>
 800de38:	2b49      	cmp	r3, #73	; 0x49
 800de3a:	d023      	beq.n	800de84 <_strtod_l+0x34c>
 800de3c:	2b4e      	cmp	r3, #78	; 0x4e
 800de3e:	f47f aed8 	bne.w	800dbf2 <_strtod_l+0xba>
 800de42:	499c      	ldr	r1, [pc, #624]	; (800e0b4 <_strtod_l+0x57c>)
 800de44:	a81b      	add	r0, sp, #108	; 0x6c
 800de46:	f002 f8ab 	bl	800ffa0 <__match>
 800de4a:	2800      	cmp	r0, #0
 800de4c:	f43f aed1 	beq.w	800dbf2 <_strtod_l+0xba>
 800de50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	2b28      	cmp	r3, #40	; 0x28
 800de56:	d12c      	bne.n	800deb2 <_strtod_l+0x37a>
 800de58:	4997      	ldr	r1, [pc, #604]	; (800e0b8 <_strtod_l+0x580>)
 800de5a:	aa1e      	add	r2, sp, #120	; 0x78
 800de5c:	a81b      	add	r0, sp, #108	; 0x6c
 800de5e:	f002 f8b3 	bl	800ffc8 <__hexnan>
 800de62:	2805      	cmp	r0, #5
 800de64:	d125      	bne.n	800deb2 <_strtod_l+0x37a>
 800de66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de68:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800de6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800de70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800de74:	e6a1      	b.n	800dbba <_strtod_l+0x82>
 800de76:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800de7a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800de7e:	e7bc      	b.n	800ddfa <_strtod_l+0x2c2>
 800de80:	2b6e      	cmp	r3, #110	; 0x6e
 800de82:	e7dc      	b.n	800de3e <_strtod_l+0x306>
 800de84:	498d      	ldr	r1, [pc, #564]	; (800e0bc <_strtod_l+0x584>)
 800de86:	a81b      	add	r0, sp, #108	; 0x6c
 800de88:	f002 f88a 	bl	800ffa0 <__match>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	f43f aeb0 	beq.w	800dbf2 <_strtod_l+0xba>
 800de92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800de94:	498a      	ldr	r1, [pc, #552]	; (800e0c0 <_strtod_l+0x588>)
 800de96:	3b01      	subs	r3, #1
 800de98:	a81b      	add	r0, sp, #108	; 0x6c
 800de9a:	931b      	str	r3, [sp, #108]	; 0x6c
 800de9c:	f002 f880 	bl	800ffa0 <__match>
 800dea0:	b910      	cbnz	r0, 800dea8 <_strtod_l+0x370>
 800dea2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dea4:	3301      	adds	r3, #1
 800dea6:	931b      	str	r3, [sp, #108]	; 0x6c
 800dea8:	f04f 0800 	mov.w	r8, #0
 800deac:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800e0d0 <_strtod_l+0x598>
 800deb0:	e683      	b.n	800dbba <_strtod_l+0x82>
 800deb2:	4884      	ldr	r0, [pc, #528]	; (800e0c4 <_strtod_l+0x58c>)
 800deb4:	f003 f81e 	bl	8010ef4 <nan>
 800deb8:	4680      	mov	r8, r0
 800deba:	4689      	mov	r9, r1
 800debc:	e67d      	b.n	800dbba <_strtod_l+0x82>
 800debe:	9b04      	ldr	r3, [sp, #16]
 800dec0:	f1bb 0f00 	cmp.w	fp, #0
 800dec4:	bf08      	it	eq
 800dec6:	46a3      	moveq	fp, r4
 800dec8:	1aeb      	subs	r3, r5, r3
 800deca:	2c10      	cmp	r4, #16
 800decc:	9806      	ldr	r0, [sp, #24]
 800dece:	4626      	mov	r6, r4
 800ded0:	9307      	str	r3, [sp, #28]
 800ded2:	bfa8      	it	ge
 800ded4:	2610      	movge	r6, #16
 800ded6:	f7f2 fa8f 	bl	80003f8 <__aeabi_ui2d>
 800deda:	2c09      	cmp	r4, #9
 800dedc:	4680      	mov	r8, r0
 800dede:	4689      	mov	r9, r1
 800dee0:	dd13      	ble.n	800df0a <_strtod_l+0x3d2>
 800dee2:	4b79      	ldr	r3, [pc, #484]	; (800e0c8 <_strtod_l+0x590>)
 800dee4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dee8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800deec:	f7f2 fafe 	bl	80004ec <__aeabi_dmul>
 800def0:	4680      	mov	r8, r0
 800def2:	9805      	ldr	r0, [sp, #20]
 800def4:	4689      	mov	r9, r1
 800def6:	f7f2 fa7f 	bl	80003f8 <__aeabi_ui2d>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	4640      	mov	r0, r8
 800df00:	4649      	mov	r1, r9
 800df02:	f7f2 f93d 	bl	8000180 <__adddf3>
 800df06:	4680      	mov	r8, r0
 800df08:	4689      	mov	r9, r1
 800df0a:	2c0f      	cmp	r4, #15
 800df0c:	dc36      	bgt.n	800df7c <_strtod_l+0x444>
 800df0e:	9b07      	ldr	r3, [sp, #28]
 800df10:	2b00      	cmp	r3, #0
 800df12:	f43f ae52 	beq.w	800dbba <_strtod_l+0x82>
 800df16:	dd22      	ble.n	800df5e <_strtod_l+0x426>
 800df18:	2b16      	cmp	r3, #22
 800df1a:	dc09      	bgt.n	800df30 <_strtod_l+0x3f8>
 800df1c:	4c6a      	ldr	r4, [pc, #424]	; (800e0c8 <_strtod_l+0x590>)
 800df1e:	4642      	mov	r2, r8
 800df20:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800df24:	464b      	mov	r3, r9
 800df26:	e9d4 0100 	ldrd	r0, r1, [r4]
 800df2a:	f7f2 fadf 	bl	80004ec <__aeabi_dmul>
 800df2e:	e7c3      	b.n	800deb8 <_strtod_l+0x380>
 800df30:	9a07      	ldr	r2, [sp, #28]
 800df32:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800df36:	4293      	cmp	r3, r2
 800df38:	db20      	blt.n	800df7c <_strtod_l+0x444>
 800df3a:	4d63      	ldr	r5, [pc, #396]	; (800e0c8 <_strtod_l+0x590>)
 800df3c:	f1c4 040f 	rsb	r4, r4, #15
 800df40:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800df44:	4642      	mov	r2, r8
 800df46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df4a:	464b      	mov	r3, r9
 800df4c:	f7f2 face 	bl	80004ec <__aeabi_dmul>
 800df50:	9b07      	ldr	r3, [sp, #28]
 800df52:	1b1c      	subs	r4, r3, r4
 800df54:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800df58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df5c:	e7e5      	b.n	800df2a <_strtod_l+0x3f2>
 800df5e:	9b07      	ldr	r3, [sp, #28]
 800df60:	3316      	adds	r3, #22
 800df62:	db0b      	blt.n	800df7c <_strtod_l+0x444>
 800df64:	9b04      	ldr	r3, [sp, #16]
 800df66:	4a58      	ldr	r2, [pc, #352]	; (800e0c8 <_strtod_l+0x590>)
 800df68:	1b5d      	subs	r5, r3, r5
 800df6a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800df6e:	4640      	mov	r0, r8
 800df70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df74:	4649      	mov	r1, r9
 800df76:	f7f2 fbe3 	bl	8000740 <__aeabi_ddiv>
 800df7a:	e79d      	b.n	800deb8 <_strtod_l+0x380>
 800df7c:	9b07      	ldr	r3, [sp, #28]
 800df7e:	1ba6      	subs	r6, r4, r6
 800df80:	441e      	add	r6, r3
 800df82:	2e00      	cmp	r6, #0
 800df84:	dd71      	ble.n	800e06a <_strtod_l+0x532>
 800df86:	f016 030f 	ands.w	r3, r6, #15
 800df8a:	d00a      	beq.n	800dfa2 <_strtod_l+0x46a>
 800df8c:	494e      	ldr	r1, [pc, #312]	; (800e0c8 <_strtod_l+0x590>)
 800df8e:	4642      	mov	r2, r8
 800df90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df98:	464b      	mov	r3, r9
 800df9a:	f7f2 faa7 	bl	80004ec <__aeabi_dmul>
 800df9e:	4680      	mov	r8, r0
 800dfa0:	4689      	mov	r9, r1
 800dfa2:	f036 060f 	bics.w	r6, r6, #15
 800dfa6:	d050      	beq.n	800e04a <_strtod_l+0x512>
 800dfa8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800dfac:	dd27      	ble.n	800dffe <_strtod_l+0x4c6>
 800dfae:	f04f 0b00 	mov.w	fp, #0
 800dfb2:	f8cd b010 	str.w	fp, [sp, #16]
 800dfb6:	f8cd b020 	str.w	fp, [sp, #32]
 800dfba:	f8cd b018 	str.w	fp, [sp, #24]
 800dfbe:	2322      	movs	r3, #34	; 0x22
 800dfc0:	f04f 0800 	mov.w	r8, #0
 800dfc4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e0d0 <_strtod_l+0x598>
 800dfc8:	f8ca 3000 	str.w	r3, [sl]
 800dfcc:	9b08      	ldr	r3, [sp, #32]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f43f adf3 	beq.w	800dbba <_strtod_l+0x82>
 800dfd4:	4650      	mov	r0, sl
 800dfd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dfd8:	f002 f984 	bl	80102e4 <_Bfree>
 800dfdc:	4650      	mov	r0, sl
 800dfde:	9906      	ldr	r1, [sp, #24]
 800dfe0:	f002 f980 	bl	80102e4 <_Bfree>
 800dfe4:	4650      	mov	r0, sl
 800dfe6:	9904      	ldr	r1, [sp, #16]
 800dfe8:	f002 f97c 	bl	80102e4 <_Bfree>
 800dfec:	4650      	mov	r0, sl
 800dfee:	9908      	ldr	r1, [sp, #32]
 800dff0:	f002 f978 	bl	80102e4 <_Bfree>
 800dff4:	4659      	mov	r1, fp
 800dff6:	4650      	mov	r0, sl
 800dff8:	f002 f974 	bl	80102e4 <_Bfree>
 800dffc:	e5dd      	b.n	800dbba <_strtod_l+0x82>
 800dffe:	2300      	movs	r3, #0
 800e000:	4640      	mov	r0, r8
 800e002:	4649      	mov	r1, r9
 800e004:	461f      	mov	r7, r3
 800e006:	1136      	asrs	r6, r6, #4
 800e008:	2e01      	cmp	r6, #1
 800e00a:	dc21      	bgt.n	800e050 <_strtod_l+0x518>
 800e00c:	b10b      	cbz	r3, 800e012 <_strtod_l+0x4da>
 800e00e:	4680      	mov	r8, r0
 800e010:	4689      	mov	r9, r1
 800e012:	4b2e      	ldr	r3, [pc, #184]	; (800e0cc <_strtod_l+0x594>)
 800e014:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e018:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e01c:	4642      	mov	r2, r8
 800e01e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e022:	464b      	mov	r3, r9
 800e024:	f7f2 fa62 	bl	80004ec <__aeabi_dmul>
 800e028:	4b29      	ldr	r3, [pc, #164]	; (800e0d0 <_strtod_l+0x598>)
 800e02a:	460a      	mov	r2, r1
 800e02c:	400b      	ands	r3, r1
 800e02e:	4929      	ldr	r1, [pc, #164]	; (800e0d4 <_strtod_l+0x59c>)
 800e030:	4680      	mov	r8, r0
 800e032:	428b      	cmp	r3, r1
 800e034:	d8bb      	bhi.n	800dfae <_strtod_l+0x476>
 800e036:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e03a:	428b      	cmp	r3, r1
 800e03c:	bf86      	itte	hi
 800e03e:	f04f 38ff 	movhi.w	r8, #4294967295
 800e042:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e0d8 <_strtod_l+0x5a0>
 800e046:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e04a:	2300      	movs	r3, #0
 800e04c:	9305      	str	r3, [sp, #20]
 800e04e:	e07e      	b.n	800e14e <_strtod_l+0x616>
 800e050:	07f2      	lsls	r2, r6, #31
 800e052:	d507      	bpl.n	800e064 <_strtod_l+0x52c>
 800e054:	4b1d      	ldr	r3, [pc, #116]	; (800e0cc <_strtod_l+0x594>)
 800e056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05e:	f7f2 fa45 	bl	80004ec <__aeabi_dmul>
 800e062:	2301      	movs	r3, #1
 800e064:	3701      	adds	r7, #1
 800e066:	1076      	asrs	r6, r6, #1
 800e068:	e7ce      	b.n	800e008 <_strtod_l+0x4d0>
 800e06a:	d0ee      	beq.n	800e04a <_strtod_l+0x512>
 800e06c:	4276      	negs	r6, r6
 800e06e:	f016 020f 	ands.w	r2, r6, #15
 800e072:	d00a      	beq.n	800e08a <_strtod_l+0x552>
 800e074:	4b14      	ldr	r3, [pc, #80]	; (800e0c8 <_strtod_l+0x590>)
 800e076:	4640      	mov	r0, r8
 800e078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e07c:	4649      	mov	r1, r9
 800e07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e082:	f7f2 fb5d 	bl	8000740 <__aeabi_ddiv>
 800e086:	4680      	mov	r8, r0
 800e088:	4689      	mov	r9, r1
 800e08a:	1136      	asrs	r6, r6, #4
 800e08c:	d0dd      	beq.n	800e04a <_strtod_l+0x512>
 800e08e:	2e1f      	cmp	r6, #31
 800e090:	dd24      	ble.n	800e0dc <_strtod_l+0x5a4>
 800e092:	f04f 0b00 	mov.w	fp, #0
 800e096:	f8cd b010 	str.w	fp, [sp, #16]
 800e09a:	f8cd b020 	str.w	fp, [sp, #32]
 800e09e:	f8cd b018 	str.w	fp, [sp, #24]
 800e0a2:	2322      	movs	r3, #34	; 0x22
 800e0a4:	f04f 0800 	mov.w	r8, #0
 800e0a8:	f04f 0900 	mov.w	r9, #0
 800e0ac:	f8ca 3000 	str.w	r3, [sl]
 800e0b0:	e78c      	b.n	800dfcc <_strtod_l+0x494>
 800e0b2:	bf00      	nop
 800e0b4:	0801207e 	.word	0x0801207e
 800e0b8:	080120c0 	.word	0x080120c0
 800e0bc:	08012076 	.word	0x08012076
 800e0c0:	08012204 	.word	0x08012204
 800e0c4:	08012059 	.word	0x08012059
 800e0c8:	08012400 	.word	0x08012400
 800e0cc:	080123d8 	.word	0x080123d8
 800e0d0:	7ff00000 	.word	0x7ff00000
 800e0d4:	7ca00000 	.word	0x7ca00000
 800e0d8:	7fefffff 	.word	0x7fefffff
 800e0dc:	f016 0310 	ands.w	r3, r6, #16
 800e0e0:	bf18      	it	ne
 800e0e2:	236a      	movne	r3, #106	; 0x6a
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	9305      	str	r3, [sp, #20]
 800e0e8:	4649      	mov	r1, r9
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	4fb2      	ldr	r7, [pc, #712]	; (800e3b8 <_strtod_l+0x880>)
 800e0ee:	07f2      	lsls	r2, r6, #31
 800e0f0:	d504      	bpl.n	800e0fc <_strtod_l+0x5c4>
 800e0f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0f6:	f7f2 f9f9 	bl	80004ec <__aeabi_dmul>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	1076      	asrs	r6, r6, #1
 800e0fe:	f107 0708 	add.w	r7, r7, #8
 800e102:	d1f4      	bne.n	800e0ee <_strtod_l+0x5b6>
 800e104:	b10b      	cbz	r3, 800e10a <_strtod_l+0x5d2>
 800e106:	4680      	mov	r8, r0
 800e108:	4689      	mov	r9, r1
 800e10a:	9b05      	ldr	r3, [sp, #20]
 800e10c:	b1bb      	cbz	r3, 800e13e <_strtod_l+0x606>
 800e10e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800e112:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e116:	2b00      	cmp	r3, #0
 800e118:	4649      	mov	r1, r9
 800e11a:	dd10      	ble.n	800e13e <_strtod_l+0x606>
 800e11c:	2b1f      	cmp	r3, #31
 800e11e:	f340 812b 	ble.w	800e378 <_strtod_l+0x840>
 800e122:	2b34      	cmp	r3, #52	; 0x34
 800e124:	bfd8      	it	le
 800e126:	f04f 32ff 	movle.w	r2, #4294967295
 800e12a:	f04f 0800 	mov.w	r8, #0
 800e12e:	bfcf      	iteee	gt
 800e130:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e134:	3b20      	suble	r3, #32
 800e136:	fa02 f303 	lslle.w	r3, r2, r3
 800e13a:	ea03 0901 	andle.w	r9, r3, r1
 800e13e:	2200      	movs	r2, #0
 800e140:	2300      	movs	r3, #0
 800e142:	4640      	mov	r0, r8
 800e144:	4649      	mov	r1, r9
 800e146:	f7f2 fc39 	bl	80009bc <__aeabi_dcmpeq>
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d1a1      	bne.n	800e092 <_strtod_l+0x55a>
 800e14e:	9b06      	ldr	r3, [sp, #24]
 800e150:	465a      	mov	r2, fp
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	4650      	mov	r0, sl
 800e156:	4623      	mov	r3, r4
 800e158:	9908      	ldr	r1, [sp, #32]
 800e15a:	f002 f92f 	bl	80103bc <__s2b>
 800e15e:	9008      	str	r0, [sp, #32]
 800e160:	2800      	cmp	r0, #0
 800e162:	f43f af24 	beq.w	800dfae <_strtod_l+0x476>
 800e166:	9b04      	ldr	r3, [sp, #16]
 800e168:	f04f 0b00 	mov.w	fp, #0
 800e16c:	1b5d      	subs	r5, r3, r5
 800e16e:	9b07      	ldr	r3, [sp, #28]
 800e170:	f8cd b010 	str.w	fp, [sp, #16]
 800e174:	2b00      	cmp	r3, #0
 800e176:	bfb4      	ite	lt
 800e178:	462b      	movlt	r3, r5
 800e17a:	2300      	movge	r3, #0
 800e17c:	930e      	str	r3, [sp, #56]	; 0x38
 800e17e:	9b07      	ldr	r3, [sp, #28]
 800e180:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e184:	9316      	str	r3, [sp, #88]	; 0x58
 800e186:	9b08      	ldr	r3, [sp, #32]
 800e188:	4650      	mov	r0, sl
 800e18a:	6859      	ldr	r1, [r3, #4]
 800e18c:	f002 f86a 	bl	8010264 <_Balloc>
 800e190:	9006      	str	r0, [sp, #24]
 800e192:	2800      	cmp	r0, #0
 800e194:	f43f af13 	beq.w	800dfbe <_strtod_l+0x486>
 800e198:	9b08      	ldr	r3, [sp, #32]
 800e19a:	300c      	adds	r0, #12
 800e19c:	691a      	ldr	r2, [r3, #16]
 800e19e:	f103 010c 	add.w	r1, r3, #12
 800e1a2:	3202      	adds	r2, #2
 800e1a4:	0092      	lsls	r2, r2, #2
 800e1a6:	f7fe faf9 	bl	800c79c <memcpy>
 800e1aa:	ab1e      	add	r3, sp, #120	; 0x78
 800e1ac:	9301      	str	r3, [sp, #4]
 800e1ae:	ab1d      	add	r3, sp, #116	; 0x74
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	4642      	mov	r2, r8
 800e1b4:	464b      	mov	r3, r9
 800e1b6:	4650      	mov	r0, sl
 800e1b8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800e1bc:	f002 fc3c 	bl	8010a38 <__d2b>
 800e1c0:	901c      	str	r0, [sp, #112]	; 0x70
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	f43f aefb 	beq.w	800dfbe <_strtod_l+0x486>
 800e1c8:	2101      	movs	r1, #1
 800e1ca:	4650      	mov	r0, sl
 800e1cc:	f002 f98e 	bl	80104ec <__i2b>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	9004      	str	r0, [sp, #16]
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	f43f aef2 	beq.w	800dfbe <_strtod_l+0x486>
 800e1da:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800e1dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e1de:	2d00      	cmp	r5, #0
 800e1e0:	bfab      	itete	ge
 800e1e2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e1e4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800e1e6:	18ee      	addge	r6, r5, r3
 800e1e8:	1b5c      	sublt	r4, r3, r5
 800e1ea:	9b05      	ldr	r3, [sp, #20]
 800e1ec:	bfa8      	it	ge
 800e1ee:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800e1f0:	eba5 0503 	sub.w	r5, r5, r3
 800e1f4:	4415      	add	r5, r2
 800e1f6:	4b71      	ldr	r3, [pc, #452]	; (800e3bc <_strtod_l+0x884>)
 800e1f8:	f105 35ff 	add.w	r5, r5, #4294967295
 800e1fc:	bfb8      	it	lt
 800e1fe:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e200:	429d      	cmp	r5, r3
 800e202:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e206:	f280 80c9 	bge.w	800e39c <_strtod_l+0x864>
 800e20a:	1b5b      	subs	r3, r3, r5
 800e20c:	2b1f      	cmp	r3, #31
 800e20e:	f04f 0701 	mov.w	r7, #1
 800e212:	eba2 0203 	sub.w	r2, r2, r3
 800e216:	f300 80b6 	bgt.w	800e386 <_strtod_l+0x84e>
 800e21a:	2500      	movs	r5, #0
 800e21c:	fa07 f303 	lsl.w	r3, r7, r3
 800e220:	930f      	str	r3, [sp, #60]	; 0x3c
 800e222:	18b7      	adds	r7, r6, r2
 800e224:	9b05      	ldr	r3, [sp, #20]
 800e226:	42be      	cmp	r6, r7
 800e228:	4414      	add	r4, r2
 800e22a:	441c      	add	r4, r3
 800e22c:	4633      	mov	r3, r6
 800e22e:	bfa8      	it	ge
 800e230:	463b      	movge	r3, r7
 800e232:	42a3      	cmp	r3, r4
 800e234:	bfa8      	it	ge
 800e236:	4623      	movge	r3, r4
 800e238:	2b00      	cmp	r3, #0
 800e23a:	bfc2      	ittt	gt
 800e23c:	1aff      	subgt	r7, r7, r3
 800e23e:	1ae4      	subgt	r4, r4, r3
 800e240:	1af6      	subgt	r6, r6, r3
 800e242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e244:	2b00      	cmp	r3, #0
 800e246:	dd17      	ble.n	800e278 <_strtod_l+0x740>
 800e248:	461a      	mov	r2, r3
 800e24a:	4650      	mov	r0, sl
 800e24c:	9904      	ldr	r1, [sp, #16]
 800e24e:	f002 fa07 	bl	8010660 <__pow5mult>
 800e252:	9004      	str	r0, [sp, #16]
 800e254:	2800      	cmp	r0, #0
 800e256:	f43f aeb2 	beq.w	800dfbe <_strtod_l+0x486>
 800e25a:	4601      	mov	r1, r0
 800e25c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e25e:	4650      	mov	r0, sl
 800e260:	f002 f95a 	bl	8010518 <__multiply>
 800e264:	9009      	str	r0, [sp, #36]	; 0x24
 800e266:	2800      	cmp	r0, #0
 800e268:	f43f aea9 	beq.w	800dfbe <_strtod_l+0x486>
 800e26c:	4650      	mov	r0, sl
 800e26e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e270:	f002 f838 	bl	80102e4 <_Bfree>
 800e274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e276:	931c      	str	r3, [sp, #112]	; 0x70
 800e278:	2f00      	cmp	r7, #0
 800e27a:	f300 8093 	bgt.w	800e3a4 <_strtod_l+0x86c>
 800e27e:	9b07      	ldr	r3, [sp, #28]
 800e280:	2b00      	cmp	r3, #0
 800e282:	dd08      	ble.n	800e296 <_strtod_l+0x75e>
 800e284:	4650      	mov	r0, sl
 800e286:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e288:	9906      	ldr	r1, [sp, #24]
 800e28a:	f002 f9e9 	bl	8010660 <__pow5mult>
 800e28e:	9006      	str	r0, [sp, #24]
 800e290:	2800      	cmp	r0, #0
 800e292:	f43f ae94 	beq.w	800dfbe <_strtod_l+0x486>
 800e296:	2c00      	cmp	r4, #0
 800e298:	dd08      	ble.n	800e2ac <_strtod_l+0x774>
 800e29a:	4622      	mov	r2, r4
 800e29c:	4650      	mov	r0, sl
 800e29e:	9906      	ldr	r1, [sp, #24]
 800e2a0:	f002 fa38 	bl	8010714 <__lshift>
 800e2a4:	9006      	str	r0, [sp, #24]
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	f43f ae89 	beq.w	800dfbe <_strtod_l+0x486>
 800e2ac:	2e00      	cmp	r6, #0
 800e2ae:	dd08      	ble.n	800e2c2 <_strtod_l+0x78a>
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	4650      	mov	r0, sl
 800e2b4:	9904      	ldr	r1, [sp, #16]
 800e2b6:	f002 fa2d 	bl	8010714 <__lshift>
 800e2ba:	9004      	str	r0, [sp, #16]
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	f43f ae7e 	beq.w	800dfbe <_strtod_l+0x486>
 800e2c2:	4650      	mov	r0, sl
 800e2c4:	9a06      	ldr	r2, [sp, #24]
 800e2c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e2c8:	f002 faac 	bl	8010824 <__mdiff>
 800e2cc:	4683      	mov	fp, r0
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	f43f ae75 	beq.w	800dfbe <_strtod_l+0x486>
 800e2d4:	2400      	movs	r4, #0
 800e2d6:	68c3      	ldr	r3, [r0, #12]
 800e2d8:	9904      	ldr	r1, [sp, #16]
 800e2da:	60c4      	str	r4, [r0, #12]
 800e2dc:	930d      	str	r3, [sp, #52]	; 0x34
 800e2de:	f002 fa85 	bl	80107ec <__mcmp>
 800e2e2:	42a0      	cmp	r0, r4
 800e2e4:	da70      	bge.n	800e3c8 <_strtod_l+0x890>
 800e2e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2e8:	ea53 0308 	orrs.w	r3, r3, r8
 800e2ec:	f040 8096 	bne.w	800e41c <_strtod_l+0x8e4>
 800e2f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	f040 8091 	bne.w	800e41c <_strtod_l+0x8e4>
 800e2fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e2fe:	0d1b      	lsrs	r3, r3, #20
 800e300:	051b      	lsls	r3, r3, #20
 800e302:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e306:	f240 8089 	bls.w	800e41c <_strtod_l+0x8e4>
 800e30a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e30e:	b923      	cbnz	r3, 800e31a <_strtod_l+0x7e2>
 800e310:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e314:	2b01      	cmp	r3, #1
 800e316:	f340 8081 	ble.w	800e41c <_strtod_l+0x8e4>
 800e31a:	4659      	mov	r1, fp
 800e31c:	2201      	movs	r2, #1
 800e31e:	4650      	mov	r0, sl
 800e320:	f002 f9f8 	bl	8010714 <__lshift>
 800e324:	9904      	ldr	r1, [sp, #16]
 800e326:	4683      	mov	fp, r0
 800e328:	f002 fa60 	bl	80107ec <__mcmp>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	dd75      	ble.n	800e41c <_strtod_l+0x8e4>
 800e330:	9905      	ldr	r1, [sp, #20]
 800e332:	464b      	mov	r3, r9
 800e334:	4a22      	ldr	r2, [pc, #136]	; (800e3c0 <_strtod_l+0x888>)
 800e336:	2900      	cmp	r1, #0
 800e338:	f000 8091 	beq.w	800e45e <_strtod_l+0x926>
 800e33c:	ea02 0109 	and.w	r1, r2, r9
 800e340:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e344:	f300 808b 	bgt.w	800e45e <_strtod_l+0x926>
 800e348:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e34c:	f77f aea9 	ble.w	800e0a2 <_strtod_l+0x56a>
 800e350:	2300      	movs	r3, #0
 800e352:	4a1c      	ldr	r2, [pc, #112]	; (800e3c4 <_strtod_l+0x88c>)
 800e354:	4640      	mov	r0, r8
 800e356:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800e35a:	4649      	mov	r1, r9
 800e35c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e360:	f7f2 f8c4 	bl	80004ec <__aeabi_dmul>
 800e364:	460b      	mov	r3, r1
 800e366:	4303      	orrs	r3, r0
 800e368:	bf08      	it	eq
 800e36a:	2322      	moveq	r3, #34	; 0x22
 800e36c:	4680      	mov	r8, r0
 800e36e:	4689      	mov	r9, r1
 800e370:	bf08      	it	eq
 800e372:	f8ca 3000 	streq.w	r3, [sl]
 800e376:	e62d      	b.n	800dfd4 <_strtod_l+0x49c>
 800e378:	f04f 32ff 	mov.w	r2, #4294967295
 800e37c:	fa02 f303 	lsl.w	r3, r2, r3
 800e380:	ea03 0808 	and.w	r8, r3, r8
 800e384:	e6db      	b.n	800e13e <_strtod_l+0x606>
 800e386:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e38a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e38e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e392:	35e2      	adds	r5, #226	; 0xe2
 800e394:	fa07 f505 	lsl.w	r5, r7, r5
 800e398:	970f      	str	r7, [sp, #60]	; 0x3c
 800e39a:	e742      	b.n	800e222 <_strtod_l+0x6ea>
 800e39c:	2301      	movs	r3, #1
 800e39e:	2500      	movs	r5, #0
 800e3a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3a2:	e73e      	b.n	800e222 <_strtod_l+0x6ea>
 800e3a4:	463a      	mov	r2, r7
 800e3a6:	4650      	mov	r0, sl
 800e3a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e3aa:	f002 f9b3 	bl	8010714 <__lshift>
 800e3ae:	901c      	str	r0, [sp, #112]	; 0x70
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	f47f af64 	bne.w	800e27e <_strtod_l+0x746>
 800e3b6:	e602      	b.n	800dfbe <_strtod_l+0x486>
 800e3b8:	080120d8 	.word	0x080120d8
 800e3bc:	fffffc02 	.word	0xfffffc02
 800e3c0:	7ff00000 	.word	0x7ff00000
 800e3c4:	39500000 	.word	0x39500000
 800e3c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e3cc:	d166      	bne.n	800e49c <_strtod_l+0x964>
 800e3ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3d4:	b35a      	cbz	r2, 800e42e <_strtod_l+0x8f6>
 800e3d6:	4a9c      	ldr	r2, [pc, #624]	; (800e648 <_strtod_l+0xb10>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d12c      	bne.n	800e436 <_strtod_l+0x8fe>
 800e3dc:	9b05      	ldr	r3, [sp, #20]
 800e3de:	4640      	mov	r0, r8
 800e3e0:	b303      	cbz	r3, 800e424 <_strtod_l+0x8ec>
 800e3e2:	464b      	mov	r3, r9
 800e3e4:	4a99      	ldr	r2, [pc, #612]	; (800e64c <_strtod_l+0xb14>)
 800e3e6:	f04f 31ff 	mov.w	r1, #4294967295
 800e3ea:	401a      	ands	r2, r3
 800e3ec:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e3f0:	d81b      	bhi.n	800e42a <_strtod_l+0x8f2>
 800e3f2:	0d12      	lsrs	r2, r2, #20
 800e3f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e3f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e3fc:	4298      	cmp	r0, r3
 800e3fe:	d11a      	bne.n	800e436 <_strtod_l+0x8fe>
 800e400:	4b93      	ldr	r3, [pc, #588]	; (800e650 <_strtod_l+0xb18>)
 800e402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e404:	429a      	cmp	r2, r3
 800e406:	d102      	bne.n	800e40e <_strtod_l+0x8d6>
 800e408:	3001      	adds	r0, #1
 800e40a:	f43f add8 	beq.w	800dfbe <_strtod_l+0x486>
 800e40e:	f04f 0800 	mov.w	r8, #0
 800e412:	4b8e      	ldr	r3, [pc, #568]	; (800e64c <_strtod_l+0xb14>)
 800e414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e416:	401a      	ands	r2, r3
 800e418:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800e41c:	9b05      	ldr	r3, [sp, #20]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d196      	bne.n	800e350 <_strtod_l+0x818>
 800e422:	e5d7      	b.n	800dfd4 <_strtod_l+0x49c>
 800e424:	f04f 33ff 	mov.w	r3, #4294967295
 800e428:	e7e8      	b.n	800e3fc <_strtod_l+0x8c4>
 800e42a:	460b      	mov	r3, r1
 800e42c:	e7e6      	b.n	800e3fc <_strtod_l+0x8c4>
 800e42e:	ea53 0308 	orrs.w	r3, r3, r8
 800e432:	f43f af7d 	beq.w	800e330 <_strtod_l+0x7f8>
 800e436:	b1e5      	cbz	r5, 800e472 <_strtod_l+0x93a>
 800e438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43a:	421d      	tst	r5, r3
 800e43c:	d0ee      	beq.n	800e41c <_strtod_l+0x8e4>
 800e43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e440:	4640      	mov	r0, r8
 800e442:	4649      	mov	r1, r9
 800e444:	9a05      	ldr	r2, [sp, #20]
 800e446:	b1c3      	cbz	r3, 800e47a <_strtod_l+0x942>
 800e448:	f7ff fb52 	bl	800daf0 <sulp>
 800e44c:	4602      	mov	r2, r0
 800e44e:	460b      	mov	r3, r1
 800e450:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e454:	f7f1 fe94 	bl	8000180 <__adddf3>
 800e458:	4680      	mov	r8, r0
 800e45a:	4689      	mov	r9, r1
 800e45c:	e7de      	b.n	800e41c <_strtod_l+0x8e4>
 800e45e:	4013      	ands	r3, r2
 800e460:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e464:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e468:	f04f 38ff 	mov.w	r8, #4294967295
 800e46c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e470:	e7d4      	b.n	800e41c <_strtod_l+0x8e4>
 800e472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e474:	ea13 0f08 	tst.w	r3, r8
 800e478:	e7e0      	b.n	800e43c <_strtod_l+0x904>
 800e47a:	f7ff fb39 	bl	800daf0 <sulp>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e486:	f7f1 fe79 	bl	800017c <__aeabi_dsub>
 800e48a:	2200      	movs	r2, #0
 800e48c:	2300      	movs	r3, #0
 800e48e:	4680      	mov	r8, r0
 800e490:	4689      	mov	r9, r1
 800e492:	f7f2 fa93 	bl	80009bc <__aeabi_dcmpeq>
 800e496:	2800      	cmp	r0, #0
 800e498:	d0c0      	beq.n	800e41c <_strtod_l+0x8e4>
 800e49a:	e602      	b.n	800e0a2 <_strtod_l+0x56a>
 800e49c:	4658      	mov	r0, fp
 800e49e:	9904      	ldr	r1, [sp, #16]
 800e4a0:	f002 fb26 	bl	8010af0 <__ratio>
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e4aa:	4606      	mov	r6, r0
 800e4ac:	460f      	mov	r7, r1
 800e4ae:	f7f2 fa99 	bl	80009e4 <__aeabi_dcmple>
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	d075      	beq.n	800e5a2 <_strtod_l+0xa6a>
 800e4b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d047      	beq.n	800e54c <_strtod_l+0xa14>
 800e4bc:	2600      	movs	r6, #0
 800e4be:	4f65      	ldr	r7, [pc, #404]	; (800e654 <_strtod_l+0xb1c>)
 800e4c0:	4d64      	ldr	r5, [pc, #400]	; (800e654 <_strtod_l+0xb1c>)
 800e4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4c8:	0d1b      	lsrs	r3, r3, #20
 800e4ca:	051b      	lsls	r3, r3, #20
 800e4cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4d0:	4b61      	ldr	r3, [pc, #388]	; (800e658 <_strtod_l+0xb20>)
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	f040 80c8 	bne.w	800e668 <_strtod_l+0xb30>
 800e4d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e4dc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800e4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4e2:	4640      	mov	r0, r8
 800e4e4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800e4e8:	4649      	mov	r1, r9
 800e4ea:	f002 fa2b 	bl	8010944 <__ulp>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	4639      	mov	r1, r7
 800e4f6:	f7f1 fff9 	bl	80004ec <__aeabi_dmul>
 800e4fa:	4642      	mov	r2, r8
 800e4fc:	464b      	mov	r3, r9
 800e4fe:	f7f1 fe3f 	bl	8000180 <__adddf3>
 800e502:	460b      	mov	r3, r1
 800e504:	4951      	ldr	r1, [pc, #324]	; (800e64c <_strtod_l+0xb14>)
 800e506:	4a55      	ldr	r2, [pc, #340]	; (800e65c <_strtod_l+0xb24>)
 800e508:	4019      	ands	r1, r3
 800e50a:	4291      	cmp	r1, r2
 800e50c:	4680      	mov	r8, r0
 800e50e:	d95e      	bls.n	800e5ce <_strtod_l+0xa96>
 800e510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e512:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e516:	4293      	cmp	r3, r2
 800e518:	d103      	bne.n	800e522 <_strtod_l+0x9ea>
 800e51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e51c:	3301      	adds	r3, #1
 800e51e:	f43f ad4e 	beq.w	800dfbe <_strtod_l+0x486>
 800e522:	f04f 38ff 	mov.w	r8, #4294967295
 800e526:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800e650 <_strtod_l+0xb18>
 800e52a:	4650      	mov	r0, sl
 800e52c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e52e:	f001 fed9 	bl	80102e4 <_Bfree>
 800e532:	4650      	mov	r0, sl
 800e534:	9906      	ldr	r1, [sp, #24]
 800e536:	f001 fed5 	bl	80102e4 <_Bfree>
 800e53a:	4650      	mov	r0, sl
 800e53c:	9904      	ldr	r1, [sp, #16]
 800e53e:	f001 fed1 	bl	80102e4 <_Bfree>
 800e542:	4659      	mov	r1, fp
 800e544:	4650      	mov	r0, sl
 800e546:	f001 fecd 	bl	80102e4 <_Bfree>
 800e54a:	e61c      	b.n	800e186 <_strtod_l+0x64e>
 800e54c:	f1b8 0f00 	cmp.w	r8, #0
 800e550:	d119      	bne.n	800e586 <_strtod_l+0xa4e>
 800e552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e558:	b9e3      	cbnz	r3, 800e594 <_strtod_l+0xa5c>
 800e55a:	2200      	movs	r2, #0
 800e55c:	4630      	mov	r0, r6
 800e55e:	4639      	mov	r1, r7
 800e560:	4b3c      	ldr	r3, [pc, #240]	; (800e654 <_strtod_l+0xb1c>)
 800e562:	f7f2 fa35 	bl	80009d0 <__aeabi_dcmplt>
 800e566:	b9c8      	cbnz	r0, 800e59c <_strtod_l+0xa64>
 800e568:	2200      	movs	r2, #0
 800e56a:	4630      	mov	r0, r6
 800e56c:	4639      	mov	r1, r7
 800e56e:	4b3c      	ldr	r3, [pc, #240]	; (800e660 <_strtod_l+0xb28>)
 800e570:	f7f1 ffbc 	bl	80004ec <__aeabi_dmul>
 800e574:	4604      	mov	r4, r0
 800e576:	460d      	mov	r5, r1
 800e578:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e57c:	9418      	str	r4, [sp, #96]	; 0x60
 800e57e:	9319      	str	r3, [sp, #100]	; 0x64
 800e580:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800e584:	e79d      	b.n	800e4c2 <_strtod_l+0x98a>
 800e586:	f1b8 0f01 	cmp.w	r8, #1
 800e58a:	d103      	bne.n	800e594 <_strtod_l+0xa5c>
 800e58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f43f ad87 	beq.w	800e0a2 <_strtod_l+0x56a>
 800e594:	2600      	movs	r6, #0
 800e596:	2400      	movs	r4, #0
 800e598:	4f32      	ldr	r7, [pc, #200]	; (800e664 <_strtod_l+0xb2c>)
 800e59a:	e791      	b.n	800e4c0 <_strtod_l+0x988>
 800e59c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e59e:	4d30      	ldr	r5, [pc, #192]	; (800e660 <_strtod_l+0xb28>)
 800e5a0:	e7ea      	b.n	800e578 <_strtod_l+0xa40>
 800e5a2:	4b2f      	ldr	r3, [pc, #188]	; (800e660 <_strtod_l+0xb28>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	4639      	mov	r1, r7
 800e5aa:	f7f1 ff9f 	bl	80004ec <__aeabi_dmul>
 800e5ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	460d      	mov	r5, r1
 800e5b4:	b933      	cbnz	r3, 800e5c4 <_strtod_l+0xa8c>
 800e5b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5ba:	9010      	str	r0, [sp, #64]	; 0x40
 800e5bc:	9311      	str	r3, [sp, #68]	; 0x44
 800e5be:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e5c2:	e77e      	b.n	800e4c2 <_strtod_l+0x98a>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e5cc:	e7f7      	b.n	800e5be <_strtod_l+0xa86>
 800e5ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e5d2:	9b05      	ldr	r3, [sp, #20]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1a8      	bne.n	800e52a <_strtod_l+0x9f2>
 800e5d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e5dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5de:	0d1b      	lsrs	r3, r3, #20
 800e5e0:	051b      	lsls	r3, r3, #20
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d1a1      	bne.n	800e52a <_strtod_l+0x9f2>
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	4629      	mov	r1, r5
 800e5ea:	f7f2 fafb 	bl	8000be4 <__aeabi_d2lz>
 800e5ee:	f7f1 ff4f 	bl	8000490 <__aeabi_l2d>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	f7f1 fdbf 	bl	800017c <__aeabi_dsub>
 800e5fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e604:	ea43 0308 	orr.w	r3, r3, r8
 800e608:	4313      	orrs	r3, r2
 800e60a:	4604      	mov	r4, r0
 800e60c:	460d      	mov	r5, r1
 800e60e:	d066      	beq.n	800e6de <_strtod_l+0xba6>
 800e610:	a309      	add	r3, pc, #36	; (adr r3, 800e638 <_strtod_l+0xb00>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	f7f2 f9db 	bl	80009d0 <__aeabi_dcmplt>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	f47f acda 	bne.w	800dfd4 <_strtod_l+0x49c>
 800e620:	a307      	add	r3, pc, #28	; (adr r3, 800e640 <_strtod_l+0xb08>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	4620      	mov	r0, r4
 800e628:	4629      	mov	r1, r5
 800e62a:	f7f2 f9ef 	bl	8000a0c <__aeabi_dcmpgt>
 800e62e:	2800      	cmp	r0, #0
 800e630:	f43f af7b 	beq.w	800e52a <_strtod_l+0x9f2>
 800e634:	e4ce      	b.n	800dfd4 <_strtod_l+0x49c>
 800e636:	bf00      	nop
 800e638:	94a03595 	.word	0x94a03595
 800e63c:	3fdfffff 	.word	0x3fdfffff
 800e640:	35afe535 	.word	0x35afe535
 800e644:	3fe00000 	.word	0x3fe00000
 800e648:	000fffff 	.word	0x000fffff
 800e64c:	7ff00000 	.word	0x7ff00000
 800e650:	7fefffff 	.word	0x7fefffff
 800e654:	3ff00000 	.word	0x3ff00000
 800e658:	7fe00000 	.word	0x7fe00000
 800e65c:	7c9fffff 	.word	0x7c9fffff
 800e660:	3fe00000 	.word	0x3fe00000
 800e664:	bff00000 	.word	0xbff00000
 800e668:	9b05      	ldr	r3, [sp, #20]
 800e66a:	b313      	cbz	r3, 800e6b2 <_strtod_l+0xb7a>
 800e66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e66e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e672:	d81e      	bhi.n	800e6b2 <_strtod_l+0xb7a>
 800e674:	a326      	add	r3, pc, #152	; (adr r3, 800e710 <_strtod_l+0xbd8>)
 800e676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67a:	4620      	mov	r0, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	f7f2 f9b1 	bl	80009e4 <__aeabi_dcmple>
 800e682:	b190      	cbz	r0, 800e6aa <_strtod_l+0xb72>
 800e684:	4629      	mov	r1, r5
 800e686:	4620      	mov	r0, r4
 800e688:	f7f2 fa08 	bl	8000a9c <__aeabi_d2uiz>
 800e68c:	2801      	cmp	r0, #1
 800e68e:	bf38      	it	cc
 800e690:	2001      	movcc	r0, #1
 800e692:	f7f1 feb1 	bl	80003f8 <__aeabi_ui2d>
 800e696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e698:	4604      	mov	r4, r0
 800e69a:	460d      	mov	r5, r1
 800e69c:	b9d3      	cbnz	r3, 800e6d4 <_strtod_l+0xb9c>
 800e69e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6a2:	9012      	str	r0, [sp, #72]	; 0x48
 800e6a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e6a6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e6aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6ac:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e6b0:	1a9f      	subs	r7, r3, r2
 800e6b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e6b6:	f002 f945 	bl	8010944 <__ulp>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4630      	mov	r0, r6
 800e6c0:	4639      	mov	r1, r7
 800e6c2:	f7f1 ff13 	bl	80004ec <__aeabi_dmul>
 800e6c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e6ca:	f7f1 fd59 	bl	8000180 <__adddf3>
 800e6ce:	4680      	mov	r8, r0
 800e6d0:	4689      	mov	r9, r1
 800e6d2:	e77e      	b.n	800e5d2 <_strtod_l+0xa9a>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e6dc:	e7e3      	b.n	800e6a6 <_strtod_l+0xb6e>
 800e6de:	a30e      	add	r3, pc, #56	; (adr r3, 800e718 <_strtod_l+0xbe0>)
 800e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e4:	f7f2 f974 	bl	80009d0 <__aeabi_dcmplt>
 800e6e8:	e7a1      	b.n	800e62e <_strtod_l+0xaf6>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	930c      	str	r3, [sp, #48]	; 0x30
 800e6ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6f2:	6013      	str	r3, [r2, #0]
 800e6f4:	f7ff ba65 	b.w	800dbc2 <_strtod_l+0x8a>
 800e6f8:	2b65      	cmp	r3, #101	; 0x65
 800e6fa:	f43f ab5c 	beq.w	800ddb6 <_strtod_l+0x27e>
 800e6fe:	2b45      	cmp	r3, #69	; 0x45
 800e700:	f43f ab59 	beq.w	800ddb6 <_strtod_l+0x27e>
 800e704:	2201      	movs	r2, #1
 800e706:	f7ff bb8d 	b.w	800de24 <_strtod_l+0x2ec>
 800e70a:	bf00      	nop
 800e70c:	f3af 8000 	nop.w
 800e710:	ffc00000 	.word	0xffc00000
 800e714:	41dfffff 	.word	0x41dfffff
 800e718:	94a03595 	.word	0x94a03595
 800e71c:	3fcfffff 	.word	0x3fcfffff

0800e720 <_strtod_r>:
 800e720:	4b01      	ldr	r3, [pc, #4]	; (800e728 <_strtod_r+0x8>)
 800e722:	f7ff ba09 	b.w	800db38 <_strtod_l>
 800e726:	bf00      	nop
 800e728:	20000074 	.word	0x20000074

0800e72c <_strtol_l.isra.0>:
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e732:	4686      	mov	lr, r0
 800e734:	d001      	beq.n	800e73a <_strtol_l.isra.0+0xe>
 800e736:	2b24      	cmp	r3, #36	; 0x24
 800e738:	d906      	bls.n	800e748 <_strtol_l.isra.0+0x1c>
 800e73a:	f7fd ffd5 	bl	800c6e8 <__errno>
 800e73e:	2316      	movs	r3, #22
 800e740:	6003      	str	r3, [r0, #0]
 800e742:	2000      	movs	r0, #0
 800e744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e748:	468c      	mov	ip, r1
 800e74a:	4e3a      	ldr	r6, [pc, #232]	; (800e834 <_strtol_l.isra.0+0x108>)
 800e74c:	4660      	mov	r0, ip
 800e74e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e752:	5da5      	ldrb	r5, [r4, r6]
 800e754:	f015 0508 	ands.w	r5, r5, #8
 800e758:	d1f8      	bne.n	800e74c <_strtol_l.isra.0+0x20>
 800e75a:	2c2d      	cmp	r4, #45	; 0x2d
 800e75c:	d133      	bne.n	800e7c6 <_strtol_l.isra.0+0x9a>
 800e75e:	f04f 0801 	mov.w	r8, #1
 800e762:	f89c 4000 	ldrb.w	r4, [ip]
 800e766:	f100 0c02 	add.w	ip, r0, #2
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d05d      	beq.n	800e82a <_strtol_l.isra.0+0xfe>
 800e76e:	2b10      	cmp	r3, #16
 800e770:	d10c      	bne.n	800e78c <_strtol_l.isra.0+0x60>
 800e772:	2c30      	cmp	r4, #48	; 0x30
 800e774:	d10a      	bne.n	800e78c <_strtol_l.isra.0+0x60>
 800e776:	f89c 0000 	ldrb.w	r0, [ip]
 800e77a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e77e:	2858      	cmp	r0, #88	; 0x58
 800e780:	d14e      	bne.n	800e820 <_strtol_l.isra.0+0xf4>
 800e782:	2310      	movs	r3, #16
 800e784:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800e788:	f10c 0c02 	add.w	ip, ip, #2
 800e78c:	2500      	movs	r5, #0
 800e78e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800e792:	3f01      	subs	r7, #1
 800e794:	fbb7 f9f3 	udiv	r9, r7, r3
 800e798:	4628      	mov	r0, r5
 800e79a:	fb03 7a19 	mls	sl, r3, r9, r7
 800e79e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800e7a2:	2e09      	cmp	r6, #9
 800e7a4:	d818      	bhi.n	800e7d8 <_strtol_l.isra.0+0xac>
 800e7a6:	4634      	mov	r4, r6
 800e7a8:	42a3      	cmp	r3, r4
 800e7aa:	dd24      	ble.n	800e7f6 <_strtol_l.isra.0+0xca>
 800e7ac:	2d00      	cmp	r5, #0
 800e7ae:	db1f      	blt.n	800e7f0 <_strtol_l.isra.0+0xc4>
 800e7b0:	4581      	cmp	r9, r0
 800e7b2:	d31d      	bcc.n	800e7f0 <_strtol_l.isra.0+0xc4>
 800e7b4:	d101      	bne.n	800e7ba <_strtol_l.isra.0+0x8e>
 800e7b6:	45a2      	cmp	sl, r4
 800e7b8:	db1a      	blt.n	800e7f0 <_strtol_l.isra.0+0xc4>
 800e7ba:	2501      	movs	r5, #1
 800e7bc:	fb00 4003 	mla	r0, r0, r3, r4
 800e7c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e7c4:	e7eb      	b.n	800e79e <_strtol_l.isra.0+0x72>
 800e7c6:	2c2b      	cmp	r4, #43	; 0x2b
 800e7c8:	bf08      	it	eq
 800e7ca:	f89c 4000 	ldrbeq.w	r4, [ip]
 800e7ce:	46a8      	mov	r8, r5
 800e7d0:	bf08      	it	eq
 800e7d2:	f100 0c02 	addeq.w	ip, r0, #2
 800e7d6:	e7c8      	b.n	800e76a <_strtol_l.isra.0+0x3e>
 800e7d8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800e7dc:	2e19      	cmp	r6, #25
 800e7de:	d801      	bhi.n	800e7e4 <_strtol_l.isra.0+0xb8>
 800e7e0:	3c37      	subs	r4, #55	; 0x37
 800e7e2:	e7e1      	b.n	800e7a8 <_strtol_l.isra.0+0x7c>
 800e7e4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800e7e8:	2e19      	cmp	r6, #25
 800e7ea:	d804      	bhi.n	800e7f6 <_strtol_l.isra.0+0xca>
 800e7ec:	3c57      	subs	r4, #87	; 0x57
 800e7ee:	e7db      	b.n	800e7a8 <_strtol_l.isra.0+0x7c>
 800e7f0:	f04f 35ff 	mov.w	r5, #4294967295
 800e7f4:	e7e4      	b.n	800e7c0 <_strtol_l.isra.0+0x94>
 800e7f6:	2d00      	cmp	r5, #0
 800e7f8:	da08      	bge.n	800e80c <_strtol_l.isra.0+0xe0>
 800e7fa:	2322      	movs	r3, #34	; 0x22
 800e7fc:	4638      	mov	r0, r7
 800e7fe:	f8ce 3000 	str.w	r3, [lr]
 800e802:	2a00      	cmp	r2, #0
 800e804:	d09e      	beq.n	800e744 <_strtol_l.isra.0+0x18>
 800e806:	f10c 31ff 	add.w	r1, ip, #4294967295
 800e80a:	e007      	b.n	800e81c <_strtol_l.isra.0+0xf0>
 800e80c:	f1b8 0f00 	cmp.w	r8, #0
 800e810:	d000      	beq.n	800e814 <_strtol_l.isra.0+0xe8>
 800e812:	4240      	negs	r0, r0
 800e814:	2a00      	cmp	r2, #0
 800e816:	d095      	beq.n	800e744 <_strtol_l.isra.0+0x18>
 800e818:	2d00      	cmp	r5, #0
 800e81a:	d1f4      	bne.n	800e806 <_strtol_l.isra.0+0xda>
 800e81c:	6011      	str	r1, [r2, #0]
 800e81e:	e791      	b.n	800e744 <_strtol_l.isra.0+0x18>
 800e820:	2430      	movs	r4, #48	; 0x30
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1b2      	bne.n	800e78c <_strtol_l.isra.0+0x60>
 800e826:	2308      	movs	r3, #8
 800e828:	e7b0      	b.n	800e78c <_strtol_l.isra.0+0x60>
 800e82a:	2c30      	cmp	r4, #48	; 0x30
 800e82c:	d0a3      	beq.n	800e776 <_strtol_l.isra.0+0x4a>
 800e82e:	230a      	movs	r3, #10
 800e830:	e7ac      	b.n	800e78c <_strtol_l.isra.0+0x60>
 800e832:	bf00      	nop
 800e834:	08012101 	.word	0x08012101

0800e838 <_strtol_r>:
 800e838:	f7ff bf78 	b.w	800e72c <_strtol_l.isra.0>

0800e83c <__swbuf_r>:
 800e83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83e:	460e      	mov	r6, r1
 800e840:	4614      	mov	r4, r2
 800e842:	4605      	mov	r5, r0
 800e844:	b118      	cbz	r0, 800e84e <__swbuf_r+0x12>
 800e846:	6983      	ldr	r3, [r0, #24]
 800e848:	b90b      	cbnz	r3, 800e84e <__swbuf_r+0x12>
 800e84a:	f001 f855 	bl	800f8f8 <__sinit>
 800e84e:	4b21      	ldr	r3, [pc, #132]	; (800e8d4 <__swbuf_r+0x98>)
 800e850:	429c      	cmp	r4, r3
 800e852:	d12b      	bne.n	800e8ac <__swbuf_r+0x70>
 800e854:	686c      	ldr	r4, [r5, #4]
 800e856:	69a3      	ldr	r3, [r4, #24]
 800e858:	60a3      	str	r3, [r4, #8]
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	071a      	lsls	r2, r3, #28
 800e85e:	d52f      	bpl.n	800e8c0 <__swbuf_r+0x84>
 800e860:	6923      	ldr	r3, [r4, #16]
 800e862:	b36b      	cbz	r3, 800e8c0 <__swbuf_r+0x84>
 800e864:	6923      	ldr	r3, [r4, #16]
 800e866:	6820      	ldr	r0, [r4, #0]
 800e868:	b2f6      	uxtb	r6, r6
 800e86a:	1ac0      	subs	r0, r0, r3
 800e86c:	6963      	ldr	r3, [r4, #20]
 800e86e:	4637      	mov	r7, r6
 800e870:	4283      	cmp	r3, r0
 800e872:	dc04      	bgt.n	800e87e <__swbuf_r+0x42>
 800e874:	4621      	mov	r1, r4
 800e876:	4628      	mov	r0, r5
 800e878:	f000 ffaa 	bl	800f7d0 <_fflush_r>
 800e87c:	bb30      	cbnz	r0, 800e8cc <__swbuf_r+0x90>
 800e87e:	68a3      	ldr	r3, [r4, #8]
 800e880:	3001      	adds	r0, #1
 800e882:	3b01      	subs	r3, #1
 800e884:	60a3      	str	r3, [r4, #8]
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	1c5a      	adds	r2, r3, #1
 800e88a:	6022      	str	r2, [r4, #0]
 800e88c:	701e      	strb	r6, [r3, #0]
 800e88e:	6963      	ldr	r3, [r4, #20]
 800e890:	4283      	cmp	r3, r0
 800e892:	d004      	beq.n	800e89e <__swbuf_r+0x62>
 800e894:	89a3      	ldrh	r3, [r4, #12]
 800e896:	07db      	lsls	r3, r3, #31
 800e898:	d506      	bpl.n	800e8a8 <__swbuf_r+0x6c>
 800e89a:	2e0a      	cmp	r6, #10
 800e89c:	d104      	bne.n	800e8a8 <__swbuf_r+0x6c>
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	f000 ff95 	bl	800f7d0 <_fflush_r>
 800e8a6:	b988      	cbnz	r0, 800e8cc <__swbuf_r+0x90>
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8ac:	4b0a      	ldr	r3, [pc, #40]	; (800e8d8 <__swbuf_r+0x9c>)
 800e8ae:	429c      	cmp	r4, r3
 800e8b0:	d101      	bne.n	800e8b6 <__swbuf_r+0x7a>
 800e8b2:	68ac      	ldr	r4, [r5, #8]
 800e8b4:	e7cf      	b.n	800e856 <__swbuf_r+0x1a>
 800e8b6:	4b09      	ldr	r3, [pc, #36]	; (800e8dc <__swbuf_r+0xa0>)
 800e8b8:	429c      	cmp	r4, r3
 800e8ba:	bf08      	it	eq
 800e8bc:	68ec      	ldreq	r4, [r5, #12]
 800e8be:	e7ca      	b.n	800e856 <__swbuf_r+0x1a>
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	f000 f80c 	bl	800e8e0 <__swsetup_r>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d0cb      	beq.n	800e864 <__swbuf_r+0x28>
 800e8cc:	f04f 37ff 	mov.w	r7, #4294967295
 800e8d0:	e7ea      	b.n	800e8a8 <__swbuf_r+0x6c>
 800e8d2:	bf00      	nop
 800e8d4:	080122b8 	.word	0x080122b8
 800e8d8:	080122d8 	.word	0x080122d8
 800e8dc:	08012298 	.word	0x08012298

0800e8e0 <__swsetup_r>:
 800e8e0:	4b32      	ldr	r3, [pc, #200]	; (800e9ac <__swsetup_r+0xcc>)
 800e8e2:	b570      	push	{r4, r5, r6, lr}
 800e8e4:	681d      	ldr	r5, [r3, #0]
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	460c      	mov	r4, r1
 800e8ea:	b125      	cbz	r5, 800e8f6 <__swsetup_r+0x16>
 800e8ec:	69ab      	ldr	r3, [r5, #24]
 800e8ee:	b913      	cbnz	r3, 800e8f6 <__swsetup_r+0x16>
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	f001 f801 	bl	800f8f8 <__sinit>
 800e8f6:	4b2e      	ldr	r3, [pc, #184]	; (800e9b0 <__swsetup_r+0xd0>)
 800e8f8:	429c      	cmp	r4, r3
 800e8fa:	d10f      	bne.n	800e91c <__swsetup_r+0x3c>
 800e8fc:	686c      	ldr	r4, [r5, #4]
 800e8fe:	89a3      	ldrh	r3, [r4, #12]
 800e900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e904:	0719      	lsls	r1, r3, #28
 800e906:	d42c      	bmi.n	800e962 <__swsetup_r+0x82>
 800e908:	06dd      	lsls	r5, r3, #27
 800e90a:	d411      	bmi.n	800e930 <__swsetup_r+0x50>
 800e90c:	2309      	movs	r3, #9
 800e90e:	6033      	str	r3, [r6, #0]
 800e910:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	81a3      	strh	r3, [r4, #12]
 800e91a:	e03e      	b.n	800e99a <__swsetup_r+0xba>
 800e91c:	4b25      	ldr	r3, [pc, #148]	; (800e9b4 <__swsetup_r+0xd4>)
 800e91e:	429c      	cmp	r4, r3
 800e920:	d101      	bne.n	800e926 <__swsetup_r+0x46>
 800e922:	68ac      	ldr	r4, [r5, #8]
 800e924:	e7eb      	b.n	800e8fe <__swsetup_r+0x1e>
 800e926:	4b24      	ldr	r3, [pc, #144]	; (800e9b8 <__swsetup_r+0xd8>)
 800e928:	429c      	cmp	r4, r3
 800e92a:	bf08      	it	eq
 800e92c:	68ec      	ldreq	r4, [r5, #12]
 800e92e:	e7e6      	b.n	800e8fe <__swsetup_r+0x1e>
 800e930:	0758      	lsls	r0, r3, #29
 800e932:	d512      	bpl.n	800e95a <__swsetup_r+0x7a>
 800e934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e936:	b141      	cbz	r1, 800e94a <__swsetup_r+0x6a>
 800e938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e93c:	4299      	cmp	r1, r3
 800e93e:	d002      	beq.n	800e946 <__swsetup_r+0x66>
 800e940:	4630      	mov	r0, r6
 800e942:	f7fd ff41 	bl	800c7c8 <_free_r>
 800e946:	2300      	movs	r3, #0
 800e948:	6363      	str	r3, [r4, #52]	; 0x34
 800e94a:	89a3      	ldrh	r3, [r4, #12]
 800e94c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e950:	81a3      	strh	r3, [r4, #12]
 800e952:	2300      	movs	r3, #0
 800e954:	6063      	str	r3, [r4, #4]
 800e956:	6923      	ldr	r3, [r4, #16]
 800e958:	6023      	str	r3, [r4, #0]
 800e95a:	89a3      	ldrh	r3, [r4, #12]
 800e95c:	f043 0308 	orr.w	r3, r3, #8
 800e960:	81a3      	strh	r3, [r4, #12]
 800e962:	6923      	ldr	r3, [r4, #16]
 800e964:	b94b      	cbnz	r3, 800e97a <__swsetup_r+0x9a>
 800e966:	89a3      	ldrh	r3, [r4, #12]
 800e968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e96c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e970:	d003      	beq.n	800e97a <__swsetup_r+0x9a>
 800e972:	4621      	mov	r1, r4
 800e974:	4630      	mov	r0, r6
 800e976:	f001 fbef 	bl	8010158 <__smakebuf_r>
 800e97a:	89a0      	ldrh	r0, [r4, #12]
 800e97c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e980:	f010 0301 	ands.w	r3, r0, #1
 800e984:	d00a      	beq.n	800e99c <__swsetup_r+0xbc>
 800e986:	2300      	movs	r3, #0
 800e988:	60a3      	str	r3, [r4, #8]
 800e98a:	6963      	ldr	r3, [r4, #20]
 800e98c:	425b      	negs	r3, r3
 800e98e:	61a3      	str	r3, [r4, #24]
 800e990:	6923      	ldr	r3, [r4, #16]
 800e992:	b943      	cbnz	r3, 800e9a6 <__swsetup_r+0xc6>
 800e994:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e998:	d1ba      	bne.n	800e910 <__swsetup_r+0x30>
 800e99a:	bd70      	pop	{r4, r5, r6, pc}
 800e99c:	0781      	lsls	r1, r0, #30
 800e99e:	bf58      	it	pl
 800e9a0:	6963      	ldrpl	r3, [r4, #20]
 800e9a2:	60a3      	str	r3, [r4, #8]
 800e9a4:	e7f4      	b.n	800e990 <__swsetup_r+0xb0>
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	e7f7      	b.n	800e99a <__swsetup_r+0xba>
 800e9aa:	bf00      	nop
 800e9ac:	2000000c 	.word	0x2000000c
 800e9b0:	080122b8 	.word	0x080122b8
 800e9b4:	080122d8 	.word	0x080122d8
 800e9b8:	08012298 	.word	0x08012298

0800e9bc <abort>:
 800e9bc:	2006      	movs	r0, #6
 800e9be:	b508      	push	{r3, lr}
 800e9c0:	f002 fac6 	bl	8010f50 <raise>
 800e9c4:	2001      	movs	r0, #1
 800e9c6:	f7fa fdf8 	bl	80095ba <_exit>

0800e9ca <quorem>:
 800e9ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ce:	6903      	ldr	r3, [r0, #16]
 800e9d0:	690c      	ldr	r4, [r1, #16]
 800e9d2:	4607      	mov	r7, r0
 800e9d4:	42a3      	cmp	r3, r4
 800e9d6:	f2c0 8083 	blt.w	800eae0 <quorem+0x116>
 800e9da:	3c01      	subs	r4, #1
 800e9dc:	f100 0514 	add.w	r5, r0, #20
 800e9e0:	f101 0814 	add.w	r8, r1, #20
 800e9e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9e8:	9301      	str	r3, [sp, #4]
 800e9ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e9ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800e9fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e9fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea02:	d332      	bcc.n	800ea6a <quorem+0xa0>
 800ea04:	f04f 0e00 	mov.w	lr, #0
 800ea08:	4640      	mov	r0, r8
 800ea0a:	46ac      	mov	ip, r5
 800ea0c:	46f2      	mov	sl, lr
 800ea0e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea12:	b293      	uxth	r3, r2
 800ea14:	fb06 e303 	mla	r3, r6, r3, lr
 800ea18:	0c12      	lsrs	r2, r2, #16
 800ea1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ea1e:	fb06 e202 	mla	r2, r6, r2, lr
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	ebaa 0303 	sub.w	r3, sl, r3
 800ea28:	f8dc a000 	ldr.w	sl, [ip]
 800ea2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea30:	fa1f fa8a 	uxth.w	sl, sl
 800ea34:	4453      	add	r3, sl
 800ea36:	fa1f fa82 	uxth.w	sl, r2
 800ea3a:	f8dc 2000 	ldr.w	r2, [ip]
 800ea3e:	4581      	cmp	r9, r0
 800ea40:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ea44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ea52:	f84c 3b04 	str.w	r3, [ip], #4
 800ea56:	d2da      	bcs.n	800ea0e <quorem+0x44>
 800ea58:	f855 300b 	ldr.w	r3, [r5, fp]
 800ea5c:	b92b      	cbnz	r3, 800ea6a <quorem+0xa0>
 800ea5e:	9b01      	ldr	r3, [sp, #4]
 800ea60:	3b04      	subs	r3, #4
 800ea62:	429d      	cmp	r5, r3
 800ea64:	461a      	mov	r2, r3
 800ea66:	d32f      	bcc.n	800eac8 <quorem+0xfe>
 800ea68:	613c      	str	r4, [r7, #16]
 800ea6a:	4638      	mov	r0, r7
 800ea6c:	f001 febe 	bl	80107ec <__mcmp>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	db25      	blt.n	800eac0 <quorem+0xf6>
 800ea74:	4628      	mov	r0, r5
 800ea76:	f04f 0c00 	mov.w	ip, #0
 800ea7a:	3601      	adds	r6, #1
 800ea7c:	f858 1b04 	ldr.w	r1, [r8], #4
 800ea80:	f8d0 e000 	ldr.w	lr, [r0]
 800ea84:	b28b      	uxth	r3, r1
 800ea86:	ebac 0303 	sub.w	r3, ip, r3
 800ea8a:	fa1f f28e 	uxth.w	r2, lr
 800ea8e:	4413      	add	r3, r2
 800ea90:	0c0a      	lsrs	r2, r1, #16
 800ea92:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ea96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eaa0:	45c1      	cmp	r9, r8
 800eaa2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eaa6:	f840 3b04 	str.w	r3, [r0], #4
 800eaaa:	d2e7      	bcs.n	800ea7c <quorem+0xb2>
 800eaac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eab0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eab4:	b922      	cbnz	r2, 800eac0 <quorem+0xf6>
 800eab6:	3b04      	subs	r3, #4
 800eab8:	429d      	cmp	r5, r3
 800eaba:	461a      	mov	r2, r3
 800eabc:	d30a      	bcc.n	800ead4 <quorem+0x10a>
 800eabe:	613c      	str	r4, [r7, #16]
 800eac0:	4630      	mov	r0, r6
 800eac2:	b003      	add	sp, #12
 800eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac8:	6812      	ldr	r2, [r2, #0]
 800eaca:	3b04      	subs	r3, #4
 800eacc:	2a00      	cmp	r2, #0
 800eace:	d1cb      	bne.n	800ea68 <quorem+0x9e>
 800ead0:	3c01      	subs	r4, #1
 800ead2:	e7c6      	b.n	800ea62 <quorem+0x98>
 800ead4:	6812      	ldr	r2, [r2, #0]
 800ead6:	3b04      	subs	r3, #4
 800ead8:	2a00      	cmp	r2, #0
 800eada:	d1f0      	bne.n	800eabe <quorem+0xf4>
 800eadc:	3c01      	subs	r4, #1
 800eade:	e7eb      	b.n	800eab8 <quorem+0xee>
 800eae0:	2000      	movs	r0, #0
 800eae2:	e7ee      	b.n	800eac2 <quorem+0xf8>
 800eae4:	0000      	movs	r0, r0
	...

0800eae8 <_dtoa_r>:
 800eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaec:	4616      	mov	r6, r2
 800eaee:	461f      	mov	r7, r3
 800eaf0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800eaf2:	b099      	sub	sp, #100	; 0x64
 800eaf4:	4605      	mov	r5, r0
 800eaf6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800eafa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800eafe:	b974      	cbnz	r4, 800eb1e <_dtoa_r+0x36>
 800eb00:	2010      	movs	r0, #16
 800eb02:	f7fd fe2d 	bl	800c760 <malloc>
 800eb06:	4602      	mov	r2, r0
 800eb08:	6268      	str	r0, [r5, #36]	; 0x24
 800eb0a:	b920      	cbnz	r0, 800eb16 <_dtoa_r+0x2e>
 800eb0c:	21ea      	movs	r1, #234	; 0xea
 800eb0e:	4bae      	ldr	r3, [pc, #696]	; (800edc8 <_dtoa_r+0x2e0>)
 800eb10:	48ae      	ldr	r0, [pc, #696]	; (800edcc <_dtoa_r+0x2e4>)
 800eb12:	f7fd fdcb 	bl	800c6ac <__assert_func>
 800eb16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb1a:	6004      	str	r4, [r0, #0]
 800eb1c:	60c4      	str	r4, [r0, #12]
 800eb1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb20:	6819      	ldr	r1, [r3, #0]
 800eb22:	b151      	cbz	r1, 800eb3a <_dtoa_r+0x52>
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	2301      	movs	r3, #1
 800eb28:	4093      	lsls	r3, r2
 800eb2a:	604a      	str	r2, [r1, #4]
 800eb2c:	608b      	str	r3, [r1, #8]
 800eb2e:	4628      	mov	r0, r5
 800eb30:	f001 fbd8 	bl	80102e4 <_Bfree>
 800eb34:	2200      	movs	r2, #0
 800eb36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb38:	601a      	str	r2, [r3, #0]
 800eb3a:	1e3b      	subs	r3, r7, #0
 800eb3c:	bfaf      	iteee	ge
 800eb3e:	2300      	movge	r3, #0
 800eb40:	2201      	movlt	r2, #1
 800eb42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eb46:	9305      	strlt	r3, [sp, #20]
 800eb48:	bfa8      	it	ge
 800eb4a:	f8c8 3000 	strge.w	r3, [r8]
 800eb4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800eb52:	4b9f      	ldr	r3, [pc, #636]	; (800edd0 <_dtoa_r+0x2e8>)
 800eb54:	bfb8      	it	lt
 800eb56:	f8c8 2000 	strlt.w	r2, [r8]
 800eb5a:	ea33 0309 	bics.w	r3, r3, r9
 800eb5e:	d119      	bne.n	800eb94 <_dtoa_r+0xac>
 800eb60:	f242 730f 	movw	r3, #9999	; 0x270f
 800eb64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eb66:	6013      	str	r3, [r2, #0]
 800eb68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb6c:	4333      	orrs	r3, r6
 800eb6e:	f000 8580 	beq.w	800f672 <_dtoa_r+0xb8a>
 800eb72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb74:	b953      	cbnz	r3, 800eb8c <_dtoa_r+0xa4>
 800eb76:	4b97      	ldr	r3, [pc, #604]	; (800edd4 <_dtoa_r+0x2ec>)
 800eb78:	e022      	b.n	800ebc0 <_dtoa_r+0xd8>
 800eb7a:	4b97      	ldr	r3, [pc, #604]	; (800edd8 <_dtoa_r+0x2f0>)
 800eb7c:	9308      	str	r3, [sp, #32]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eb82:	6013      	str	r3, [r2, #0]
 800eb84:	9808      	ldr	r0, [sp, #32]
 800eb86:	b019      	add	sp, #100	; 0x64
 800eb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8c:	4b91      	ldr	r3, [pc, #580]	; (800edd4 <_dtoa_r+0x2ec>)
 800eb8e:	9308      	str	r3, [sp, #32]
 800eb90:	3303      	adds	r3, #3
 800eb92:	e7f5      	b.n	800eb80 <_dtoa_r+0x98>
 800eb94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800eb98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800eb9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eba0:	2200      	movs	r2, #0
 800eba2:	2300      	movs	r3, #0
 800eba4:	f7f1 ff0a 	bl	80009bc <__aeabi_dcmpeq>
 800eba8:	4680      	mov	r8, r0
 800ebaa:	b158      	cbz	r0, 800ebc4 <_dtoa_r+0xdc>
 800ebac:	2301      	movs	r3, #1
 800ebae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ebb0:	6013      	str	r3, [r2, #0]
 800ebb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f000 8559 	beq.w	800f66c <_dtoa_r+0xb84>
 800ebba:	4888      	ldr	r0, [pc, #544]	; (800eddc <_dtoa_r+0x2f4>)
 800ebbc:	6018      	str	r0, [r3, #0]
 800ebbe:	1e43      	subs	r3, r0, #1
 800ebc0:	9308      	str	r3, [sp, #32]
 800ebc2:	e7df      	b.n	800eb84 <_dtoa_r+0x9c>
 800ebc4:	ab16      	add	r3, sp, #88	; 0x58
 800ebc6:	9301      	str	r3, [sp, #4]
 800ebc8:	ab17      	add	r3, sp, #92	; 0x5c
 800ebca:	9300      	str	r3, [sp, #0]
 800ebcc:	4628      	mov	r0, r5
 800ebce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ebd2:	f001 ff31 	bl	8010a38 <__d2b>
 800ebd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ebda:	4682      	mov	sl, r0
 800ebdc:	2c00      	cmp	r4, #0
 800ebde:	d07e      	beq.n	800ecde <_dtoa_r+0x1f6>
 800ebe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ebe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebe6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ebea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ebf2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ebf6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	4b78      	ldr	r3, [pc, #480]	; (800ede0 <_dtoa_r+0x2f8>)
 800ebfe:	f7f1 fabd 	bl	800017c <__aeabi_dsub>
 800ec02:	a36b      	add	r3, pc, #428	; (adr r3, 800edb0 <_dtoa_r+0x2c8>)
 800ec04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec08:	f7f1 fc70 	bl	80004ec <__aeabi_dmul>
 800ec0c:	a36a      	add	r3, pc, #424	; (adr r3, 800edb8 <_dtoa_r+0x2d0>)
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	f7f1 fab5 	bl	8000180 <__adddf3>
 800ec16:	4606      	mov	r6, r0
 800ec18:	4620      	mov	r0, r4
 800ec1a:	460f      	mov	r7, r1
 800ec1c:	f7f1 fbfc 	bl	8000418 <__aeabi_i2d>
 800ec20:	a367      	add	r3, pc, #412	; (adr r3, 800edc0 <_dtoa_r+0x2d8>)
 800ec22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec26:	f7f1 fc61 	bl	80004ec <__aeabi_dmul>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	4630      	mov	r0, r6
 800ec30:	4639      	mov	r1, r7
 800ec32:	f7f1 faa5 	bl	8000180 <__adddf3>
 800ec36:	4606      	mov	r6, r0
 800ec38:	460f      	mov	r7, r1
 800ec3a:	f7f1 ff07 	bl	8000a4c <__aeabi_d2iz>
 800ec3e:	2200      	movs	r2, #0
 800ec40:	4681      	mov	r9, r0
 800ec42:	2300      	movs	r3, #0
 800ec44:	4630      	mov	r0, r6
 800ec46:	4639      	mov	r1, r7
 800ec48:	f7f1 fec2 	bl	80009d0 <__aeabi_dcmplt>
 800ec4c:	b148      	cbz	r0, 800ec62 <_dtoa_r+0x17a>
 800ec4e:	4648      	mov	r0, r9
 800ec50:	f7f1 fbe2 	bl	8000418 <__aeabi_i2d>
 800ec54:	4632      	mov	r2, r6
 800ec56:	463b      	mov	r3, r7
 800ec58:	f7f1 feb0 	bl	80009bc <__aeabi_dcmpeq>
 800ec5c:	b908      	cbnz	r0, 800ec62 <_dtoa_r+0x17a>
 800ec5e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec62:	f1b9 0f16 	cmp.w	r9, #22
 800ec66:	d857      	bhi.n	800ed18 <_dtoa_r+0x230>
 800ec68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec6c:	4b5d      	ldr	r3, [pc, #372]	; (800ede4 <_dtoa_r+0x2fc>)
 800ec6e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	f7f1 feab 	bl	80009d0 <__aeabi_dcmplt>
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	d04e      	beq.n	800ed1c <_dtoa_r+0x234>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec84:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ec88:	1b1c      	subs	r4, r3, r4
 800ec8a:	1e63      	subs	r3, r4, #1
 800ec8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec8e:	bf49      	itett	mi
 800ec90:	f1c4 0301 	rsbmi	r3, r4, #1
 800ec94:	2300      	movpl	r3, #0
 800ec96:	9306      	strmi	r3, [sp, #24]
 800ec98:	2300      	movmi	r3, #0
 800ec9a:	bf54      	ite	pl
 800ec9c:	9306      	strpl	r3, [sp, #24]
 800ec9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800eca0:	f1b9 0f00 	cmp.w	r9, #0
 800eca4:	db3c      	blt.n	800ed20 <_dtoa_r+0x238>
 800eca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eca8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ecac:	444b      	add	r3, r9
 800ecae:	9309      	str	r3, [sp, #36]	; 0x24
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	930a      	str	r3, [sp, #40]	; 0x28
 800ecb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ecb6:	2b09      	cmp	r3, #9
 800ecb8:	d86c      	bhi.n	800ed94 <_dtoa_r+0x2ac>
 800ecba:	2b05      	cmp	r3, #5
 800ecbc:	bfc4      	itt	gt
 800ecbe:	3b04      	subgt	r3, #4
 800ecc0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ecc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ecc4:	bfc8      	it	gt
 800ecc6:	2400      	movgt	r4, #0
 800ecc8:	f1a3 0302 	sub.w	r3, r3, #2
 800eccc:	bfd8      	it	le
 800ecce:	2401      	movle	r4, #1
 800ecd0:	2b03      	cmp	r3, #3
 800ecd2:	f200 808b 	bhi.w	800edec <_dtoa_r+0x304>
 800ecd6:	e8df f003 	tbb	[pc, r3]
 800ecda:	4f2d      	.short	0x4f2d
 800ecdc:	5b4d      	.short	0x5b4d
 800ecde:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ece2:	441c      	add	r4, r3
 800ece4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ece8:	2b20      	cmp	r3, #32
 800ecea:	bfc3      	ittte	gt
 800ecec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ecf0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ecf4:	fa09 f303 	lslgt.w	r3, r9, r3
 800ecf8:	f1c3 0320 	rsble	r3, r3, #32
 800ecfc:	bfc6      	itte	gt
 800ecfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ed02:	4318      	orrgt	r0, r3
 800ed04:	fa06 f003 	lslle.w	r0, r6, r3
 800ed08:	f7f1 fb76 	bl	80003f8 <__aeabi_ui2d>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ed12:	3c01      	subs	r4, #1
 800ed14:	9313      	str	r3, [sp, #76]	; 0x4c
 800ed16:	e770      	b.n	800ebfa <_dtoa_r+0x112>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e7b3      	b.n	800ec84 <_dtoa_r+0x19c>
 800ed1c:	900f      	str	r0, [sp, #60]	; 0x3c
 800ed1e:	e7b2      	b.n	800ec86 <_dtoa_r+0x19e>
 800ed20:	9b06      	ldr	r3, [sp, #24]
 800ed22:	eba3 0309 	sub.w	r3, r3, r9
 800ed26:	9306      	str	r3, [sp, #24]
 800ed28:	f1c9 0300 	rsb	r3, r9, #0
 800ed2c:	930a      	str	r3, [sp, #40]	; 0x28
 800ed2e:	2300      	movs	r3, #0
 800ed30:	930e      	str	r3, [sp, #56]	; 0x38
 800ed32:	e7bf      	b.n	800ecb4 <_dtoa_r+0x1cc>
 800ed34:	2300      	movs	r3, #0
 800ed36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	dc59      	bgt.n	800edf2 <_dtoa_r+0x30a>
 800ed3e:	f04f 0b01 	mov.w	fp, #1
 800ed42:	465b      	mov	r3, fp
 800ed44:	f8cd b008 	str.w	fp, [sp, #8]
 800ed48:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ed50:	6042      	str	r2, [r0, #4]
 800ed52:	2204      	movs	r2, #4
 800ed54:	f102 0614 	add.w	r6, r2, #20
 800ed58:	429e      	cmp	r6, r3
 800ed5a:	6841      	ldr	r1, [r0, #4]
 800ed5c:	d94f      	bls.n	800edfe <_dtoa_r+0x316>
 800ed5e:	4628      	mov	r0, r5
 800ed60:	f001 fa80 	bl	8010264 <_Balloc>
 800ed64:	9008      	str	r0, [sp, #32]
 800ed66:	2800      	cmp	r0, #0
 800ed68:	d14d      	bne.n	800ee06 <_dtoa_r+0x31e>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ed70:	4b1d      	ldr	r3, [pc, #116]	; (800ede8 <_dtoa_r+0x300>)
 800ed72:	e6cd      	b.n	800eb10 <_dtoa_r+0x28>
 800ed74:	2301      	movs	r3, #1
 800ed76:	e7de      	b.n	800ed36 <_dtoa_r+0x24e>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed7e:	eb09 0b03 	add.w	fp, r9, r3
 800ed82:	f10b 0301 	add.w	r3, fp, #1
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	9302      	str	r3, [sp, #8]
 800ed8a:	bfb8      	it	lt
 800ed8c:	2301      	movlt	r3, #1
 800ed8e:	e7dd      	b.n	800ed4c <_dtoa_r+0x264>
 800ed90:	2301      	movs	r3, #1
 800ed92:	e7f2      	b.n	800ed7a <_dtoa_r+0x292>
 800ed94:	2401      	movs	r4, #1
 800ed96:	2300      	movs	r3, #0
 800ed98:	940b      	str	r4, [sp, #44]	; 0x2c
 800ed9a:	9322      	str	r3, [sp, #136]	; 0x88
 800ed9c:	f04f 3bff 	mov.w	fp, #4294967295
 800eda0:	2200      	movs	r2, #0
 800eda2:	2312      	movs	r3, #18
 800eda4:	f8cd b008 	str.w	fp, [sp, #8]
 800eda8:	9223      	str	r2, [sp, #140]	; 0x8c
 800edaa:	e7cf      	b.n	800ed4c <_dtoa_r+0x264>
 800edac:	f3af 8000 	nop.w
 800edb0:	636f4361 	.word	0x636f4361
 800edb4:	3fd287a7 	.word	0x3fd287a7
 800edb8:	8b60c8b3 	.word	0x8b60c8b3
 800edbc:	3fc68a28 	.word	0x3fc68a28
 800edc0:	509f79fb 	.word	0x509f79fb
 800edc4:	3fd34413 	.word	0x3fd34413
 800edc8:	0801220e 	.word	0x0801220e
 800edcc:	08012225 	.word	0x08012225
 800edd0:	7ff00000 	.word	0x7ff00000
 800edd4:	0801220a 	.word	0x0801220a
 800edd8:	08012201 	.word	0x08012201
 800eddc:	08012082 	.word	0x08012082
 800ede0:	3ff80000 	.word	0x3ff80000
 800ede4:	08012400 	.word	0x08012400
 800ede8:	08012284 	.word	0x08012284
 800edec:	2301      	movs	r3, #1
 800edee:	930b      	str	r3, [sp, #44]	; 0x2c
 800edf0:	e7d4      	b.n	800ed9c <_dtoa_r+0x2b4>
 800edf2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800edf6:	465b      	mov	r3, fp
 800edf8:	f8cd b008 	str.w	fp, [sp, #8]
 800edfc:	e7a6      	b.n	800ed4c <_dtoa_r+0x264>
 800edfe:	3101      	adds	r1, #1
 800ee00:	6041      	str	r1, [r0, #4]
 800ee02:	0052      	lsls	r2, r2, #1
 800ee04:	e7a6      	b.n	800ed54 <_dtoa_r+0x26c>
 800ee06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee08:	9a08      	ldr	r2, [sp, #32]
 800ee0a:	601a      	str	r2, [r3, #0]
 800ee0c:	9b02      	ldr	r3, [sp, #8]
 800ee0e:	2b0e      	cmp	r3, #14
 800ee10:	f200 80a8 	bhi.w	800ef64 <_dtoa_r+0x47c>
 800ee14:	2c00      	cmp	r4, #0
 800ee16:	f000 80a5 	beq.w	800ef64 <_dtoa_r+0x47c>
 800ee1a:	f1b9 0f00 	cmp.w	r9, #0
 800ee1e:	dd34      	ble.n	800ee8a <_dtoa_r+0x3a2>
 800ee20:	4a9a      	ldr	r2, [pc, #616]	; (800f08c <_dtoa_r+0x5a4>)
 800ee22:	f009 030f 	and.w	r3, r9, #15
 800ee26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ee2a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ee2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ee32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ee36:	ea4f 1429 	mov.w	r4, r9, asr #4
 800ee3a:	d016      	beq.n	800ee6a <_dtoa_r+0x382>
 800ee3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee40:	4b93      	ldr	r3, [pc, #588]	; (800f090 <_dtoa_r+0x5a8>)
 800ee42:	2703      	movs	r7, #3
 800ee44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ee48:	f7f1 fc7a 	bl	8000740 <__aeabi_ddiv>
 800ee4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee50:	f004 040f 	and.w	r4, r4, #15
 800ee54:	4e8e      	ldr	r6, [pc, #568]	; (800f090 <_dtoa_r+0x5a8>)
 800ee56:	b954      	cbnz	r4, 800ee6e <_dtoa_r+0x386>
 800ee58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ee5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee60:	f7f1 fc6e 	bl	8000740 <__aeabi_ddiv>
 800ee64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee68:	e029      	b.n	800eebe <_dtoa_r+0x3d6>
 800ee6a:	2702      	movs	r7, #2
 800ee6c:	e7f2      	b.n	800ee54 <_dtoa_r+0x36c>
 800ee6e:	07e1      	lsls	r1, r4, #31
 800ee70:	d508      	bpl.n	800ee84 <_dtoa_r+0x39c>
 800ee72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee76:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ee7a:	f7f1 fb37 	bl	80004ec <__aeabi_dmul>
 800ee7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ee82:	3701      	adds	r7, #1
 800ee84:	1064      	asrs	r4, r4, #1
 800ee86:	3608      	adds	r6, #8
 800ee88:	e7e5      	b.n	800ee56 <_dtoa_r+0x36e>
 800ee8a:	f000 80a5 	beq.w	800efd8 <_dtoa_r+0x4f0>
 800ee8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee92:	f1c9 0400 	rsb	r4, r9, #0
 800ee96:	4b7d      	ldr	r3, [pc, #500]	; (800f08c <_dtoa_r+0x5a4>)
 800ee98:	f004 020f 	and.w	r2, r4, #15
 800ee9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea4:	f7f1 fb22 	bl	80004ec <__aeabi_dmul>
 800eea8:	2702      	movs	r7, #2
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eeb0:	4e77      	ldr	r6, [pc, #476]	; (800f090 <_dtoa_r+0x5a8>)
 800eeb2:	1124      	asrs	r4, r4, #4
 800eeb4:	2c00      	cmp	r4, #0
 800eeb6:	f040 8084 	bne.w	800efc2 <_dtoa_r+0x4da>
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d1d2      	bne.n	800ee64 <_dtoa_r+0x37c>
 800eebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f000 808b 	beq.w	800efdc <_dtoa_r+0x4f4>
 800eec6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800eeca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800eece:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eed2:	2200      	movs	r2, #0
 800eed4:	4b6f      	ldr	r3, [pc, #444]	; (800f094 <_dtoa_r+0x5ac>)
 800eed6:	f7f1 fd7b 	bl	80009d0 <__aeabi_dcmplt>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d07e      	beq.n	800efdc <_dtoa_r+0x4f4>
 800eede:	9b02      	ldr	r3, [sp, #8]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d07b      	beq.n	800efdc <_dtoa_r+0x4f4>
 800eee4:	f1bb 0f00 	cmp.w	fp, #0
 800eee8:	dd38      	ble.n	800ef5c <_dtoa_r+0x474>
 800eeea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eeee:	2200      	movs	r2, #0
 800eef0:	4b69      	ldr	r3, [pc, #420]	; (800f098 <_dtoa_r+0x5b0>)
 800eef2:	f7f1 fafb 	bl	80004ec <__aeabi_dmul>
 800eef6:	465c      	mov	r4, fp
 800eef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eefc:	f109 38ff 	add.w	r8, r9, #4294967295
 800ef00:	3701      	adds	r7, #1
 800ef02:	4638      	mov	r0, r7
 800ef04:	f7f1 fa88 	bl	8000418 <__aeabi_i2d>
 800ef08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef0c:	f7f1 faee 	bl	80004ec <__aeabi_dmul>
 800ef10:	2200      	movs	r2, #0
 800ef12:	4b62      	ldr	r3, [pc, #392]	; (800f09c <_dtoa_r+0x5b4>)
 800ef14:	f7f1 f934 	bl	8000180 <__adddf3>
 800ef18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ef1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ef20:	9611      	str	r6, [sp, #68]	; 0x44
 800ef22:	2c00      	cmp	r4, #0
 800ef24:	d15d      	bne.n	800efe2 <_dtoa_r+0x4fa>
 800ef26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	4b5c      	ldr	r3, [pc, #368]	; (800f0a0 <_dtoa_r+0x5b8>)
 800ef2e:	f7f1 f925 	bl	800017c <__aeabi_dsub>
 800ef32:	4602      	mov	r2, r0
 800ef34:	460b      	mov	r3, r1
 800ef36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef3a:	4633      	mov	r3, r6
 800ef3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef3e:	f7f1 fd65 	bl	8000a0c <__aeabi_dcmpgt>
 800ef42:	2800      	cmp	r0, #0
 800ef44:	f040 829e 	bne.w	800f484 <_dtoa_r+0x99c>
 800ef48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ef52:	f7f1 fd3d 	bl	80009d0 <__aeabi_dcmplt>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	f040 8292 	bne.w	800f480 <_dtoa_r+0x998>
 800ef5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ef60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ef64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	f2c0 8153 	blt.w	800f212 <_dtoa_r+0x72a>
 800ef6c:	f1b9 0f0e 	cmp.w	r9, #14
 800ef70:	f300 814f 	bgt.w	800f212 <_dtoa_r+0x72a>
 800ef74:	4b45      	ldr	r3, [pc, #276]	; (800f08c <_dtoa_r+0x5a4>)
 800ef76:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ef7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ef7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ef82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f280 80db 	bge.w	800f140 <_dtoa_r+0x658>
 800ef8a:	9b02      	ldr	r3, [sp, #8]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f300 80d7 	bgt.w	800f140 <_dtoa_r+0x658>
 800ef92:	f040 8274 	bne.w	800f47e <_dtoa_r+0x996>
 800ef96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	4b40      	ldr	r3, [pc, #256]	; (800f0a0 <_dtoa_r+0x5b8>)
 800ef9e:	f7f1 faa5 	bl	80004ec <__aeabi_dmul>
 800efa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efa6:	f7f1 fd27 	bl	80009f8 <__aeabi_dcmpge>
 800efaa:	9c02      	ldr	r4, [sp, #8]
 800efac:	4626      	mov	r6, r4
 800efae:	2800      	cmp	r0, #0
 800efb0:	f040 824a 	bne.w	800f448 <_dtoa_r+0x960>
 800efb4:	2331      	movs	r3, #49	; 0x31
 800efb6:	9f08      	ldr	r7, [sp, #32]
 800efb8:	f109 0901 	add.w	r9, r9, #1
 800efbc:	f807 3b01 	strb.w	r3, [r7], #1
 800efc0:	e246      	b.n	800f450 <_dtoa_r+0x968>
 800efc2:	07e2      	lsls	r2, r4, #31
 800efc4:	d505      	bpl.n	800efd2 <_dtoa_r+0x4ea>
 800efc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800efca:	f7f1 fa8f 	bl	80004ec <__aeabi_dmul>
 800efce:	2301      	movs	r3, #1
 800efd0:	3701      	adds	r7, #1
 800efd2:	1064      	asrs	r4, r4, #1
 800efd4:	3608      	adds	r6, #8
 800efd6:	e76d      	b.n	800eeb4 <_dtoa_r+0x3cc>
 800efd8:	2702      	movs	r7, #2
 800efda:	e770      	b.n	800eebe <_dtoa_r+0x3d6>
 800efdc:	46c8      	mov	r8, r9
 800efde:	9c02      	ldr	r4, [sp, #8]
 800efe0:	e78f      	b.n	800ef02 <_dtoa_r+0x41a>
 800efe2:	9908      	ldr	r1, [sp, #32]
 800efe4:	4b29      	ldr	r3, [pc, #164]	; (800f08c <_dtoa_r+0x5a4>)
 800efe6:	4421      	add	r1, r4
 800efe8:	9112      	str	r1, [sp, #72]	; 0x48
 800efea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eff0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800eff4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eff8:	2900      	cmp	r1, #0
 800effa:	d055      	beq.n	800f0a8 <_dtoa_r+0x5c0>
 800effc:	2000      	movs	r0, #0
 800effe:	4929      	ldr	r1, [pc, #164]	; (800f0a4 <_dtoa_r+0x5bc>)
 800f000:	f7f1 fb9e 	bl	8000740 <__aeabi_ddiv>
 800f004:	463b      	mov	r3, r7
 800f006:	4632      	mov	r2, r6
 800f008:	f7f1 f8b8 	bl	800017c <__aeabi_dsub>
 800f00c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f010:	9f08      	ldr	r7, [sp, #32]
 800f012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f016:	f7f1 fd19 	bl	8000a4c <__aeabi_d2iz>
 800f01a:	4604      	mov	r4, r0
 800f01c:	f7f1 f9fc 	bl	8000418 <__aeabi_i2d>
 800f020:	4602      	mov	r2, r0
 800f022:	460b      	mov	r3, r1
 800f024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f028:	f7f1 f8a8 	bl	800017c <__aeabi_dsub>
 800f02c:	4602      	mov	r2, r0
 800f02e:	460b      	mov	r3, r1
 800f030:	3430      	adds	r4, #48	; 0x30
 800f032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f03a:	f807 4b01 	strb.w	r4, [r7], #1
 800f03e:	f7f1 fcc7 	bl	80009d0 <__aeabi_dcmplt>
 800f042:	2800      	cmp	r0, #0
 800f044:	d174      	bne.n	800f130 <_dtoa_r+0x648>
 800f046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f04a:	2000      	movs	r0, #0
 800f04c:	4911      	ldr	r1, [pc, #68]	; (800f094 <_dtoa_r+0x5ac>)
 800f04e:	f7f1 f895 	bl	800017c <__aeabi_dsub>
 800f052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f056:	f7f1 fcbb 	bl	80009d0 <__aeabi_dcmplt>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	f040 80b6 	bne.w	800f1cc <_dtoa_r+0x6e4>
 800f060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f062:	429f      	cmp	r7, r3
 800f064:	f43f af7a 	beq.w	800ef5c <_dtoa_r+0x474>
 800f068:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f06c:	2200      	movs	r2, #0
 800f06e:	4b0a      	ldr	r3, [pc, #40]	; (800f098 <_dtoa_r+0x5b0>)
 800f070:	f7f1 fa3c 	bl	80004ec <__aeabi_dmul>
 800f074:	2200      	movs	r2, #0
 800f076:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f07a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f07e:	4b06      	ldr	r3, [pc, #24]	; (800f098 <_dtoa_r+0x5b0>)
 800f080:	f7f1 fa34 	bl	80004ec <__aeabi_dmul>
 800f084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f088:	e7c3      	b.n	800f012 <_dtoa_r+0x52a>
 800f08a:	bf00      	nop
 800f08c:	08012400 	.word	0x08012400
 800f090:	080123d8 	.word	0x080123d8
 800f094:	3ff00000 	.word	0x3ff00000
 800f098:	40240000 	.word	0x40240000
 800f09c:	401c0000 	.word	0x401c0000
 800f0a0:	40140000 	.word	0x40140000
 800f0a4:	3fe00000 	.word	0x3fe00000
 800f0a8:	4630      	mov	r0, r6
 800f0aa:	4639      	mov	r1, r7
 800f0ac:	f7f1 fa1e 	bl	80004ec <__aeabi_dmul>
 800f0b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f0b6:	9c08      	ldr	r4, [sp, #32]
 800f0b8:	9314      	str	r3, [sp, #80]	; 0x50
 800f0ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0be:	f7f1 fcc5 	bl	8000a4c <__aeabi_d2iz>
 800f0c2:	9015      	str	r0, [sp, #84]	; 0x54
 800f0c4:	f7f1 f9a8 	bl	8000418 <__aeabi_i2d>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0d0:	f7f1 f854 	bl	800017c <__aeabi_dsub>
 800f0d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0d6:	4606      	mov	r6, r0
 800f0d8:	3330      	adds	r3, #48	; 0x30
 800f0da:	f804 3b01 	strb.w	r3, [r4], #1
 800f0de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0e0:	460f      	mov	r7, r1
 800f0e2:	429c      	cmp	r4, r3
 800f0e4:	f04f 0200 	mov.w	r2, #0
 800f0e8:	d124      	bne.n	800f134 <_dtoa_r+0x64c>
 800f0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f0ee:	4bb3      	ldr	r3, [pc, #716]	; (800f3bc <_dtoa_r+0x8d4>)
 800f0f0:	f7f1 f846 	bl	8000180 <__adddf3>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	4639      	mov	r1, r7
 800f0fc:	f7f1 fc86 	bl	8000a0c <__aeabi_dcmpgt>
 800f100:	2800      	cmp	r0, #0
 800f102:	d162      	bne.n	800f1ca <_dtoa_r+0x6e2>
 800f104:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f108:	2000      	movs	r0, #0
 800f10a:	49ac      	ldr	r1, [pc, #688]	; (800f3bc <_dtoa_r+0x8d4>)
 800f10c:	f7f1 f836 	bl	800017c <__aeabi_dsub>
 800f110:	4602      	mov	r2, r0
 800f112:	460b      	mov	r3, r1
 800f114:	4630      	mov	r0, r6
 800f116:	4639      	mov	r1, r7
 800f118:	f7f1 fc5a 	bl	80009d0 <__aeabi_dcmplt>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	f43f af1d 	beq.w	800ef5c <_dtoa_r+0x474>
 800f122:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f124:	1e7b      	subs	r3, r7, #1
 800f126:	9314      	str	r3, [sp, #80]	; 0x50
 800f128:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f12c:	2b30      	cmp	r3, #48	; 0x30
 800f12e:	d0f8      	beq.n	800f122 <_dtoa_r+0x63a>
 800f130:	46c1      	mov	r9, r8
 800f132:	e03a      	b.n	800f1aa <_dtoa_r+0x6c2>
 800f134:	4ba2      	ldr	r3, [pc, #648]	; (800f3c0 <_dtoa_r+0x8d8>)
 800f136:	f7f1 f9d9 	bl	80004ec <__aeabi_dmul>
 800f13a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f13e:	e7bc      	b.n	800f0ba <_dtoa_r+0x5d2>
 800f140:	9f08      	ldr	r7, [sp, #32]
 800f142:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f146:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f14a:	f7f1 faf9 	bl	8000740 <__aeabi_ddiv>
 800f14e:	f7f1 fc7d 	bl	8000a4c <__aeabi_d2iz>
 800f152:	4604      	mov	r4, r0
 800f154:	f7f1 f960 	bl	8000418 <__aeabi_i2d>
 800f158:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f15c:	f7f1 f9c6 	bl	80004ec <__aeabi_dmul>
 800f160:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f164:	460b      	mov	r3, r1
 800f166:	4602      	mov	r2, r0
 800f168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f16c:	f7f1 f806 	bl	800017c <__aeabi_dsub>
 800f170:	f807 6b01 	strb.w	r6, [r7], #1
 800f174:	9e08      	ldr	r6, [sp, #32]
 800f176:	9b02      	ldr	r3, [sp, #8]
 800f178:	1bbe      	subs	r6, r7, r6
 800f17a:	42b3      	cmp	r3, r6
 800f17c:	d13a      	bne.n	800f1f4 <_dtoa_r+0x70c>
 800f17e:	4602      	mov	r2, r0
 800f180:	460b      	mov	r3, r1
 800f182:	f7f0 fffd 	bl	8000180 <__adddf3>
 800f186:	4602      	mov	r2, r0
 800f188:	460b      	mov	r3, r1
 800f18a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f18e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f192:	f7f1 fc3b 	bl	8000a0c <__aeabi_dcmpgt>
 800f196:	bb58      	cbnz	r0, 800f1f0 <_dtoa_r+0x708>
 800f198:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1a0:	f7f1 fc0c 	bl	80009bc <__aeabi_dcmpeq>
 800f1a4:	b108      	cbz	r0, 800f1aa <_dtoa_r+0x6c2>
 800f1a6:	07e1      	lsls	r1, r4, #31
 800f1a8:	d422      	bmi.n	800f1f0 <_dtoa_r+0x708>
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	4651      	mov	r1, sl
 800f1ae:	f001 f899 	bl	80102e4 <_Bfree>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	703b      	strb	r3, [r7, #0]
 800f1b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f1b8:	f109 0001 	add.w	r0, r9, #1
 800f1bc:	6018      	str	r0, [r3, #0]
 800f1be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f43f acdf 	beq.w	800eb84 <_dtoa_r+0x9c>
 800f1c6:	601f      	str	r7, [r3, #0]
 800f1c8:	e4dc      	b.n	800eb84 <_dtoa_r+0x9c>
 800f1ca:	4627      	mov	r7, r4
 800f1cc:	463b      	mov	r3, r7
 800f1ce:	461f      	mov	r7, r3
 800f1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1d4:	2a39      	cmp	r2, #57	; 0x39
 800f1d6:	d107      	bne.n	800f1e8 <_dtoa_r+0x700>
 800f1d8:	9a08      	ldr	r2, [sp, #32]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d1f7      	bne.n	800f1ce <_dtoa_r+0x6e6>
 800f1de:	2230      	movs	r2, #48	; 0x30
 800f1e0:	9908      	ldr	r1, [sp, #32]
 800f1e2:	f108 0801 	add.w	r8, r8, #1
 800f1e6:	700a      	strb	r2, [r1, #0]
 800f1e8:	781a      	ldrb	r2, [r3, #0]
 800f1ea:	3201      	adds	r2, #1
 800f1ec:	701a      	strb	r2, [r3, #0]
 800f1ee:	e79f      	b.n	800f130 <_dtoa_r+0x648>
 800f1f0:	46c8      	mov	r8, r9
 800f1f2:	e7eb      	b.n	800f1cc <_dtoa_r+0x6e4>
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	4b72      	ldr	r3, [pc, #456]	; (800f3c0 <_dtoa_r+0x8d8>)
 800f1f8:	f7f1 f978 	bl	80004ec <__aeabi_dmul>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f204:	2200      	movs	r2, #0
 800f206:	2300      	movs	r3, #0
 800f208:	f7f1 fbd8 	bl	80009bc <__aeabi_dcmpeq>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d098      	beq.n	800f142 <_dtoa_r+0x65a>
 800f210:	e7cb      	b.n	800f1aa <_dtoa_r+0x6c2>
 800f212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f214:	2a00      	cmp	r2, #0
 800f216:	f000 80cd 	beq.w	800f3b4 <_dtoa_r+0x8cc>
 800f21a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f21c:	2a01      	cmp	r2, #1
 800f21e:	f300 80af 	bgt.w	800f380 <_dtoa_r+0x898>
 800f222:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f224:	2a00      	cmp	r2, #0
 800f226:	f000 80a7 	beq.w	800f378 <_dtoa_r+0x890>
 800f22a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f22e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f230:	9f06      	ldr	r7, [sp, #24]
 800f232:	9a06      	ldr	r2, [sp, #24]
 800f234:	2101      	movs	r1, #1
 800f236:	441a      	add	r2, r3
 800f238:	9206      	str	r2, [sp, #24]
 800f23a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f23c:	4628      	mov	r0, r5
 800f23e:	441a      	add	r2, r3
 800f240:	9209      	str	r2, [sp, #36]	; 0x24
 800f242:	f001 f953 	bl	80104ec <__i2b>
 800f246:	4606      	mov	r6, r0
 800f248:	2f00      	cmp	r7, #0
 800f24a:	dd0c      	ble.n	800f266 <_dtoa_r+0x77e>
 800f24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f24e:	2b00      	cmp	r3, #0
 800f250:	dd09      	ble.n	800f266 <_dtoa_r+0x77e>
 800f252:	42bb      	cmp	r3, r7
 800f254:	bfa8      	it	ge
 800f256:	463b      	movge	r3, r7
 800f258:	9a06      	ldr	r2, [sp, #24]
 800f25a:	1aff      	subs	r7, r7, r3
 800f25c:	1ad2      	subs	r2, r2, r3
 800f25e:	9206      	str	r2, [sp, #24]
 800f260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f262:	1ad3      	subs	r3, r2, r3
 800f264:	9309      	str	r3, [sp, #36]	; 0x24
 800f266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f268:	b1f3      	cbz	r3, 800f2a8 <_dtoa_r+0x7c0>
 800f26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f000 80a9 	beq.w	800f3c4 <_dtoa_r+0x8dc>
 800f272:	2c00      	cmp	r4, #0
 800f274:	dd10      	ble.n	800f298 <_dtoa_r+0x7b0>
 800f276:	4631      	mov	r1, r6
 800f278:	4622      	mov	r2, r4
 800f27a:	4628      	mov	r0, r5
 800f27c:	f001 f9f0 	bl	8010660 <__pow5mult>
 800f280:	4652      	mov	r2, sl
 800f282:	4601      	mov	r1, r0
 800f284:	4606      	mov	r6, r0
 800f286:	4628      	mov	r0, r5
 800f288:	f001 f946 	bl	8010518 <__multiply>
 800f28c:	4680      	mov	r8, r0
 800f28e:	4651      	mov	r1, sl
 800f290:	4628      	mov	r0, r5
 800f292:	f001 f827 	bl	80102e4 <_Bfree>
 800f296:	46c2      	mov	sl, r8
 800f298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f29a:	1b1a      	subs	r2, r3, r4
 800f29c:	d004      	beq.n	800f2a8 <_dtoa_r+0x7c0>
 800f29e:	4651      	mov	r1, sl
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f001 f9dd 	bl	8010660 <__pow5mult>
 800f2a6:	4682      	mov	sl, r0
 800f2a8:	2101      	movs	r1, #1
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	f001 f91e 	bl	80104ec <__i2b>
 800f2b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f340 8087 	ble.w	800f3c8 <_dtoa_r+0x8e0>
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	4601      	mov	r1, r0
 800f2be:	4628      	mov	r0, r5
 800f2c0:	f001 f9ce 	bl	8010660 <__pow5mult>
 800f2c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	f340 8080 	ble.w	800f3ce <_dtoa_r+0x8e6>
 800f2ce:	f04f 0800 	mov.w	r8, #0
 800f2d2:	6923      	ldr	r3, [r4, #16]
 800f2d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f2d8:	6918      	ldr	r0, [r3, #16]
 800f2da:	f001 f8b9 	bl	8010450 <__hi0bits>
 800f2de:	f1c0 0020 	rsb	r0, r0, #32
 800f2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e4:	4418      	add	r0, r3
 800f2e6:	f010 001f 	ands.w	r0, r0, #31
 800f2ea:	f000 8092 	beq.w	800f412 <_dtoa_r+0x92a>
 800f2ee:	f1c0 0320 	rsb	r3, r0, #32
 800f2f2:	2b04      	cmp	r3, #4
 800f2f4:	f340 808a 	ble.w	800f40c <_dtoa_r+0x924>
 800f2f8:	f1c0 001c 	rsb	r0, r0, #28
 800f2fc:	9b06      	ldr	r3, [sp, #24]
 800f2fe:	4407      	add	r7, r0
 800f300:	4403      	add	r3, r0
 800f302:	9306      	str	r3, [sp, #24]
 800f304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f306:	4403      	add	r3, r0
 800f308:	9309      	str	r3, [sp, #36]	; 0x24
 800f30a:	9b06      	ldr	r3, [sp, #24]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	dd05      	ble.n	800f31c <_dtoa_r+0x834>
 800f310:	4651      	mov	r1, sl
 800f312:	461a      	mov	r2, r3
 800f314:	4628      	mov	r0, r5
 800f316:	f001 f9fd 	bl	8010714 <__lshift>
 800f31a:	4682      	mov	sl, r0
 800f31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f31e:	2b00      	cmp	r3, #0
 800f320:	dd05      	ble.n	800f32e <_dtoa_r+0x846>
 800f322:	4621      	mov	r1, r4
 800f324:	461a      	mov	r2, r3
 800f326:	4628      	mov	r0, r5
 800f328:	f001 f9f4 	bl	8010714 <__lshift>
 800f32c:	4604      	mov	r4, r0
 800f32e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f330:	2b00      	cmp	r3, #0
 800f332:	d070      	beq.n	800f416 <_dtoa_r+0x92e>
 800f334:	4621      	mov	r1, r4
 800f336:	4650      	mov	r0, sl
 800f338:	f001 fa58 	bl	80107ec <__mcmp>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	da6a      	bge.n	800f416 <_dtoa_r+0x92e>
 800f340:	2300      	movs	r3, #0
 800f342:	4651      	mov	r1, sl
 800f344:	220a      	movs	r2, #10
 800f346:	4628      	mov	r0, r5
 800f348:	f000 ffee 	bl	8010328 <__multadd>
 800f34c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f34e:	4682      	mov	sl, r0
 800f350:	f109 39ff 	add.w	r9, r9, #4294967295
 800f354:	2b00      	cmp	r3, #0
 800f356:	f000 8193 	beq.w	800f680 <_dtoa_r+0xb98>
 800f35a:	4631      	mov	r1, r6
 800f35c:	2300      	movs	r3, #0
 800f35e:	220a      	movs	r2, #10
 800f360:	4628      	mov	r0, r5
 800f362:	f000 ffe1 	bl	8010328 <__multadd>
 800f366:	f1bb 0f00 	cmp.w	fp, #0
 800f36a:	4606      	mov	r6, r0
 800f36c:	f300 8093 	bgt.w	800f496 <_dtoa_r+0x9ae>
 800f370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f372:	2b02      	cmp	r3, #2
 800f374:	dc57      	bgt.n	800f426 <_dtoa_r+0x93e>
 800f376:	e08e      	b.n	800f496 <_dtoa_r+0x9ae>
 800f378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f37a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f37e:	e756      	b.n	800f22e <_dtoa_r+0x746>
 800f380:	9b02      	ldr	r3, [sp, #8]
 800f382:	1e5c      	subs	r4, r3, #1
 800f384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f386:	42a3      	cmp	r3, r4
 800f388:	bfb7      	itett	lt
 800f38a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f38c:	1b1c      	subge	r4, r3, r4
 800f38e:	1ae2      	sublt	r2, r4, r3
 800f390:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f392:	bfbe      	ittt	lt
 800f394:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f396:	189b      	addlt	r3, r3, r2
 800f398:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f39a:	9b02      	ldr	r3, [sp, #8]
 800f39c:	bfb8      	it	lt
 800f39e:	2400      	movlt	r4, #0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	bfbb      	ittet	lt
 800f3a4:	9b06      	ldrlt	r3, [sp, #24]
 800f3a6:	9a02      	ldrlt	r2, [sp, #8]
 800f3a8:	9f06      	ldrge	r7, [sp, #24]
 800f3aa:	1a9f      	sublt	r7, r3, r2
 800f3ac:	bfac      	ite	ge
 800f3ae:	9b02      	ldrge	r3, [sp, #8]
 800f3b0:	2300      	movlt	r3, #0
 800f3b2:	e73e      	b.n	800f232 <_dtoa_r+0x74a>
 800f3b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f3b6:	9f06      	ldr	r7, [sp, #24]
 800f3b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f3ba:	e745      	b.n	800f248 <_dtoa_r+0x760>
 800f3bc:	3fe00000 	.word	0x3fe00000
 800f3c0:	40240000 	.word	0x40240000
 800f3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3c6:	e76a      	b.n	800f29e <_dtoa_r+0x7b6>
 800f3c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	dc19      	bgt.n	800f402 <_dtoa_r+0x91a>
 800f3ce:	9b04      	ldr	r3, [sp, #16]
 800f3d0:	b9bb      	cbnz	r3, 800f402 <_dtoa_r+0x91a>
 800f3d2:	9b05      	ldr	r3, [sp, #20]
 800f3d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3d8:	b99b      	cbnz	r3, 800f402 <_dtoa_r+0x91a>
 800f3da:	9b05      	ldr	r3, [sp, #20]
 800f3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3e0:	0d1b      	lsrs	r3, r3, #20
 800f3e2:	051b      	lsls	r3, r3, #20
 800f3e4:	b183      	cbz	r3, 800f408 <_dtoa_r+0x920>
 800f3e6:	f04f 0801 	mov.w	r8, #1
 800f3ea:	9b06      	ldr	r3, [sp, #24]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	9306      	str	r3, [sp, #24]
 800f3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f3f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f47f af6a 	bne.w	800f2d2 <_dtoa_r+0x7ea>
 800f3fe:	2001      	movs	r0, #1
 800f400:	e76f      	b.n	800f2e2 <_dtoa_r+0x7fa>
 800f402:	f04f 0800 	mov.w	r8, #0
 800f406:	e7f6      	b.n	800f3f6 <_dtoa_r+0x90e>
 800f408:	4698      	mov	r8, r3
 800f40a:	e7f4      	b.n	800f3f6 <_dtoa_r+0x90e>
 800f40c:	f43f af7d 	beq.w	800f30a <_dtoa_r+0x822>
 800f410:	4618      	mov	r0, r3
 800f412:	301c      	adds	r0, #28
 800f414:	e772      	b.n	800f2fc <_dtoa_r+0x814>
 800f416:	9b02      	ldr	r3, [sp, #8]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dc36      	bgt.n	800f48a <_dtoa_r+0x9a2>
 800f41c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f41e:	2b02      	cmp	r3, #2
 800f420:	dd33      	ble.n	800f48a <_dtoa_r+0x9a2>
 800f422:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f426:	f1bb 0f00 	cmp.w	fp, #0
 800f42a:	d10d      	bne.n	800f448 <_dtoa_r+0x960>
 800f42c:	4621      	mov	r1, r4
 800f42e:	465b      	mov	r3, fp
 800f430:	2205      	movs	r2, #5
 800f432:	4628      	mov	r0, r5
 800f434:	f000 ff78 	bl	8010328 <__multadd>
 800f438:	4601      	mov	r1, r0
 800f43a:	4604      	mov	r4, r0
 800f43c:	4650      	mov	r0, sl
 800f43e:	f001 f9d5 	bl	80107ec <__mcmp>
 800f442:	2800      	cmp	r0, #0
 800f444:	f73f adb6 	bgt.w	800efb4 <_dtoa_r+0x4cc>
 800f448:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f44a:	9f08      	ldr	r7, [sp, #32]
 800f44c:	ea6f 0903 	mvn.w	r9, r3
 800f450:	f04f 0800 	mov.w	r8, #0
 800f454:	4621      	mov	r1, r4
 800f456:	4628      	mov	r0, r5
 800f458:	f000 ff44 	bl	80102e4 <_Bfree>
 800f45c:	2e00      	cmp	r6, #0
 800f45e:	f43f aea4 	beq.w	800f1aa <_dtoa_r+0x6c2>
 800f462:	f1b8 0f00 	cmp.w	r8, #0
 800f466:	d005      	beq.n	800f474 <_dtoa_r+0x98c>
 800f468:	45b0      	cmp	r8, r6
 800f46a:	d003      	beq.n	800f474 <_dtoa_r+0x98c>
 800f46c:	4641      	mov	r1, r8
 800f46e:	4628      	mov	r0, r5
 800f470:	f000 ff38 	bl	80102e4 <_Bfree>
 800f474:	4631      	mov	r1, r6
 800f476:	4628      	mov	r0, r5
 800f478:	f000 ff34 	bl	80102e4 <_Bfree>
 800f47c:	e695      	b.n	800f1aa <_dtoa_r+0x6c2>
 800f47e:	2400      	movs	r4, #0
 800f480:	4626      	mov	r6, r4
 800f482:	e7e1      	b.n	800f448 <_dtoa_r+0x960>
 800f484:	46c1      	mov	r9, r8
 800f486:	4626      	mov	r6, r4
 800f488:	e594      	b.n	800efb4 <_dtoa_r+0x4cc>
 800f48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f48c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f490:	2b00      	cmp	r3, #0
 800f492:	f000 80fc 	beq.w	800f68e <_dtoa_r+0xba6>
 800f496:	2f00      	cmp	r7, #0
 800f498:	dd05      	ble.n	800f4a6 <_dtoa_r+0x9be>
 800f49a:	4631      	mov	r1, r6
 800f49c:	463a      	mov	r2, r7
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f001 f938 	bl	8010714 <__lshift>
 800f4a4:	4606      	mov	r6, r0
 800f4a6:	f1b8 0f00 	cmp.w	r8, #0
 800f4aa:	d05c      	beq.n	800f566 <_dtoa_r+0xa7e>
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	6871      	ldr	r1, [r6, #4]
 800f4b0:	f000 fed8 	bl	8010264 <_Balloc>
 800f4b4:	4607      	mov	r7, r0
 800f4b6:	b928      	cbnz	r0, 800f4c4 <_dtoa_r+0x9dc>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f4be:	4b7e      	ldr	r3, [pc, #504]	; (800f6b8 <_dtoa_r+0xbd0>)
 800f4c0:	f7ff bb26 	b.w	800eb10 <_dtoa_r+0x28>
 800f4c4:	6932      	ldr	r2, [r6, #16]
 800f4c6:	f106 010c 	add.w	r1, r6, #12
 800f4ca:	3202      	adds	r2, #2
 800f4cc:	0092      	lsls	r2, r2, #2
 800f4ce:	300c      	adds	r0, #12
 800f4d0:	f7fd f964 	bl	800c79c <memcpy>
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	4639      	mov	r1, r7
 800f4d8:	4628      	mov	r0, r5
 800f4da:	f001 f91b 	bl	8010714 <__lshift>
 800f4de:	46b0      	mov	r8, r6
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	9b08      	ldr	r3, [sp, #32]
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	9302      	str	r3, [sp, #8]
 800f4e8:	9b08      	ldr	r3, [sp, #32]
 800f4ea:	445b      	add	r3, fp
 800f4ec:	930a      	str	r3, [sp, #40]	; 0x28
 800f4ee:	9b04      	ldr	r3, [sp, #16]
 800f4f0:	f003 0301 	and.w	r3, r3, #1
 800f4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4f6:	9b02      	ldr	r3, [sp, #8]
 800f4f8:	4621      	mov	r1, r4
 800f4fa:	4650      	mov	r0, sl
 800f4fc:	f103 3bff 	add.w	fp, r3, #4294967295
 800f500:	f7ff fa63 	bl	800e9ca <quorem>
 800f504:	4603      	mov	r3, r0
 800f506:	4641      	mov	r1, r8
 800f508:	3330      	adds	r3, #48	; 0x30
 800f50a:	9004      	str	r0, [sp, #16]
 800f50c:	4650      	mov	r0, sl
 800f50e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f510:	f001 f96c 	bl	80107ec <__mcmp>
 800f514:	4632      	mov	r2, r6
 800f516:	9006      	str	r0, [sp, #24]
 800f518:	4621      	mov	r1, r4
 800f51a:	4628      	mov	r0, r5
 800f51c:	f001 f982 	bl	8010824 <__mdiff>
 800f520:	68c2      	ldr	r2, [r0, #12]
 800f522:	4607      	mov	r7, r0
 800f524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f526:	bb02      	cbnz	r2, 800f56a <_dtoa_r+0xa82>
 800f528:	4601      	mov	r1, r0
 800f52a:	4650      	mov	r0, sl
 800f52c:	f001 f95e 	bl	80107ec <__mcmp>
 800f530:	4602      	mov	r2, r0
 800f532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f534:	4639      	mov	r1, r7
 800f536:	4628      	mov	r0, r5
 800f538:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f53c:	f000 fed2 	bl	80102e4 <_Bfree>
 800f540:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f544:	9f02      	ldr	r7, [sp, #8]
 800f546:	ea43 0102 	orr.w	r1, r3, r2
 800f54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f54c:	430b      	orrs	r3, r1
 800f54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f550:	d10d      	bne.n	800f56e <_dtoa_r+0xa86>
 800f552:	2b39      	cmp	r3, #57	; 0x39
 800f554:	d027      	beq.n	800f5a6 <_dtoa_r+0xabe>
 800f556:	9a06      	ldr	r2, [sp, #24]
 800f558:	2a00      	cmp	r2, #0
 800f55a:	dd01      	ble.n	800f560 <_dtoa_r+0xa78>
 800f55c:	9b04      	ldr	r3, [sp, #16]
 800f55e:	3331      	adds	r3, #49	; 0x31
 800f560:	f88b 3000 	strb.w	r3, [fp]
 800f564:	e776      	b.n	800f454 <_dtoa_r+0x96c>
 800f566:	4630      	mov	r0, r6
 800f568:	e7b9      	b.n	800f4de <_dtoa_r+0x9f6>
 800f56a:	2201      	movs	r2, #1
 800f56c:	e7e2      	b.n	800f534 <_dtoa_r+0xa4c>
 800f56e:	9906      	ldr	r1, [sp, #24]
 800f570:	2900      	cmp	r1, #0
 800f572:	db04      	blt.n	800f57e <_dtoa_r+0xa96>
 800f574:	9822      	ldr	r0, [sp, #136]	; 0x88
 800f576:	4301      	orrs	r1, r0
 800f578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f57a:	4301      	orrs	r1, r0
 800f57c:	d120      	bne.n	800f5c0 <_dtoa_r+0xad8>
 800f57e:	2a00      	cmp	r2, #0
 800f580:	ddee      	ble.n	800f560 <_dtoa_r+0xa78>
 800f582:	4651      	mov	r1, sl
 800f584:	2201      	movs	r2, #1
 800f586:	4628      	mov	r0, r5
 800f588:	9302      	str	r3, [sp, #8]
 800f58a:	f001 f8c3 	bl	8010714 <__lshift>
 800f58e:	4621      	mov	r1, r4
 800f590:	4682      	mov	sl, r0
 800f592:	f001 f92b 	bl	80107ec <__mcmp>
 800f596:	2800      	cmp	r0, #0
 800f598:	9b02      	ldr	r3, [sp, #8]
 800f59a:	dc02      	bgt.n	800f5a2 <_dtoa_r+0xaba>
 800f59c:	d1e0      	bne.n	800f560 <_dtoa_r+0xa78>
 800f59e:	07da      	lsls	r2, r3, #31
 800f5a0:	d5de      	bpl.n	800f560 <_dtoa_r+0xa78>
 800f5a2:	2b39      	cmp	r3, #57	; 0x39
 800f5a4:	d1da      	bne.n	800f55c <_dtoa_r+0xa74>
 800f5a6:	2339      	movs	r3, #57	; 0x39
 800f5a8:	f88b 3000 	strb.w	r3, [fp]
 800f5ac:	463b      	mov	r3, r7
 800f5ae:	461f      	mov	r7, r3
 800f5b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f5b4:	3b01      	subs	r3, #1
 800f5b6:	2a39      	cmp	r2, #57	; 0x39
 800f5b8:	d050      	beq.n	800f65c <_dtoa_r+0xb74>
 800f5ba:	3201      	adds	r2, #1
 800f5bc:	701a      	strb	r2, [r3, #0]
 800f5be:	e749      	b.n	800f454 <_dtoa_r+0x96c>
 800f5c0:	2a00      	cmp	r2, #0
 800f5c2:	dd03      	ble.n	800f5cc <_dtoa_r+0xae4>
 800f5c4:	2b39      	cmp	r3, #57	; 0x39
 800f5c6:	d0ee      	beq.n	800f5a6 <_dtoa_r+0xabe>
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	e7c9      	b.n	800f560 <_dtoa_r+0xa78>
 800f5cc:	9a02      	ldr	r2, [sp, #8]
 800f5ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f5d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f5d4:	428a      	cmp	r2, r1
 800f5d6:	d02a      	beq.n	800f62e <_dtoa_r+0xb46>
 800f5d8:	4651      	mov	r1, sl
 800f5da:	2300      	movs	r3, #0
 800f5dc:	220a      	movs	r2, #10
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f000 fea2 	bl	8010328 <__multadd>
 800f5e4:	45b0      	cmp	r8, r6
 800f5e6:	4682      	mov	sl, r0
 800f5e8:	f04f 0300 	mov.w	r3, #0
 800f5ec:	f04f 020a 	mov.w	r2, #10
 800f5f0:	4641      	mov	r1, r8
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	d107      	bne.n	800f606 <_dtoa_r+0xb1e>
 800f5f6:	f000 fe97 	bl	8010328 <__multadd>
 800f5fa:	4680      	mov	r8, r0
 800f5fc:	4606      	mov	r6, r0
 800f5fe:	9b02      	ldr	r3, [sp, #8]
 800f600:	3301      	adds	r3, #1
 800f602:	9302      	str	r3, [sp, #8]
 800f604:	e777      	b.n	800f4f6 <_dtoa_r+0xa0e>
 800f606:	f000 fe8f 	bl	8010328 <__multadd>
 800f60a:	4631      	mov	r1, r6
 800f60c:	4680      	mov	r8, r0
 800f60e:	2300      	movs	r3, #0
 800f610:	220a      	movs	r2, #10
 800f612:	4628      	mov	r0, r5
 800f614:	f000 fe88 	bl	8010328 <__multadd>
 800f618:	4606      	mov	r6, r0
 800f61a:	e7f0      	b.n	800f5fe <_dtoa_r+0xb16>
 800f61c:	f1bb 0f00 	cmp.w	fp, #0
 800f620:	bfcc      	ite	gt
 800f622:	465f      	movgt	r7, fp
 800f624:	2701      	movle	r7, #1
 800f626:	f04f 0800 	mov.w	r8, #0
 800f62a:	9a08      	ldr	r2, [sp, #32]
 800f62c:	4417      	add	r7, r2
 800f62e:	4651      	mov	r1, sl
 800f630:	2201      	movs	r2, #1
 800f632:	4628      	mov	r0, r5
 800f634:	9302      	str	r3, [sp, #8]
 800f636:	f001 f86d 	bl	8010714 <__lshift>
 800f63a:	4621      	mov	r1, r4
 800f63c:	4682      	mov	sl, r0
 800f63e:	f001 f8d5 	bl	80107ec <__mcmp>
 800f642:	2800      	cmp	r0, #0
 800f644:	dcb2      	bgt.n	800f5ac <_dtoa_r+0xac4>
 800f646:	d102      	bne.n	800f64e <_dtoa_r+0xb66>
 800f648:	9b02      	ldr	r3, [sp, #8]
 800f64a:	07db      	lsls	r3, r3, #31
 800f64c:	d4ae      	bmi.n	800f5ac <_dtoa_r+0xac4>
 800f64e:	463b      	mov	r3, r7
 800f650:	461f      	mov	r7, r3
 800f652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f656:	2a30      	cmp	r2, #48	; 0x30
 800f658:	d0fa      	beq.n	800f650 <_dtoa_r+0xb68>
 800f65a:	e6fb      	b.n	800f454 <_dtoa_r+0x96c>
 800f65c:	9a08      	ldr	r2, [sp, #32]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d1a5      	bne.n	800f5ae <_dtoa_r+0xac6>
 800f662:	2331      	movs	r3, #49	; 0x31
 800f664:	f109 0901 	add.w	r9, r9, #1
 800f668:	7013      	strb	r3, [r2, #0]
 800f66a:	e6f3      	b.n	800f454 <_dtoa_r+0x96c>
 800f66c:	4b13      	ldr	r3, [pc, #76]	; (800f6bc <_dtoa_r+0xbd4>)
 800f66e:	f7ff baa7 	b.w	800ebc0 <_dtoa_r+0xd8>
 800f672:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f674:	2b00      	cmp	r3, #0
 800f676:	f47f aa80 	bne.w	800eb7a <_dtoa_r+0x92>
 800f67a:	4b11      	ldr	r3, [pc, #68]	; (800f6c0 <_dtoa_r+0xbd8>)
 800f67c:	f7ff baa0 	b.w	800ebc0 <_dtoa_r+0xd8>
 800f680:	f1bb 0f00 	cmp.w	fp, #0
 800f684:	dc03      	bgt.n	800f68e <_dtoa_r+0xba6>
 800f686:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f688:	2b02      	cmp	r3, #2
 800f68a:	f73f aecc 	bgt.w	800f426 <_dtoa_r+0x93e>
 800f68e:	9f08      	ldr	r7, [sp, #32]
 800f690:	4621      	mov	r1, r4
 800f692:	4650      	mov	r0, sl
 800f694:	f7ff f999 	bl	800e9ca <quorem>
 800f698:	9a08      	ldr	r2, [sp, #32]
 800f69a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f69e:	f807 3b01 	strb.w	r3, [r7], #1
 800f6a2:	1aba      	subs	r2, r7, r2
 800f6a4:	4593      	cmp	fp, r2
 800f6a6:	ddb9      	ble.n	800f61c <_dtoa_r+0xb34>
 800f6a8:	4651      	mov	r1, sl
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	220a      	movs	r2, #10
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f000 fe3a 	bl	8010328 <__multadd>
 800f6b4:	4682      	mov	sl, r0
 800f6b6:	e7eb      	b.n	800f690 <_dtoa_r+0xba8>
 800f6b8:	08012284 	.word	0x08012284
 800f6bc:	08012081 	.word	0x08012081
 800f6c0:	08012201 	.word	0x08012201

0800f6c4 <__sflush_r>:
 800f6c4:	898a      	ldrh	r2, [r1, #12]
 800f6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ca:	4605      	mov	r5, r0
 800f6cc:	0710      	lsls	r0, r2, #28
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	d458      	bmi.n	800f784 <__sflush_r+0xc0>
 800f6d2:	684b      	ldr	r3, [r1, #4]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	dc05      	bgt.n	800f6e4 <__sflush_r+0x20>
 800f6d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	dc02      	bgt.n	800f6e4 <__sflush_r+0x20>
 800f6de:	2000      	movs	r0, #0
 800f6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6e6:	2e00      	cmp	r6, #0
 800f6e8:	d0f9      	beq.n	800f6de <__sflush_r+0x1a>
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f6f0:	682f      	ldr	r7, [r5, #0]
 800f6f2:	602b      	str	r3, [r5, #0]
 800f6f4:	d032      	beq.n	800f75c <__sflush_r+0x98>
 800f6f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f6f8:	89a3      	ldrh	r3, [r4, #12]
 800f6fa:	075a      	lsls	r2, r3, #29
 800f6fc:	d505      	bpl.n	800f70a <__sflush_r+0x46>
 800f6fe:	6863      	ldr	r3, [r4, #4]
 800f700:	1ac0      	subs	r0, r0, r3
 800f702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f704:	b10b      	cbz	r3, 800f70a <__sflush_r+0x46>
 800f706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f708:	1ac0      	subs	r0, r0, r3
 800f70a:	2300      	movs	r3, #0
 800f70c:	4602      	mov	r2, r0
 800f70e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f710:	4628      	mov	r0, r5
 800f712:	6a21      	ldr	r1, [r4, #32]
 800f714:	47b0      	blx	r6
 800f716:	1c43      	adds	r3, r0, #1
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	d106      	bne.n	800f72a <__sflush_r+0x66>
 800f71c:	6829      	ldr	r1, [r5, #0]
 800f71e:	291d      	cmp	r1, #29
 800f720:	d82c      	bhi.n	800f77c <__sflush_r+0xb8>
 800f722:	4a2a      	ldr	r2, [pc, #168]	; (800f7cc <__sflush_r+0x108>)
 800f724:	40ca      	lsrs	r2, r1
 800f726:	07d6      	lsls	r6, r2, #31
 800f728:	d528      	bpl.n	800f77c <__sflush_r+0xb8>
 800f72a:	2200      	movs	r2, #0
 800f72c:	6062      	str	r2, [r4, #4]
 800f72e:	6922      	ldr	r2, [r4, #16]
 800f730:	04d9      	lsls	r1, r3, #19
 800f732:	6022      	str	r2, [r4, #0]
 800f734:	d504      	bpl.n	800f740 <__sflush_r+0x7c>
 800f736:	1c42      	adds	r2, r0, #1
 800f738:	d101      	bne.n	800f73e <__sflush_r+0x7a>
 800f73a:	682b      	ldr	r3, [r5, #0]
 800f73c:	b903      	cbnz	r3, 800f740 <__sflush_r+0x7c>
 800f73e:	6560      	str	r0, [r4, #84]	; 0x54
 800f740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f742:	602f      	str	r7, [r5, #0]
 800f744:	2900      	cmp	r1, #0
 800f746:	d0ca      	beq.n	800f6de <__sflush_r+0x1a>
 800f748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f74c:	4299      	cmp	r1, r3
 800f74e:	d002      	beq.n	800f756 <__sflush_r+0x92>
 800f750:	4628      	mov	r0, r5
 800f752:	f7fd f839 	bl	800c7c8 <_free_r>
 800f756:	2000      	movs	r0, #0
 800f758:	6360      	str	r0, [r4, #52]	; 0x34
 800f75a:	e7c1      	b.n	800f6e0 <__sflush_r+0x1c>
 800f75c:	6a21      	ldr	r1, [r4, #32]
 800f75e:	2301      	movs	r3, #1
 800f760:	4628      	mov	r0, r5
 800f762:	47b0      	blx	r6
 800f764:	1c41      	adds	r1, r0, #1
 800f766:	d1c7      	bne.n	800f6f8 <__sflush_r+0x34>
 800f768:	682b      	ldr	r3, [r5, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d0c4      	beq.n	800f6f8 <__sflush_r+0x34>
 800f76e:	2b1d      	cmp	r3, #29
 800f770:	d001      	beq.n	800f776 <__sflush_r+0xb2>
 800f772:	2b16      	cmp	r3, #22
 800f774:	d101      	bne.n	800f77a <__sflush_r+0xb6>
 800f776:	602f      	str	r7, [r5, #0]
 800f778:	e7b1      	b.n	800f6de <__sflush_r+0x1a>
 800f77a:	89a3      	ldrh	r3, [r4, #12]
 800f77c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f780:	81a3      	strh	r3, [r4, #12]
 800f782:	e7ad      	b.n	800f6e0 <__sflush_r+0x1c>
 800f784:	690f      	ldr	r7, [r1, #16]
 800f786:	2f00      	cmp	r7, #0
 800f788:	d0a9      	beq.n	800f6de <__sflush_r+0x1a>
 800f78a:	0793      	lsls	r3, r2, #30
 800f78c:	bf18      	it	ne
 800f78e:	2300      	movne	r3, #0
 800f790:	680e      	ldr	r6, [r1, #0]
 800f792:	bf08      	it	eq
 800f794:	694b      	ldreq	r3, [r1, #20]
 800f796:	eba6 0807 	sub.w	r8, r6, r7
 800f79a:	600f      	str	r7, [r1, #0]
 800f79c:	608b      	str	r3, [r1, #8]
 800f79e:	f1b8 0f00 	cmp.w	r8, #0
 800f7a2:	dd9c      	ble.n	800f6de <__sflush_r+0x1a>
 800f7a4:	4643      	mov	r3, r8
 800f7a6:	463a      	mov	r2, r7
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	6a21      	ldr	r1, [r4, #32]
 800f7ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f7ae:	47b0      	blx	r6
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	dc06      	bgt.n	800f7c2 <__sflush_r+0xfe>
 800f7b4:	89a3      	ldrh	r3, [r4, #12]
 800f7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7be:	81a3      	strh	r3, [r4, #12]
 800f7c0:	e78e      	b.n	800f6e0 <__sflush_r+0x1c>
 800f7c2:	4407      	add	r7, r0
 800f7c4:	eba8 0800 	sub.w	r8, r8, r0
 800f7c8:	e7e9      	b.n	800f79e <__sflush_r+0xda>
 800f7ca:	bf00      	nop
 800f7cc:	20400001 	.word	0x20400001

0800f7d0 <_fflush_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	690b      	ldr	r3, [r1, #16]
 800f7d4:	4605      	mov	r5, r0
 800f7d6:	460c      	mov	r4, r1
 800f7d8:	b913      	cbnz	r3, 800f7e0 <_fflush_r+0x10>
 800f7da:	2500      	movs	r5, #0
 800f7dc:	4628      	mov	r0, r5
 800f7de:	bd38      	pop	{r3, r4, r5, pc}
 800f7e0:	b118      	cbz	r0, 800f7ea <_fflush_r+0x1a>
 800f7e2:	6983      	ldr	r3, [r0, #24]
 800f7e4:	b90b      	cbnz	r3, 800f7ea <_fflush_r+0x1a>
 800f7e6:	f000 f887 	bl	800f8f8 <__sinit>
 800f7ea:	4b14      	ldr	r3, [pc, #80]	; (800f83c <_fflush_r+0x6c>)
 800f7ec:	429c      	cmp	r4, r3
 800f7ee:	d11b      	bne.n	800f828 <_fflush_r+0x58>
 800f7f0:	686c      	ldr	r4, [r5, #4]
 800f7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d0ef      	beq.n	800f7da <_fflush_r+0xa>
 800f7fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f7fc:	07d0      	lsls	r0, r2, #31
 800f7fe:	d404      	bmi.n	800f80a <_fflush_r+0x3a>
 800f800:	0599      	lsls	r1, r3, #22
 800f802:	d402      	bmi.n	800f80a <_fflush_r+0x3a>
 800f804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f806:	f000 fc80 	bl	801010a <__retarget_lock_acquire_recursive>
 800f80a:	4628      	mov	r0, r5
 800f80c:	4621      	mov	r1, r4
 800f80e:	f7ff ff59 	bl	800f6c4 <__sflush_r>
 800f812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f814:	4605      	mov	r5, r0
 800f816:	07da      	lsls	r2, r3, #31
 800f818:	d4e0      	bmi.n	800f7dc <_fflush_r+0xc>
 800f81a:	89a3      	ldrh	r3, [r4, #12]
 800f81c:	059b      	lsls	r3, r3, #22
 800f81e:	d4dd      	bmi.n	800f7dc <_fflush_r+0xc>
 800f820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f822:	f000 fc73 	bl	801010c <__retarget_lock_release_recursive>
 800f826:	e7d9      	b.n	800f7dc <_fflush_r+0xc>
 800f828:	4b05      	ldr	r3, [pc, #20]	; (800f840 <_fflush_r+0x70>)
 800f82a:	429c      	cmp	r4, r3
 800f82c:	d101      	bne.n	800f832 <_fflush_r+0x62>
 800f82e:	68ac      	ldr	r4, [r5, #8]
 800f830:	e7df      	b.n	800f7f2 <_fflush_r+0x22>
 800f832:	4b04      	ldr	r3, [pc, #16]	; (800f844 <_fflush_r+0x74>)
 800f834:	429c      	cmp	r4, r3
 800f836:	bf08      	it	eq
 800f838:	68ec      	ldreq	r4, [r5, #12]
 800f83a:	e7da      	b.n	800f7f2 <_fflush_r+0x22>
 800f83c:	080122b8 	.word	0x080122b8
 800f840:	080122d8 	.word	0x080122d8
 800f844:	08012298 	.word	0x08012298

0800f848 <std>:
 800f848:	2300      	movs	r3, #0
 800f84a:	b510      	push	{r4, lr}
 800f84c:	4604      	mov	r4, r0
 800f84e:	e9c0 3300 	strd	r3, r3, [r0]
 800f852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f856:	6083      	str	r3, [r0, #8]
 800f858:	8181      	strh	r1, [r0, #12]
 800f85a:	6643      	str	r3, [r0, #100]	; 0x64
 800f85c:	81c2      	strh	r2, [r0, #14]
 800f85e:	6183      	str	r3, [r0, #24]
 800f860:	4619      	mov	r1, r3
 800f862:	2208      	movs	r2, #8
 800f864:	305c      	adds	r0, #92	; 0x5c
 800f866:	f7fc ffa7 	bl	800c7b8 <memset>
 800f86a:	4b05      	ldr	r3, [pc, #20]	; (800f880 <std+0x38>)
 800f86c:	6224      	str	r4, [r4, #32]
 800f86e:	6263      	str	r3, [r4, #36]	; 0x24
 800f870:	4b04      	ldr	r3, [pc, #16]	; (800f884 <std+0x3c>)
 800f872:	62a3      	str	r3, [r4, #40]	; 0x28
 800f874:	4b04      	ldr	r3, [pc, #16]	; (800f888 <std+0x40>)
 800f876:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f878:	4b04      	ldr	r3, [pc, #16]	; (800f88c <std+0x44>)
 800f87a:	6323      	str	r3, [r4, #48]	; 0x30
 800f87c:	bd10      	pop	{r4, pc}
 800f87e:	bf00      	nop
 800f880:	08010f89 	.word	0x08010f89
 800f884:	08010fab 	.word	0x08010fab
 800f888:	08010fe3 	.word	0x08010fe3
 800f88c:	08011007 	.word	0x08011007

0800f890 <_cleanup_r>:
 800f890:	4901      	ldr	r1, [pc, #4]	; (800f898 <_cleanup_r+0x8>)
 800f892:	f000 b8af 	b.w	800f9f4 <_fwalk_reent>
 800f896:	bf00      	nop
 800f898:	0800f7d1 	.word	0x0800f7d1

0800f89c <__sfmoreglue>:
 800f89c:	b570      	push	{r4, r5, r6, lr}
 800f89e:	2568      	movs	r5, #104	; 0x68
 800f8a0:	1e4a      	subs	r2, r1, #1
 800f8a2:	4355      	muls	r5, r2
 800f8a4:	460e      	mov	r6, r1
 800f8a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f8aa:	f7fc ffd9 	bl	800c860 <_malloc_r>
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	b140      	cbz	r0, 800f8c4 <__sfmoreglue+0x28>
 800f8b2:	2100      	movs	r1, #0
 800f8b4:	e9c0 1600 	strd	r1, r6, [r0]
 800f8b8:	300c      	adds	r0, #12
 800f8ba:	60a0      	str	r0, [r4, #8]
 800f8bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f8c0:	f7fc ff7a 	bl	800c7b8 <memset>
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	bd70      	pop	{r4, r5, r6, pc}

0800f8c8 <__sfp_lock_acquire>:
 800f8c8:	4801      	ldr	r0, [pc, #4]	; (800f8d0 <__sfp_lock_acquire+0x8>)
 800f8ca:	f000 bc1e 	b.w	801010a <__retarget_lock_acquire_recursive>
 800f8ce:	bf00      	nop
 800f8d0:	20000778 	.word	0x20000778

0800f8d4 <__sfp_lock_release>:
 800f8d4:	4801      	ldr	r0, [pc, #4]	; (800f8dc <__sfp_lock_release+0x8>)
 800f8d6:	f000 bc19 	b.w	801010c <__retarget_lock_release_recursive>
 800f8da:	bf00      	nop
 800f8dc:	20000778 	.word	0x20000778

0800f8e0 <__sinit_lock_acquire>:
 800f8e0:	4801      	ldr	r0, [pc, #4]	; (800f8e8 <__sinit_lock_acquire+0x8>)
 800f8e2:	f000 bc12 	b.w	801010a <__retarget_lock_acquire_recursive>
 800f8e6:	bf00      	nop
 800f8e8:	20000773 	.word	0x20000773

0800f8ec <__sinit_lock_release>:
 800f8ec:	4801      	ldr	r0, [pc, #4]	; (800f8f4 <__sinit_lock_release+0x8>)
 800f8ee:	f000 bc0d 	b.w	801010c <__retarget_lock_release_recursive>
 800f8f2:	bf00      	nop
 800f8f4:	20000773 	.word	0x20000773

0800f8f8 <__sinit>:
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	f7ff fff0 	bl	800f8e0 <__sinit_lock_acquire>
 800f900:	69a3      	ldr	r3, [r4, #24]
 800f902:	b11b      	cbz	r3, 800f90c <__sinit+0x14>
 800f904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f908:	f7ff bff0 	b.w	800f8ec <__sinit_lock_release>
 800f90c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f910:	6523      	str	r3, [r4, #80]	; 0x50
 800f912:	4b13      	ldr	r3, [pc, #76]	; (800f960 <__sinit+0x68>)
 800f914:	4a13      	ldr	r2, [pc, #76]	; (800f964 <__sinit+0x6c>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	62a2      	str	r2, [r4, #40]	; 0x28
 800f91a:	42a3      	cmp	r3, r4
 800f91c:	bf08      	it	eq
 800f91e:	2301      	moveq	r3, #1
 800f920:	4620      	mov	r0, r4
 800f922:	bf08      	it	eq
 800f924:	61a3      	streq	r3, [r4, #24]
 800f926:	f000 f81f 	bl	800f968 <__sfp>
 800f92a:	6060      	str	r0, [r4, #4]
 800f92c:	4620      	mov	r0, r4
 800f92e:	f000 f81b 	bl	800f968 <__sfp>
 800f932:	60a0      	str	r0, [r4, #8]
 800f934:	4620      	mov	r0, r4
 800f936:	f000 f817 	bl	800f968 <__sfp>
 800f93a:	2200      	movs	r2, #0
 800f93c:	2104      	movs	r1, #4
 800f93e:	60e0      	str	r0, [r4, #12]
 800f940:	6860      	ldr	r0, [r4, #4]
 800f942:	f7ff ff81 	bl	800f848 <std>
 800f946:	2201      	movs	r2, #1
 800f948:	2109      	movs	r1, #9
 800f94a:	68a0      	ldr	r0, [r4, #8]
 800f94c:	f7ff ff7c 	bl	800f848 <std>
 800f950:	2202      	movs	r2, #2
 800f952:	2112      	movs	r1, #18
 800f954:	68e0      	ldr	r0, [r4, #12]
 800f956:	f7ff ff77 	bl	800f848 <std>
 800f95a:	2301      	movs	r3, #1
 800f95c:	61a3      	str	r3, [r4, #24]
 800f95e:	e7d1      	b.n	800f904 <__sinit+0xc>
 800f960:	0801205c 	.word	0x0801205c
 800f964:	0800f891 	.word	0x0800f891

0800f968 <__sfp>:
 800f968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96a:	4607      	mov	r7, r0
 800f96c:	f7ff ffac 	bl	800f8c8 <__sfp_lock_acquire>
 800f970:	4b1e      	ldr	r3, [pc, #120]	; (800f9ec <__sfp+0x84>)
 800f972:	681e      	ldr	r6, [r3, #0]
 800f974:	69b3      	ldr	r3, [r6, #24]
 800f976:	b913      	cbnz	r3, 800f97e <__sfp+0x16>
 800f978:	4630      	mov	r0, r6
 800f97a:	f7ff ffbd 	bl	800f8f8 <__sinit>
 800f97e:	3648      	adds	r6, #72	; 0x48
 800f980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f984:	3b01      	subs	r3, #1
 800f986:	d503      	bpl.n	800f990 <__sfp+0x28>
 800f988:	6833      	ldr	r3, [r6, #0]
 800f98a:	b30b      	cbz	r3, 800f9d0 <__sfp+0x68>
 800f98c:	6836      	ldr	r6, [r6, #0]
 800f98e:	e7f7      	b.n	800f980 <__sfp+0x18>
 800f990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f994:	b9d5      	cbnz	r5, 800f9cc <__sfp+0x64>
 800f996:	4b16      	ldr	r3, [pc, #88]	; (800f9f0 <__sfp+0x88>)
 800f998:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f99c:	60e3      	str	r3, [r4, #12]
 800f99e:	6665      	str	r5, [r4, #100]	; 0x64
 800f9a0:	f000 fbb2 	bl	8010108 <__retarget_lock_init_recursive>
 800f9a4:	f7ff ff96 	bl	800f8d4 <__sfp_lock_release>
 800f9a8:	2208      	movs	r2, #8
 800f9aa:	4629      	mov	r1, r5
 800f9ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f9b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f9b4:	6025      	str	r5, [r4, #0]
 800f9b6:	61a5      	str	r5, [r4, #24]
 800f9b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f9bc:	f7fc fefc 	bl	800c7b8 <memset>
 800f9c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f9c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9cc:	3468      	adds	r4, #104	; 0x68
 800f9ce:	e7d9      	b.n	800f984 <__sfp+0x1c>
 800f9d0:	2104      	movs	r1, #4
 800f9d2:	4638      	mov	r0, r7
 800f9d4:	f7ff ff62 	bl	800f89c <__sfmoreglue>
 800f9d8:	4604      	mov	r4, r0
 800f9da:	6030      	str	r0, [r6, #0]
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d1d5      	bne.n	800f98c <__sfp+0x24>
 800f9e0:	f7ff ff78 	bl	800f8d4 <__sfp_lock_release>
 800f9e4:	230c      	movs	r3, #12
 800f9e6:	603b      	str	r3, [r7, #0]
 800f9e8:	e7ee      	b.n	800f9c8 <__sfp+0x60>
 800f9ea:	bf00      	nop
 800f9ec:	0801205c 	.word	0x0801205c
 800f9f0:	ffff0001 	.word	0xffff0001

0800f9f4 <_fwalk_reent>:
 800f9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9f8:	4606      	mov	r6, r0
 800f9fa:	4688      	mov	r8, r1
 800f9fc:	2700      	movs	r7, #0
 800f9fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa06:	f1b9 0901 	subs.w	r9, r9, #1
 800fa0a:	d505      	bpl.n	800fa18 <_fwalk_reent+0x24>
 800fa0c:	6824      	ldr	r4, [r4, #0]
 800fa0e:	2c00      	cmp	r4, #0
 800fa10:	d1f7      	bne.n	800fa02 <_fwalk_reent+0xe>
 800fa12:	4638      	mov	r0, r7
 800fa14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa18:	89ab      	ldrh	r3, [r5, #12]
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d907      	bls.n	800fa2e <_fwalk_reent+0x3a>
 800fa1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa22:	3301      	adds	r3, #1
 800fa24:	d003      	beq.n	800fa2e <_fwalk_reent+0x3a>
 800fa26:	4629      	mov	r1, r5
 800fa28:	4630      	mov	r0, r6
 800fa2a:	47c0      	blx	r8
 800fa2c:	4307      	orrs	r7, r0
 800fa2e:	3568      	adds	r5, #104	; 0x68
 800fa30:	e7e9      	b.n	800fa06 <_fwalk_reent+0x12>

0800fa32 <rshift>:
 800fa32:	6903      	ldr	r3, [r0, #16]
 800fa34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa38:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fa3c:	f100 0414 	add.w	r4, r0, #20
 800fa40:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fa44:	dd46      	ble.n	800fad4 <rshift+0xa2>
 800fa46:	f011 011f 	ands.w	r1, r1, #31
 800fa4a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fa4e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fa52:	d10c      	bne.n	800fa6e <rshift+0x3c>
 800fa54:	4629      	mov	r1, r5
 800fa56:	f100 0710 	add.w	r7, r0, #16
 800fa5a:	42b1      	cmp	r1, r6
 800fa5c:	d335      	bcc.n	800faca <rshift+0x98>
 800fa5e:	1a9b      	subs	r3, r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	1eea      	subs	r2, r5, #3
 800fa64:	4296      	cmp	r6, r2
 800fa66:	bf38      	it	cc
 800fa68:	2300      	movcc	r3, #0
 800fa6a:	4423      	add	r3, r4
 800fa6c:	e015      	b.n	800fa9a <rshift+0x68>
 800fa6e:	46a1      	mov	r9, r4
 800fa70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fa74:	f1c1 0820 	rsb	r8, r1, #32
 800fa78:	40cf      	lsrs	r7, r1
 800fa7a:	f105 0e04 	add.w	lr, r5, #4
 800fa7e:	4576      	cmp	r6, lr
 800fa80:	46f4      	mov	ip, lr
 800fa82:	d816      	bhi.n	800fab2 <rshift+0x80>
 800fa84:	1a9b      	subs	r3, r3, r2
 800fa86:	009a      	lsls	r2, r3, #2
 800fa88:	3a04      	subs	r2, #4
 800fa8a:	3501      	adds	r5, #1
 800fa8c:	42ae      	cmp	r6, r5
 800fa8e:	bf38      	it	cc
 800fa90:	2200      	movcc	r2, #0
 800fa92:	18a3      	adds	r3, r4, r2
 800fa94:	50a7      	str	r7, [r4, r2]
 800fa96:	b107      	cbz	r7, 800fa9a <rshift+0x68>
 800fa98:	3304      	adds	r3, #4
 800fa9a:	42a3      	cmp	r3, r4
 800fa9c:	eba3 0204 	sub.w	r2, r3, r4
 800faa0:	bf08      	it	eq
 800faa2:	2300      	moveq	r3, #0
 800faa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800faa8:	6102      	str	r2, [r0, #16]
 800faaa:	bf08      	it	eq
 800faac:	6143      	streq	r3, [r0, #20]
 800faae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fab2:	f8dc c000 	ldr.w	ip, [ip]
 800fab6:	fa0c fc08 	lsl.w	ip, ip, r8
 800faba:	ea4c 0707 	orr.w	r7, ip, r7
 800fabe:	f849 7b04 	str.w	r7, [r9], #4
 800fac2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fac6:	40cf      	lsrs	r7, r1
 800fac8:	e7d9      	b.n	800fa7e <rshift+0x4c>
 800faca:	f851 cb04 	ldr.w	ip, [r1], #4
 800face:	f847 cf04 	str.w	ip, [r7, #4]!
 800fad2:	e7c2      	b.n	800fa5a <rshift+0x28>
 800fad4:	4623      	mov	r3, r4
 800fad6:	e7e0      	b.n	800fa9a <rshift+0x68>

0800fad8 <__hexdig_fun>:
 800fad8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fadc:	2b09      	cmp	r3, #9
 800fade:	d802      	bhi.n	800fae6 <__hexdig_fun+0xe>
 800fae0:	3820      	subs	r0, #32
 800fae2:	b2c0      	uxtb	r0, r0
 800fae4:	4770      	bx	lr
 800fae6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800faea:	2b05      	cmp	r3, #5
 800faec:	d801      	bhi.n	800faf2 <__hexdig_fun+0x1a>
 800faee:	3847      	subs	r0, #71	; 0x47
 800faf0:	e7f7      	b.n	800fae2 <__hexdig_fun+0xa>
 800faf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800faf6:	2b05      	cmp	r3, #5
 800faf8:	d801      	bhi.n	800fafe <__hexdig_fun+0x26>
 800fafa:	3827      	subs	r0, #39	; 0x27
 800fafc:	e7f1      	b.n	800fae2 <__hexdig_fun+0xa>
 800fafe:	2000      	movs	r0, #0
 800fb00:	4770      	bx	lr
	...

0800fb04 <__gethex>:
 800fb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb08:	b08b      	sub	sp, #44	; 0x2c
 800fb0a:	9306      	str	r3, [sp, #24]
 800fb0c:	4bb9      	ldr	r3, [pc, #740]	; (800fdf4 <__gethex+0x2f0>)
 800fb0e:	9002      	str	r0, [sp, #8]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	468b      	mov	fp, r1
 800fb14:	4618      	mov	r0, r3
 800fb16:	4690      	mov	r8, r2
 800fb18:	9303      	str	r3, [sp, #12]
 800fb1a:	f7f0 fb23 	bl	8000164 <strlen>
 800fb1e:	4682      	mov	sl, r0
 800fb20:	9b03      	ldr	r3, [sp, #12]
 800fb22:	f8db 2000 	ldr.w	r2, [fp]
 800fb26:	4403      	add	r3, r0
 800fb28:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fb2c:	9307      	str	r3, [sp, #28]
 800fb2e:	1c93      	adds	r3, r2, #2
 800fb30:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fb34:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fb38:	32fe      	adds	r2, #254	; 0xfe
 800fb3a:	18d1      	adds	r1, r2, r3
 800fb3c:	461f      	mov	r7, r3
 800fb3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fb42:	9101      	str	r1, [sp, #4]
 800fb44:	2830      	cmp	r0, #48	; 0x30
 800fb46:	d0f8      	beq.n	800fb3a <__gethex+0x36>
 800fb48:	f7ff ffc6 	bl	800fad8 <__hexdig_fun>
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	d13a      	bne.n	800fbc8 <__gethex+0xc4>
 800fb52:	4652      	mov	r2, sl
 800fb54:	4638      	mov	r0, r7
 800fb56:	9903      	ldr	r1, [sp, #12]
 800fb58:	f001 fa59 	bl	801100e <strncmp>
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d166      	bne.n	800fc30 <__gethex+0x12c>
 800fb62:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fb66:	eb07 060a 	add.w	r6, r7, sl
 800fb6a:	f7ff ffb5 	bl	800fad8 <__hexdig_fun>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	d060      	beq.n	800fc34 <__gethex+0x130>
 800fb72:	4633      	mov	r3, r6
 800fb74:	7818      	ldrb	r0, [r3, #0]
 800fb76:	461f      	mov	r7, r3
 800fb78:	2830      	cmp	r0, #48	; 0x30
 800fb7a:	f103 0301 	add.w	r3, r3, #1
 800fb7e:	d0f9      	beq.n	800fb74 <__gethex+0x70>
 800fb80:	f7ff ffaa 	bl	800fad8 <__hexdig_fun>
 800fb84:	2301      	movs	r3, #1
 800fb86:	fab0 f480 	clz	r4, r0
 800fb8a:	4635      	mov	r5, r6
 800fb8c:	0964      	lsrs	r4, r4, #5
 800fb8e:	9301      	str	r3, [sp, #4]
 800fb90:	463a      	mov	r2, r7
 800fb92:	4616      	mov	r6, r2
 800fb94:	7830      	ldrb	r0, [r6, #0]
 800fb96:	3201      	adds	r2, #1
 800fb98:	f7ff ff9e 	bl	800fad8 <__hexdig_fun>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d1f8      	bne.n	800fb92 <__gethex+0x8e>
 800fba0:	4652      	mov	r2, sl
 800fba2:	4630      	mov	r0, r6
 800fba4:	9903      	ldr	r1, [sp, #12]
 800fba6:	f001 fa32 	bl	801100e <strncmp>
 800fbaa:	b980      	cbnz	r0, 800fbce <__gethex+0xca>
 800fbac:	b94d      	cbnz	r5, 800fbc2 <__gethex+0xbe>
 800fbae:	eb06 050a 	add.w	r5, r6, sl
 800fbb2:	462a      	mov	r2, r5
 800fbb4:	4616      	mov	r6, r2
 800fbb6:	7830      	ldrb	r0, [r6, #0]
 800fbb8:	3201      	adds	r2, #1
 800fbba:	f7ff ff8d 	bl	800fad8 <__hexdig_fun>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d1f8      	bne.n	800fbb4 <__gethex+0xb0>
 800fbc2:	1bad      	subs	r5, r5, r6
 800fbc4:	00ad      	lsls	r5, r5, #2
 800fbc6:	e004      	b.n	800fbd2 <__gethex+0xce>
 800fbc8:	2400      	movs	r4, #0
 800fbca:	4625      	mov	r5, r4
 800fbcc:	e7e0      	b.n	800fb90 <__gethex+0x8c>
 800fbce:	2d00      	cmp	r5, #0
 800fbd0:	d1f7      	bne.n	800fbc2 <__gethex+0xbe>
 800fbd2:	7833      	ldrb	r3, [r6, #0]
 800fbd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fbd8:	2b50      	cmp	r3, #80	; 0x50
 800fbda:	d139      	bne.n	800fc50 <__gethex+0x14c>
 800fbdc:	7873      	ldrb	r3, [r6, #1]
 800fbde:	2b2b      	cmp	r3, #43	; 0x2b
 800fbe0:	d02a      	beq.n	800fc38 <__gethex+0x134>
 800fbe2:	2b2d      	cmp	r3, #45	; 0x2d
 800fbe4:	d02c      	beq.n	800fc40 <__gethex+0x13c>
 800fbe6:	f04f 0900 	mov.w	r9, #0
 800fbea:	1c71      	adds	r1, r6, #1
 800fbec:	7808      	ldrb	r0, [r1, #0]
 800fbee:	f7ff ff73 	bl	800fad8 <__hexdig_fun>
 800fbf2:	1e43      	subs	r3, r0, #1
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2b18      	cmp	r3, #24
 800fbf8:	d82a      	bhi.n	800fc50 <__gethex+0x14c>
 800fbfa:	f1a0 0210 	sub.w	r2, r0, #16
 800fbfe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc02:	f7ff ff69 	bl	800fad8 <__hexdig_fun>
 800fc06:	1e43      	subs	r3, r0, #1
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	2b18      	cmp	r3, #24
 800fc0c:	d91b      	bls.n	800fc46 <__gethex+0x142>
 800fc0e:	f1b9 0f00 	cmp.w	r9, #0
 800fc12:	d000      	beq.n	800fc16 <__gethex+0x112>
 800fc14:	4252      	negs	r2, r2
 800fc16:	4415      	add	r5, r2
 800fc18:	f8cb 1000 	str.w	r1, [fp]
 800fc1c:	b1d4      	cbz	r4, 800fc54 <__gethex+0x150>
 800fc1e:	9b01      	ldr	r3, [sp, #4]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	bf14      	ite	ne
 800fc24:	2700      	movne	r7, #0
 800fc26:	2706      	moveq	r7, #6
 800fc28:	4638      	mov	r0, r7
 800fc2a:	b00b      	add	sp, #44	; 0x2c
 800fc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc30:	463e      	mov	r6, r7
 800fc32:	4625      	mov	r5, r4
 800fc34:	2401      	movs	r4, #1
 800fc36:	e7cc      	b.n	800fbd2 <__gethex+0xce>
 800fc38:	f04f 0900 	mov.w	r9, #0
 800fc3c:	1cb1      	adds	r1, r6, #2
 800fc3e:	e7d5      	b.n	800fbec <__gethex+0xe8>
 800fc40:	f04f 0901 	mov.w	r9, #1
 800fc44:	e7fa      	b.n	800fc3c <__gethex+0x138>
 800fc46:	230a      	movs	r3, #10
 800fc48:	fb03 0202 	mla	r2, r3, r2, r0
 800fc4c:	3a10      	subs	r2, #16
 800fc4e:	e7d6      	b.n	800fbfe <__gethex+0xfa>
 800fc50:	4631      	mov	r1, r6
 800fc52:	e7e1      	b.n	800fc18 <__gethex+0x114>
 800fc54:	4621      	mov	r1, r4
 800fc56:	1bf3      	subs	r3, r6, r7
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	2b07      	cmp	r3, #7
 800fc5c:	dc0a      	bgt.n	800fc74 <__gethex+0x170>
 800fc5e:	9802      	ldr	r0, [sp, #8]
 800fc60:	f000 fb00 	bl	8010264 <_Balloc>
 800fc64:	4604      	mov	r4, r0
 800fc66:	b940      	cbnz	r0, 800fc7a <__gethex+0x176>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	21de      	movs	r1, #222	; 0xde
 800fc6c:	4b62      	ldr	r3, [pc, #392]	; (800fdf8 <__gethex+0x2f4>)
 800fc6e:	4863      	ldr	r0, [pc, #396]	; (800fdfc <__gethex+0x2f8>)
 800fc70:	f7fc fd1c 	bl	800c6ac <__assert_func>
 800fc74:	3101      	adds	r1, #1
 800fc76:	105b      	asrs	r3, r3, #1
 800fc78:	e7ef      	b.n	800fc5a <__gethex+0x156>
 800fc7a:	f04f 0b00 	mov.w	fp, #0
 800fc7e:	f100 0914 	add.w	r9, r0, #20
 800fc82:	f1ca 0301 	rsb	r3, sl, #1
 800fc86:	f8cd 9010 	str.w	r9, [sp, #16]
 800fc8a:	f8cd b004 	str.w	fp, [sp, #4]
 800fc8e:	9308      	str	r3, [sp, #32]
 800fc90:	42b7      	cmp	r7, r6
 800fc92:	d33f      	bcc.n	800fd14 <__gethex+0x210>
 800fc94:	9f04      	ldr	r7, [sp, #16]
 800fc96:	9b01      	ldr	r3, [sp, #4]
 800fc98:	f847 3b04 	str.w	r3, [r7], #4
 800fc9c:	eba7 0709 	sub.w	r7, r7, r9
 800fca0:	10bf      	asrs	r7, r7, #2
 800fca2:	6127      	str	r7, [r4, #16]
 800fca4:	4618      	mov	r0, r3
 800fca6:	f000 fbd3 	bl	8010450 <__hi0bits>
 800fcaa:	017f      	lsls	r7, r7, #5
 800fcac:	f8d8 6000 	ldr.w	r6, [r8]
 800fcb0:	1a3f      	subs	r7, r7, r0
 800fcb2:	42b7      	cmp	r7, r6
 800fcb4:	dd62      	ble.n	800fd7c <__gethex+0x278>
 800fcb6:	1bbf      	subs	r7, r7, r6
 800fcb8:	4639      	mov	r1, r7
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f000 ff69 	bl	8010b92 <__any_on>
 800fcc0:	4682      	mov	sl, r0
 800fcc2:	b1a8      	cbz	r0, 800fcf0 <__gethex+0x1ec>
 800fcc4:	f04f 0a01 	mov.w	sl, #1
 800fcc8:	1e7b      	subs	r3, r7, #1
 800fcca:	1159      	asrs	r1, r3, #5
 800fccc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fcd0:	f003 021f 	and.w	r2, r3, #31
 800fcd4:	fa0a f202 	lsl.w	r2, sl, r2
 800fcd8:	420a      	tst	r2, r1
 800fcda:	d009      	beq.n	800fcf0 <__gethex+0x1ec>
 800fcdc:	4553      	cmp	r3, sl
 800fcde:	dd05      	ble.n	800fcec <__gethex+0x1e8>
 800fce0:	4620      	mov	r0, r4
 800fce2:	1eb9      	subs	r1, r7, #2
 800fce4:	f000 ff55 	bl	8010b92 <__any_on>
 800fce8:	2800      	cmp	r0, #0
 800fcea:	d144      	bne.n	800fd76 <__gethex+0x272>
 800fcec:	f04f 0a02 	mov.w	sl, #2
 800fcf0:	4639      	mov	r1, r7
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	f7ff fe9d 	bl	800fa32 <rshift>
 800fcf8:	443d      	add	r5, r7
 800fcfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fcfe:	42ab      	cmp	r3, r5
 800fd00:	da4a      	bge.n	800fd98 <__gethex+0x294>
 800fd02:	4621      	mov	r1, r4
 800fd04:	9802      	ldr	r0, [sp, #8]
 800fd06:	f000 faed 	bl	80102e4 <_Bfree>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd0e:	27a3      	movs	r7, #163	; 0xa3
 800fd10:	6013      	str	r3, [r2, #0]
 800fd12:	e789      	b.n	800fc28 <__gethex+0x124>
 800fd14:	1e73      	subs	r3, r6, #1
 800fd16:	9a07      	ldr	r2, [sp, #28]
 800fd18:	9305      	str	r3, [sp, #20]
 800fd1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d019      	beq.n	800fd56 <__gethex+0x252>
 800fd22:	f1bb 0f20 	cmp.w	fp, #32
 800fd26:	d107      	bne.n	800fd38 <__gethex+0x234>
 800fd28:	9b04      	ldr	r3, [sp, #16]
 800fd2a:	9a01      	ldr	r2, [sp, #4]
 800fd2c:	f843 2b04 	str.w	r2, [r3], #4
 800fd30:	9304      	str	r3, [sp, #16]
 800fd32:	2300      	movs	r3, #0
 800fd34:	469b      	mov	fp, r3
 800fd36:	9301      	str	r3, [sp, #4]
 800fd38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fd3c:	f7ff fecc 	bl	800fad8 <__hexdig_fun>
 800fd40:	9b01      	ldr	r3, [sp, #4]
 800fd42:	f000 000f 	and.w	r0, r0, #15
 800fd46:	fa00 f00b 	lsl.w	r0, r0, fp
 800fd4a:	4303      	orrs	r3, r0
 800fd4c:	9301      	str	r3, [sp, #4]
 800fd4e:	f10b 0b04 	add.w	fp, fp, #4
 800fd52:	9b05      	ldr	r3, [sp, #20]
 800fd54:	e00d      	b.n	800fd72 <__gethex+0x26e>
 800fd56:	9b05      	ldr	r3, [sp, #20]
 800fd58:	9a08      	ldr	r2, [sp, #32]
 800fd5a:	4413      	add	r3, r2
 800fd5c:	42bb      	cmp	r3, r7
 800fd5e:	d3e0      	bcc.n	800fd22 <__gethex+0x21e>
 800fd60:	4618      	mov	r0, r3
 800fd62:	4652      	mov	r2, sl
 800fd64:	9903      	ldr	r1, [sp, #12]
 800fd66:	9309      	str	r3, [sp, #36]	; 0x24
 800fd68:	f001 f951 	bl	801100e <strncmp>
 800fd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d1d7      	bne.n	800fd22 <__gethex+0x21e>
 800fd72:	461e      	mov	r6, r3
 800fd74:	e78c      	b.n	800fc90 <__gethex+0x18c>
 800fd76:	f04f 0a03 	mov.w	sl, #3
 800fd7a:	e7b9      	b.n	800fcf0 <__gethex+0x1ec>
 800fd7c:	da09      	bge.n	800fd92 <__gethex+0x28e>
 800fd7e:	1bf7      	subs	r7, r6, r7
 800fd80:	4621      	mov	r1, r4
 800fd82:	463a      	mov	r2, r7
 800fd84:	9802      	ldr	r0, [sp, #8]
 800fd86:	f000 fcc5 	bl	8010714 <__lshift>
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	1bed      	subs	r5, r5, r7
 800fd8e:	f100 0914 	add.w	r9, r0, #20
 800fd92:	f04f 0a00 	mov.w	sl, #0
 800fd96:	e7b0      	b.n	800fcfa <__gethex+0x1f6>
 800fd98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fd9c:	42a8      	cmp	r0, r5
 800fd9e:	dd71      	ble.n	800fe84 <__gethex+0x380>
 800fda0:	1b45      	subs	r5, r0, r5
 800fda2:	42ae      	cmp	r6, r5
 800fda4:	dc34      	bgt.n	800fe10 <__gethex+0x30c>
 800fda6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	d028      	beq.n	800fe00 <__gethex+0x2fc>
 800fdae:	2b03      	cmp	r3, #3
 800fdb0:	d02a      	beq.n	800fe08 <__gethex+0x304>
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d115      	bne.n	800fde2 <__gethex+0x2de>
 800fdb6:	42ae      	cmp	r6, r5
 800fdb8:	d113      	bne.n	800fde2 <__gethex+0x2de>
 800fdba:	2e01      	cmp	r6, #1
 800fdbc:	d10b      	bne.n	800fdd6 <__gethex+0x2d2>
 800fdbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fdc2:	9a06      	ldr	r2, [sp, #24]
 800fdc4:	2762      	movs	r7, #98	; 0x62
 800fdc6:	6013      	str	r3, [r2, #0]
 800fdc8:	2301      	movs	r3, #1
 800fdca:	6123      	str	r3, [r4, #16]
 800fdcc:	f8c9 3000 	str.w	r3, [r9]
 800fdd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fdd2:	601c      	str	r4, [r3, #0]
 800fdd4:	e728      	b.n	800fc28 <__gethex+0x124>
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	1e71      	subs	r1, r6, #1
 800fdda:	f000 feda 	bl	8010b92 <__any_on>
 800fdde:	2800      	cmp	r0, #0
 800fde0:	d1ed      	bne.n	800fdbe <__gethex+0x2ba>
 800fde2:	4621      	mov	r1, r4
 800fde4:	9802      	ldr	r0, [sp, #8]
 800fde6:	f000 fa7d 	bl	80102e4 <_Bfree>
 800fdea:	2300      	movs	r3, #0
 800fdec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fdee:	2750      	movs	r7, #80	; 0x50
 800fdf0:	6013      	str	r3, [r2, #0]
 800fdf2:	e719      	b.n	800fc28 <__gethex+0x124>
 800fdf4:	08012364 	.word	0x08012364
 800fdf8:	08012284 	.word	0x08012284
 800fdfc:	080122f8 	.word	0x080122f8
 800fe00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1ed      	bne.n	800fde2 <__gethex+0x2de>
 800fe06:	e7da      	b.n	800fdbe <__gethex+0x2ba>
 800fe08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1d7      	bne.n	800fdbe <__gethex+0x2ba>
 800fe0e:	e7e8      	b.n	800fde2 <__gethex+0x2de>
 800fe10:	1e6f      	subs	r7, r5, #1
 800fe12:	f1ba 0f00 	cmp.w	sl, #0
 800fe16:	d132      	bne.n	800fe7e <__gethex+0x37a>
 800fe18:	b127      	cbz	r7, 800fe24 <__gethex+0x320>
 800fe1a:	4639      	mov	r1, r7
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	f000 feb8 	bl	8010b92 <__any_on>
 800fe22:	4682      	mov	sl, r0
 800fe24:	2101      	movs	r1, #1
 800fe26:	117b      	asrs	r3, r7, #5
 800fe28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fe2c:	f007 071f 	and.w	r7, r7, #31
 800fe30:	fa01 f707 	lsl.w	r7, r1, r7
 800fe34:	421f      	tst	r7, r3
 800fe36:	f04f 0702 	mov.w	r7, #2
 800fe3a:	4629      	mov	r1, r5
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	bf18      	it	ne
 800fe40:	f04a 0a02 	orrne.w	sl, sl, #2
 800fe44:	1b76      	subs	r6, r6, r5
 800fe46:	f7ff fdf4 	bl	800fa32 <rshift>
 800fe4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fe4e:	f1ba 0f00 	cmp.w	sl, #0
 800fe52:	d048      	beq.n	800fee6 <__gethex+0x3e2>
 800fe54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe58:	2b02      	cmp	r3, #2
 800fe5a:	d015      	beq.n	800fe88 <__gethex+0x384>
 800fe5c:	2b03      	cmp	r3, #3
 800fe5e:	d017      	beq.n	800fe90 <__gethex+0x38c>
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d109      	bne.n	800fe78 <__gethex+0x374>
 800fe64:	f01a 0f02 	tst.w	sl, #2
 800fe68:	d006      	beq.n	800fe78 <__gethex+0x374>
 800fe6a:	f8d9 0000 	ldr.w	r0, [r9]
 800fe6e:	ea4a 0a00 	orr.w	sl, sl, r0
 800fe72:	f01a 0f01 	tst.w	sl, #1
 800fe76:	d10e      	bne.n	800fe96 <__gethex+0x392>
 800fe78:	f047 0710 	orr.w	r7, r7, #16
 800fe7c:	e033      	b.n	800fee6 <__gethex+0x3e2>
 800fe7e:	f04f 0a01 	mov.w	sl, #1
 800fe82:	e7cf      	b.n	800fe24 <__gethex+0x320>
 800fe84:	2701      	movs	r7, #1
 800fe86:	e7e2      	b.n	800fe4e <__gethex+0x34a>
 800fe88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe8a:	f1c3 0301 	rsb	r3, r3, #1
 800fe8e:	9315      	str	r3, [sp, #84]	; 0x54
 800fe90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d0f0      	beq.n	800fe78 <__gethex+0x374>
 800fe96:	f04f 0c00 	mov.w	ip, #0
 800fe9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fe9e:	f104 0314 	add.w	r3, r4, #20
 800fea2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fea6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800feaa:	4618      	mov	r0, r3
 800feac:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800feb4:	d01c      	beq.n	800fef0 <__gethex+0x3ec>
 800feb6:	3201      	adds	r2, #1
 800feb8:	6002      	str	r2, [r0, #0]
 800feba:	2f02      	cmp	r7, #2
 800febc:	f104 0314 	add.w	r3, r4, #20
 800fec0:	d13d      	bne.n	800ff3e <__gethex+0x43a>
 800fec2:	f8d8 2000 	ldr.w	r2, [r8]
 800fec6:	3a01      	subs	r2, #1
 800fec8:	42b2      	cmp	r2, r6
 800feca:	d10a      	bne.n	800fee2 <__gethex+0x3de>
 800fecc:	2201      	movs	r2, #1
 800fece:	1171      	asrs	r1, r6, #5
 800fed0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fed4:	f006 061f 	and.w	r6, r6, #31
 800fed8:	fa02 f606 	lsl.w	r6, r2, r6
 800fedc:	421e      	tst	r6, r3
 800fede:	bf18      	it	ne
 800fee0:	4617      	movne	r7, r2
 800fee2:	f047 0720 	orr.w	r7, r7, #32
 800fee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fee8:	601c      	str	r4, [r3, #0]
 800feea:	9b06      	ldr	r3, [sp, #24]
 800feec:	601d      	str	r5, [r3, #0]
 800feee:	e69b      	b.n	800fc28 <__gethex+0x124>
 800fef0:	4299      	cmp	r1, r3
 800fef2:	f843 cc04 	str.w	ip, [r3, #-4]
 800fef6:	d8d8      	bhi.n	800feaa <__gethex+0x3a6>
 800fef8:	68a3      	ldr	r3, [r4, #8]
 800fefa:	459b      	cmp	fp, r3
 800fefc:	db17      	blt.n	800ff2e <__gethex+0x42a>
 800fefe:	6861      	ldr	r1, [r4, #4]
 800ff00:	9802      	ldr	r0, [sp, #8]
 800ff02:	3101      	adds	r1, #1
 800ff04:	f000 f9ae 	bl	8010264 <_Balloc>
 800ff08:	4681      	mov	r9, r0
 800ff0a:	b918      	cbnz	r0, 800ff14 <__gethex+0x410>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	2184      	movs	r1, #132	; 0x84
 800ff10:	4b19      	ldr	r3, [pc, #100]	; (800ff78 <__gethex+0x474>)
 800ff12:	e6ac      	b.n	800fc6e <__gethex+0x16a>
 800ff14:	6922      	ldr	r2, [r4, #16]
 800ff16:	f104 010c 	add.w	r1, r4, #12
 800ff1a:	3202      	adds	r2, #2
 800ff1c:	0092      	lsls	r2, r2, #2
 800ff1e:	300c      	adds	r0, #12
 800ff20:	f7fc fc3c 	bl	800c79c <memcpy>
 800ff24:	4621      	mov	r1, r4
 800ff26:	9802      	ldr	r0, [sp, #8]
 800ff28:	f000 f9dc 	bl	80102e4 <_Bfree>
 800ff2c:	464c      	mov	r4, r9
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	1c5a      	adds	r2, r3, #1
 800ff32:	6122      	str	r2, [r4, #16]
 800ff34:	2201      	movs	r2, #1
 800ff36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff3a:	615a      	str	r2, [r3, #20]
 800ff3c:	e7bd      	b.n	800feba <__gethex+0x3b6>
 800ff3e:	6922      	ldr	r2, [r4, #16]
 800ff40:	455a      	cmp	r2, fp
 800ff42:	dd0b      	ble.n	800ff5c <__gethex+0x458>
 800ff44:	2101      	movs	r1, #1
 800ff46:	4620      	mov	r0, r4
 800ff48:	f7ff fd73 	bl	800fa32 <rshift>
 800ff4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff50:	3501      	adds	r5, #1
 800ff52:	42ab      	cmp	r3, r5
 800ff54:	f6ff aed5 	blt.w	800fd02 <__gethex+0x1fe>
 800ff58:	2701      	movs	r7, #1
 800ff5a:	e7c2      	b.n	800fee2 <__gethex+0x3de>
 800ff5c:	f016 061f 	ands.w	r6, r6, #31
 800ff60:	d0fa      	beq.n	800ff58 <__gethex+0x454>
 800ff62:	449a      	add	sl, r3
 800ff64:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ff68:	f000 fa72 	bl	8010450 <__hi0bits>
 800ff6c:	f1c6 0620 	rsb	r6, r6, #32
 800ff70:	42b0      	cmp	r0, r6
 800ff72:	dbe7      	blt.n	800ff44 <__gethex+0x440>
 800ff74:	e7f0      	b.n	800ff58 <__gethex+0x454>
 800ff76:	bf00      	nop
 800ff78:	08012284 	.word	0x08012284

0800ff7c <L_shift>:
 800ff7c:	f1c2 0208 	rsb	r2, r2, #8
 800ff80:	0092      	lsls	r2, r2, #2
 800ff82:	b570      	push	{r4, r5, r6, lr}
 800ff84:	f1c2 0620 	rsb	r6, r2, #32
 800ff88:	6843      	ldr	r3, [r0, #4]
 800ff8a:	6804      	ldr	r4, [r0, #0]
 800ff8c:	fa03 f506 	lsl.w	r5, r3, r6
 800ff90:	432c      	orrs	r4, r5
 800ff92:	40d3      	lsrs	r3, r2
 800ff94:	6004      	str	r4, [r0, #0]
 800ff96:	f840 3f04 	str.w	r3, [r0, #4]!
 800ff9a:	4288      	cmp	r0, r1
 800ff9c:	d3f4      	bcc.n	800ff88 <L_shift+0xc>
 800ff9e:	bd70      	pop	{r4, r5, r6, pc}

0800ffa0 <__match>:
 800ffa0:	b530      	push	{r4, r5, lr}
 800ffa2:	6803      	ldr	r3, [r0, #0]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffaa:	b914      	cbnz	r4, 800ffb2 <__match+0x12>
 800ffac:	6003      	str	r3, [r0, #0]
 800ffae:	2001      	movs	r0, #1
 800ffb0:	bd30      	pop	{r4, r5, pc}
 800ffb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ffba:	2d19      	cmp	r5, #25
 800ffbc:	bf98      	it	ls
 800ffbe:	3220      	addls	r2, #32
 800ffc0:	42a2      	cmp	r2, r4
 800ffc2:	d0f0      	beq.n	800ffa6 <__match+0x6>
 800ffc4:	2000      	movs	r0, #0
 800ffc6:	e7f3      	b.n	800ffb0 <__match+0x10>

0800ffc8 <__hexnan>:
 800ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffcc:	2500      	movs	r5, #0
 800ffce:	680b      	ldr	r3, [r1, #0]
 800ffd0:	4682      	mov	sl, r0
 800ffd2:	115e      	asrs	r6, r3, #5
 800ffd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ffd8:	f013 031f 	ands.w	r3, r3, #31
 800ffdc:	bf18      	it	ne
 800ffde:	3604      	addne	r6, #4
 800ffe0:	1f37      	subs	r7, r6, #4
 800ffe2:	4690      	mov	r8, r2
 800ffe4:	46b9      	mov	r9, r7
 800ffe6:	463c      	mov	r4, r7
 800ffe8:	46ab      	mov	fp, r5
 800ffea:	b087      	sub	sp, #28
 800ffec:	6801      	ldr	r1, [r0, #0]
 800ffee:	9301      	str	r3, [sp, #4]
 800fff0:	f846 5c04 	str.w	r5, [r6, #-4]
 800fff4:	9502      	str	r5, [sp, #8]
 800fff6:	784a      	ldrb	r2, [r1, #1]
 800fff8:	1c4b      	adds	r3, r1, #1
 800fffa:	9303      	str	r3, [sp, #12]
 800fffc:	b342      	cbz	r2, 8010050 <__hexnan+0x88>
 800fffe:	4610      	mov	r0, r2
 8010000:	9105      	str	r1, [sp, #20]
 8010002:	9204      	str	r2, [sp, #16]
 8010004:	f7ff fd68 	bl	800fad8 <__hexdig_fun>
 8010008:	2800      	cmp	r0, #0
 801000a:	d14f      	bne.n	80100ac <__hexnan+0xe4>
 801000c:	9a04      	ldr	r2, [sp, #16]
 801000e:	9905      	ldr	r1, [sp, #20]
 8010010:	2a20      	cmp	r2, #32
 8010012:	d818      	bhi.n	8010046 <__hexnan+0x7e>
 8010014:	9b02      	ldr	r3, [sp, #8]
 8010016:	459b      	cmp	fp, r3
 8010018:	dd13      	ble.n	8010042 <__hexnan+0x7a>
 801001a:	454c      	cmp	r4, r9
 801001c:	d206      	bcs.n	801002c <__hexnan+0x64>
 801001e:	2d07      	cmp	r5, #7
 8010020:	dc04      	bgt.n	801002c <__hexnan+0x64>
 8010022:	462a      	mov	r2, r5
 8010024:	4649      	mov	r1, r9
 8010026:	4620      	mov	r0, r4
 8010028:	f7ff ffa8 	bl	800ff7c <L_shift>
 801002c:	4544      	cmp	r4, r8
 801002e:	d950      	bls.n	80100d2 <__hexnan+0x10a>
 8010030:	2300      	movs	r3, #0
 8010032:	f1a4 0904 	sub.w	r9, r4, #4
 8010036:	f844 3c04 	str.w	r3, [r4, #-4]
 801003a:	461d      	mov	r5, r3
 801003c:	464c      	mov	r4, r9
 801003e:	f8cd b008 	str.w	fp, [sp, #8]
 8010042:	9903      	ldr	r1, [sp, #12]
 8010044:	e7d7      	b.n	800fff6 <__hexnan+0x2e>
 8010046:	2a29      	cmp	r2, #41	; 0x29
 8010048:	d156      	bne.n	80100f8 <__hexnan+0x130>
 801004a:	3102      	adds	r1, #2
 801004c:	f8ca 1000 	str.w	r1, [sl]
 8010050:	f1bb 0f00 	cmp.w	fp, #0
 8010054:	d050      	beq.n	80100f8 <__hexnan+0x130>
 8010056:	454c      	cmp	r4, r9
 8010058:	d206      	bcs.n	8010068 <__hexnan+0xa0>
 801005a:	2d07      	cmp	r5, #7
 801005c:	dc04      	bgt.n	8010068 <__hexnan+0xa0>
 801005e:	462a      	mov	r2, r5
 8010060:	4649      	mov	r1, r9
 8010062:	4620      	mov	r0, r4
 8010064:	f7ff ff8a 	bl	800ff7c <L_shift>
 8010068:	4544      	cmp	r4, r8
 801006a:	d934      	bls.n	80100d6 <__hexnan+0x10e>
 801006c:	4623      	mov	r3, r4
 801006e:	f1a8 0204 	sub.w	r2, r8, #4
 8010072:	f853 1b04 	ldr.w	r1, [r3], #4
 8010076:	429f      	cmp	r7, r3
 8010078:	f842 1f04 	str.w	r1, [r2, #4]!
 801007c:	d2f9      	bcs.n	8010072 <__hexnan+0xaa>
 801007e:	1b3b      	subs	r3, r7, r4
 8010080:	f023 0303 	bic.w	r3, r3, #3
 8010084:	3304      	adds	r3, #4
 8010086:	3401      	adds	r4, #1
 8010088:	3e03      	subs	r6, #3
 801008a:	42b4      	cmp	r4, r6
 801008c:	bf88      	it	hi
 801008e:	2304      	movhi	r3, #4
 8010090:	2200      	movs	r2, #0
 8010092:	4443      	add	r3, r8
 8010094:	f843 2b04 	str.w	r2, [r3], #4
 8010098:	429f      	cmp	r7, r3
 801009a:	d2fb      	bcs.n	8010094 <__hexnan+0xcc>
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	b91b      	cbnz	r3, 80100a8 <__hexnan+0xe0>
 80100a0:	4547      	cmp	r7, r8
 80100a2:	d127      	bne.n	80100f4 <__hexnan+0x12c>
 80100a4:	2301      	movs	r3, #1
 80100a6:	603b      	str	r3, [r7, #0]
 80100a8:	2005      	movs	r0, #5
 80100aa:	e026      	b.n	80100fa <__hexnan+0x132>
 80100ac:	3501      	adds	r5, #1
 80100ae:	2d08      	cmp	r5, #8
 80100b0:	f10b 0b01 	add.w	fp, fp, #1
 80100b4:	dd06      	ble.n	80100c4 <__hexnan+0xfc>
 80100b6:	4544      	cmp	r4, r8
 80100b8:	d9c3      	bls.n	8010042 <__hexnan+0x7a>
 80100ba:	2300      	movs	r3, #0
 80100bc:	2501      	movs	r5, #1
 80100be:	f844 3c04 	str.w	r3, [r4, #-4]
 80100c2:	3c04      	subs	r4, #4
 80100c4:	6822      	ldr	r2, [r4, #0]
 80100c6:	f000 000f 	and.w	r0, r0, #15
 80100ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80100ce:	6022      	str	r2, [r4, #0]
 80100d0:	e7b7      	b.n	8010042 <__hexnan+0x7a>
 80100d2:	2508      	movs	r5, #8
 80100d4:	e7b5      	b.n	8010042 <__hexnan+0x7a>
 80100d6:	9b01      	ldr	r3, [sp, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d0df      	beq.n	801009c <__hexnan+0xd4>
 80100dc:	f04f 32ff 	mov.w	r2, #4294967295
 80100e0:	f1c3 0320 	rsb	r3, r3, #32
 80100e4:	fa22 f303 	lsr.w	r3, r2, r3
 80100e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80100ec:	401a      	ands	r2, r3
 80100ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80100f2:	e7d3      	b.n	801009c <__hexnan+0xd4>
 80100f4:	3f04      	subs	r7, #4
 80100f6:	e7d1      	b.n	801009c <__hexnan+0xd4>
 80100f8:	2004      	movs	r0, #4
 80100fa:	b007      	add	sp, #28
 80100fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010100 <_localeconv_r>:
 8010100:	4800      	ldr	r0, [pc, #0]	; (8010104 <_localeconv_r+0x4>)
 8010102:	4770      	bx	lr
 8010104:	20000164 	.word	0x20000164

08010108 <__retarget_lock_init_recursive>:
 8010108:	4770      	bx	lr

0801010a <__retarget_lock_acquire_recursive>:
 801010a:	4770      	bx	lr

0801010c <__retarget_lock_release_recursive>:
 801010c:	4770      	bx	lr

0801010e <__swhatbuf_r>:
 801010e:	b570      	push	{r4, r5, r6, lr}
 8010110:	460e      	mov	r6, r1
 8010112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010116:	4614      	mov	r4, r2
 8010118:	2900      	cmp	r1, #0
 801011a:	461d      	mov	r5, r3
 801011c:	b096      	sub	sp, #88	; 0x58
 801011e:	da07      	bge.n	8010130 <__swhatbuf_r+0x22>
 8010120:	2300      	movs	r3, #0
 8010122:	602b      	str	r3, [r5, #0]
 8010124:	89b3      	ldrh	r3, [r6, #12]
 8010126:	061a      	lsls	r2, r3, #24
 8010128:	d410      	bmi.n	801014c <__swhatbuf_r+0x3e>
 801012a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801012e:	e00e      	b.n	801014e <__swhatbuf_r+0x40>
 8010130:	466a      	mov	r2, sp
 8010132:	f000 ffad 	bl	8011090 <_fstat_r>
 8010136:	2800      	cmp	r0, #0
 8010138:	dbf2      	blt.n	8010120 <__swhatbuf_r+0x12>
 801013a:	9a01      	ldr	r2, [sp, #4]
 801013c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010140:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010144:	425a      	negs	r2, r3
 8010146:	415a      	adcs	r2, r3
 8010148:	602a      	str	r2, [r5, #0]
 801014a:	e7ee      	b.n	801012a <__swhatbuf_r+0x1c>
 801014c:	2340      	movs	r3, #64	; 0x40
 801014e:	2000      	movs	r0, #0
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	b016      	add	sp, #88	; 0x58
 8010154:	bd70      	pop	{r4, r5, r6, pc}
	...

08010158 <__smakebuf_r>:
 8010158:	898b      	ldrh	r3, [r1, #12]
 801015a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801015c:	079d      	lsls	r5, r3, #30
 801015e:	4606      	mov	r6, r0
 8010160:	460c      	mov	r4, r1
 8010162:	d507      	bpl.n	8010174 <__smakebuf_r+0x1c>
 8010164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	6123      	str	r3, [r4, #16]
 801016c:	2301      	movs	r3, #1
 801016e:	6163      	str	r3, [r4, #20]
 8010170:	b002      	add	sp, #8
 8010172:	bd70      	pop	{r4, r5, r6, pc}
 8010174:	466a      	mov	r2, sp
 8010176:	ab01      	add	r3, sp, #4
 8010178:	f7ff ffc9 	bl	801010e <__swhatbuf_r>
 801017c:	9900      	ldr	r1, [sp, #0]
 801017e:	4605      	mov	r5, r0
 8010180:	4630      	mov	r0, r6
 8010182:	f7fc fb6d 	bl	800c860 <_malloc_r>
 8010186:	b948      	cbnz	r0, 801019c <__smakebuf_r+0x44>
 8010188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801018c:	059a      	lsls	r2, r3, #22
 801018e:	d4ef      	bmi.n	8010170 <__smakebuf_r+0x18>
 8010190:	f023 0303 	bic.w	r3, r3, #3
 8010194:	f043 0302 	orr.w	r3, r3, #2
 8010198:	81a3      	strh	r3, [r4, #12]
 801019a:	e7e3      	b.n	8010164 <__smakebuf_r+0xc>
 801019c:	4b0d      	ldr	r3, [pc, #52]	; (80101d4 <__smakebuf_r+0x7c>)
 801019e:	62b3      	str	r3, [r6, #40]	; 0x28
 80101a0:	89a3      	ldrh	r3, [r4, #12]
 80101a2:	6020      	str	r0, [r4, #0]
 80101a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101a8:	81a3      	strh	r3, [r4, #12]
 80101aa:	9b00      	ldr	r3, [sp, #0]
 80101ac:	6120      	str	r0, [r4, #16]
 80101ae:	6163      	str	r3, [r4, #20]
 80101b0:	9b01      	ldr	r3, [sp, #4]
 80101b2:	b15b      	cbz	r3, 80101cc <__smakebuf_r+0x74>
 80101b4:	4630      	mov	r0, r6
 80101b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101ba:	f000 ff7b 	bl	80110b4 <_isatty_r>
 80101be:	b128      	cbz	r0, 80101cc <__smakebuf_r+0x74>
 80101c0:	89a3      	ldrh	r3, [r4, #12]
 80101c2:	f023 0303 	bic.w	r3, r3, #3
 80101c6:	f043 0301 	orr.w	r3, r3, #1
 80101ca:	81a3      	strh	r3, [r4, #12]
 80101cc:	89a0      	ldrh	r0, [r4, #12]
 80101ce:	4305      	orrs	r5, r0
 80101d0:	81a5      	strh	r5, [r4, #12]
 80101d2:	e7cd      	b.n	8010170 <__smakebuf_r+0x18>
 80101d4:	0800f891 	.word	0x0800f891

080101d8 <__ascii_mbtowc>:
 80101d8:	b082      	sub	sp, #8
 80101da:	b901      	cbnz	r1, 80101de <__ascii_mbtowc+0x6>
 80101dc:	a901      	add	r1, sp, #4
 80101de:	b142      	cbz	r2, 80101f2 <__ascii_mbtowc+0x1a>
 80101e0:	b14b      	cbz	r3, 80101f6 <__ascii_mbtowc+0x1e>
 80101e2:	7813      	ldrb	r3, [r2, #0]
 80101e4:	600b      	str	r3, [r1, #0]
 80101e6:	7812      	ldrb	r2, [r2, #0]
 80101e8:	1e10      	subs	r0, r2, #0
 80101ea:	bf18      	it	ne
 80101ec:	2001      	movne	r0, #1
 80101ee:	b002      	add	sp, #8
 80101f0:	4770      	bx	lr
 80101f2:	4610      	mov	r0, r2
 80101f4:	e7fb      	b.n	80101ee <__ascii_mbtowc+0x16>
 80101f6:	f06f 0001 	mvn.w	r0, #1
 80101fa:	e7f8      	b.n	80101ee <__ascii_mbtowc+0x16>

080101fc <memchr>:
 80101fc:	4603      	mov	r3, r0
 80101fe:	b510      	push	{r4, lr}
 8010200:	b2c9      	uxtb	r1, r1
 8010202:	4402      	add	r2, r0
 8010204:	4293      	cmp	r3, r2
 8010206:	4618      	mov	r0, r3
 8010208:	d101      	bne.n	801020e <memchr+0x12>
 801020a:	2000      	movs	r0, #0
 801020c:	e003      	b.n	8010216 <memchr+0x1a>
 801020e:	7804      	ldrb	r4, [r0, #0]
 8010210:	3301      	adds	r3, #1
 8010212:	428c      	cmp	r4, r1
 8010214:	d1f6      	bne.n	8010204 <memchr+0x8>
 8010216:	bd10      	pop	{r4, pc}

08010218 <memmove>:
 8010218:	4288      	cmp	r0, r1
 801021a:	b510      	push	{r4, lr}
 801021c:	eb01 0402 	add.w	r4, r1, r2
 8010220:	d902      	bls.n	8010228 <memmove+0x10>
 8010222:	4284      	cmp	r4, r0
 8010224:	4623      	mov	r3, r4
 8010226:	d807      	bhi.n	8010238 <memmove+0x20>
 8010228:	1e43      	subs	r3, r0, #1
 801022a:	42a1      	cmp	r1, r4
 801022c:	d008      	beq.n	8010240 <memmove+0x28>
 801022e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010232:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010236:	e7f8      	b.n	801022a <memmove+0x12>
 8010238:	4601      	mov	r1, r0
 801023a:	4402      	add	r2, r0
 801023c:	428a      	cmp	r2, r1
 801023e:	d100      	bne.n	8010242 <memmove+0x2a>
 8010240:	bd10      	pop	{r4, pc}
 8010242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801024a:	e7f7      	b.n	801023c <memmove+0x24>

0801024c <__malloc_lock>:
 801024c:	4801      	ldr	r0, [pc, #4]	; (8010254 <__malloc_lock+0x8>)
 801024e:	f7ff bf5c 	b.w	801010a <__retarget_lock_acquire_recursive>
 8010252:	bf00      	nop
 8010254:	20000774 	.word	0x20000774

08010258 <__malloc_unlock>:
 8010258:	4801      	ldr	r0, [pc, #4]	; (8010260 <__malloc_unlock+0x8>)
 801025a:	f7ff bf57 	b.w	801010c <__retarget_lock_release_recursive>
 801025e:	bf00      	nop
 8010260:	20000774 	.word	0x20000774

08010264 <_Balloc>:
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010268:	4604      	mov	r4, r0
 801026a:	460d      	mov	r5, r1
 801026c:	b976      	cbnz	r6, 801028c <_Balloc+0x28>
 801026e:	2010      	movs	r0, #16
 8010270:	f7fc fa76 	bl	800c760 <malloc>
 8010274:	4602      	mov	r2, r0
 8010276:	6260      	str	r0, [r4, #36]	; 0x24
 8010278:	b920      	cbnz	r0, 8010284 <_Balloc+0x20>
 801027a:	2166      	movs	r1, #102	; 0x66
 801027c:	4b17      	ldr	r3, [pc, #92]	; (80102dc <_Balloc+0x78>)
 801027e:	4818      	ldr	r0, [pc, #96]	; (80102e0 <_Balloc+0x7c>)
 8010280:	f7fc fa14 	bl	800c6ac <__assert_func>
 8010284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010288:	6006      	str	r6, [r0, #0]
 801028a:	60c6      	str	r6, [r0, #12]
 801028c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801028e:	68f3      	ldr	r3, [r6, #12]
 8010290:	b183      	cbz	r3, 80102b4 <_Balloc+0x50>
 8010292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801029a:	b9b8      	cbnz	r0, 80102cc <_Balloc+0x68>
 801029c:	2101      	movs	r1, #1
 801029e:	fa01 f605 	lsl.w	r6, r1, r5
 80102a2:	1d72      	adds	r2, r6, #5
 80102a4:	4620      	mov	r0, r4
 80102a6:	0092      	lsls	r2, r2, #2
 80102a8:	f000 fc94 	bl	8010bd4 <_calloc_r>
 80102ac:	b160      	cbz	r0, 80102c8 <_Balloc+0x64>
 80102ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80102b2:	e00e      	b.n	80102d2 <_Balloc+0x6e>
 80102b4:	2221      	movs	r2, #33	; 0x21
 80102b6:	2104      	movs	r1, #4
 80102b8:	4620      	mov	r0, r4
 80102ba:	f000 fc8b 	bl	8010bd4 <_calloc_r>
 80102be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102c0:	60f0      	str	r0, [r6, #12]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d1e4      	bne.n	8010292 <_Balloc+0x2e>
 80102c8:	2000      	movs	r0, #0
 80102ca:	bd70      	pop	{r4, r5, r6, pc}
 80102cc:	6802      	ldr	r2, [r0, #0]
 80102ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80102d2:	2300      	movs	r3, #0
 80102d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80102d8:	e7f7      	b.n	80102ca <_Balloc+0x66>
 80102da:	bf00      	nop
 80102dc:	0801220e 	.word	0x0801220e
 80102e0:	08012378 	.word	0x08012378

080102e4 <_Bfree>:
 80102e4:	b570      	push	{r4, r5, r6, lr}
 80102e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80102e8:	4605      	mov	r5, r0
 80102ea:	460c      	mov	r4, r1
 80102ec:	b976      	cbnz	r6, 801030c <_Bfree+0x28>
 80102ee:	2010      	movs	r0, #16
 80102f0:	f7fc fa36 	bl	800c760 <malloc>
 80102f4:	4602      	mov	r2, r0
 80102f6:	6268      	str	r0, [r5, #36]	; 0x24
 80102f8:	b920      	cbnz	r0, 8010304 <_Bfree+0x20>
 80102fa:	218a      	movs	r1, #138	; 0x8a
 80102fc:	4b08      	ldr	r3, [pc, #32]	; (8010320 <_Bfree+0x3c>)
 80102fe:	4809      	ldr	r0, [pc, #36]	; (8010324 <_Bfree+0x40>)
 8010300:	f7fc f9d4 	bl	800c6ac <__assert_func>
 8010304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010308:	6006      	str	r6, [r0, #0]
 801030a:	60c6      	str	r6, [r0, #12]
 801030c:	b13c      	cbz	r4, 801031e <_Bfree+0x3a>
 801030e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010310:	6862      	ldr	r2, [r4, #4]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010318:	6021      	str	r1, [r4, #0]
 801031a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801031e:	bd70      	pop	{r4, r5, r6, pc}
 8010320:	0801220e 	.word	0x0801220e
 8010324:	08012378 	.word	0x08012378

08010328 <__multadd>:
 8010328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032c:	4698      	mov	r8, r3
 801032e:	460c      	mov	r4, r1
 8010330:	2300      	movs	r3, #0
 8010332:	690e      	ldr	r6, [r1, #16]
 8010334:	4607      	mov	r7, r0
 8010336:	f101 0014 	add.w	r0, r1, #20
 801033a:	6805      	ldr	r5, [r0, #0]
 801033c:	3301      	adds	r3, #1
 801033e:	b2a9      	uxth	r1, r5
 8010340:	fb02 8101 	mla	r1, r2, r1, r8
 8010344:	0c2d      	lsrs	r5, r5, #16
 8010346:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801034a:	fb02 c505 	mla	r5, r2, r5, ip
 801034e:	b289      	uxth	r1, r1
 8010350:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010354:	429e      	cmp	r6, r3
 8010356:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801035a:	f840 1b04 	str.w	r1, [r0], #4
 801035e:	dcec      	bgt.n	801033a <__multadd+0x12>
 8010360:	f1b8 0f00 	cmp.w	r8, #0
 8010364:	d022      	beq.n	80103ac <__multadd+0x84>
 8010366:	68a3      	ldr	r3, [r4, #8]
 8010368:	42b3      	cmp	r3, r6
 801036a:	dc19      	bgt.n	80103a0 <__multadd+0x78>
 801036c:	6861      	ldr	r1, [r4, #4]
 801036e:	4638      	mov	r0, r7
 8010370:	3101      	adds	r1, #1
 8010372:	f7ff ff77 	bl	8010264 <_Balloc>
 8010376:	4605      	mov	r5, r0
 8010378:	b928      	cbnz	r0, 8010386 <__multadd+0x5e>
 801037a:	4602      	mov	r2, r0
 801037c:	21b5      	movs	r1, #181	; 0xb5
 801037e:	4b0d      	ldr	r3, [pc, #52]	; (80103b4 <__multadd+0x8c>)
 8010380:	480d      	ldr	r0, [pc, #52]	; (80103b8 <__multadd+0x90>)
 8010382:	f7fc f993 	bl	800c6ac <__assert_func>
 8010386:	6922      	ldr	r2, [r4, #16]
 8010388:	f104 010c 	add.w	r1, r4, #12
 801038c:	3202      	adds	r2, #2
 801038e:	0092      	lsls	r2, r2, #2
 8010390:	300c      	adds	r0, #12
 8010392:	f7fc fa03 	bl	800c79c <memcpy>
 8010396:	4621      	mov	r1, r4
 8010398:	4638      	mov	r0, r7
 801039a:	f7ff ffa3 	bl	80102e4 <_Bfree>
 801039e:	462c      	mov	r4, r5
 80103a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80103a4:	3601      	adds	r6, #1
 80103a6:	f8c3 8014 	str.w	r8, [r3, #20]
 80103aa:	6126      	str	r6, [r4, #16]
 80103ac:	4620      	mov	r0, r4
 80103ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b2:	bf00      	nop
 80103b4:	08012284 	.word	0x08012284
 80103b8:	08012378 	.word	0x08012378

080103bc <__s2b>:
 80103bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103c0:	4615      	mov	r5, r2
 80103c2:	2209      	movs	r2, #9
 80103c4:	461f      	mov	r7, r3
 80103c6:	3308      	adds	r3, #8
 80103c8:	460c      	mov	r4, r1
 80103ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80103ce:	4606      	mov	r6, r0
 80103d0:	2201      	movs	r2, #1
 80103d2:	2100      	movs	r1, #0
 80103d4:	429a      	cmp	r2, r3
 80103d6:	db09      	blt.n	80103ec <__s2b+0x30>
 80103d8:	4630      	mov	r0, r6
 80103da:	f7ff ff43 	bl	8010264 <_Balloc>
 80103de:	b940      	cbnz	r0, 80103f2 <__s2b+0x36>
 80103e0:	4602      	mov	r2, r0
 80103e2:	21ce      	movs	r1, #206	; 0xce
 80103e4:	4b18      	ldr	r3, [pc, #96]	; (8010448 <__s2b+0x8c>)
 80103e6:	4819      	ldr	r0, [pc, #100]	; (801044c <__s2b+0x90>)
 80103e8:	f7fc f960 	bl	800c6ac <__assert_func>
 80103ec:	0052      	lsls	r2, r2, #1
 80103ee:	3101      	adds	r1, #1
 80103f0:	e7f0      	b.n	80103d4 <__s2b+0x18>
 80103f2:	9b08      	ldr	r3, [sp, #32]
 80103f4:	2d09      	cmp	r5, #9
 80103f6:	6143      	str	r3, [r0, #20]
 80103f8:	f04f 0301 	mov.w	r3, #1
 80103fc:	6103      	str	r3, [r0, #16]
 80103fe:	dd16      	ble.n	801042e <__s2b+0x72>
 8010400:	f104 0909 	add.w	r9, r4, #9
 8010404:	46c8      	mov	r8, r9
 8010406:	442c      	add	r4, r5
 8010408:	f818 3b01 	ldrb.w	r3, [r8], #1
 801040c:	4601      	mov	r1, r0
 801040e:	220a      	movs	r2, #10
 8010410:	4630      	mov	r0, r6
 8010412:	3b30      	subs	r3, #48	; 0x30
 8010414:	f7ff ff88 	bl	8010328 <__multadd>
 8010418:	45a0      	cmp	r8, r4
 801041a:	d1f5      	bne.n	8010408 <__s2b+0x4c>
 801041c:	f1a5 0408 	sub.w	r4, r5, #8
 8010420:	444c      	add	r4, r9
 8010422:	1b2d      	subs	r5, r5, r4
 8010424:	1963      	adds	r3, r4, r5
 8010426:	42bb      	cmp	r3, r7
 8010428:	db04      	blt.n	8010434 <__s2b+0x78>
 801042a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801042e:	2509      	movs	r5, #9
 8010430:	340a      	adds	r4, #10
 8010432:	e7f6      	b.n	8010422 <__s2b+0x66>
 8010434:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010438:	4601      	mov	r1, r0
 801043a:	220a      	movs	r2, #10
 801043c:	4630      	mov	r0, r6
 801043e:	3b30      	subs	r3, #48	; 0x30
 8010440:	f7ff ff72 	bl	8010328 <__multadd>
 8010444:	e7ee      	b.n	8010424 <__s2b+0x68>
 8010446:	bf00      	nop
 8010448:	08012284 	.word	0x08012284
 801044c:	08012378 	.word	0x08012378

08010450 <__hi0bits>:
 8010450:	0c02      	lsrs	r2, r0, #16
 8010452:	0412      	lsls	r2, r2, #16
 8010454:	4603      	mov	r3, r0
 8010456:	b9ca      	cbnz	r2, 801048c <__hi0bits+0x3c>
 8010458:	0403      	lsls	r3, r0, #16
 801045a:	2010      	movs	r0, #16
 801045c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010460:	bf04      	itt	eq
 8010462:	021b      	lsleq	r3, r3, #8
 8010464:	3008      	addeq	r0, #8
 8010466:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801046a:	bf04      	itt	eq
 801046c:	011b      	lsleq	r3, r3, #4
 801046e:	3004      	addeq	r0, #4
 8010470:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010474:	bf04      	itt	eq
 8010476:	009b      	lsleq	r3, r3, #2
 8010478:	3002      	addeq	r0, #2
 801047a:	2b00      	cmp	r3, #0
 801047c:	db05      	blt.n	801048a <__hi0bits+0x3a>
 801047e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8010482:	f100 0001 	add.w	r0, r0, #1
 8010486:	bf08      	it	eq
 8010488:	2020      	moveq	r0, #32
 801048a:	4770      	bx	lr
 801048c:	2000      	movs	r0, #0
 801048e:	e7e5      	b.n	801045c <__hi0bits+0xc>

08010490 <__lo0bits>:
 8010490:	6803      	ldr	r3, [r0, #0]
 8010492:	4602      	mov	r2, r0
 8010494:	f013 0007 	ands.w	r0, r3, #7
 8010498:	d00b      	beq.n	80104b2 <__lo0bits+0x22>
 801049a:	07d9      	lsls	r1, r3, #31
 801049c:	d422      	bmi.n	80104e4 <__lo0bits+0x54>
 801049e:	0798      	lsls	r0, r3, #30
 80104a0:	bf49      	itett	mi
 80104a2:	085b      	lsrmi	r3, r3, #1
 80104a4:	089b      	lsrpl	r3, r3, #2
 80104a6:	2001      	movmi	r0, #1
 80104a8:	6013      	strmi	r3, [r2, #0]
 80104aa:	bf5c      	itt	pl
 80104ac:	2002      	movpl	r0, #2
 80104ae:	6013      	strpl	r3, [r2, #0]
 80104b0:	4770      	bx	lr
 80104b2:	b299      	uxth	r1, r3
 80104b4:	b909      	cbnz	r1, 80104ba <__lo0bits+0x2a>
 80104b6:	2010      	movs	r0, #16
 80104b8:	0c1b      	lsrs	r3, r3, #16
 80104ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80104be:	bf04      	itt	eq
 80104c0:	0a1b      	lsreq	r3, r3, #8
 80104c2:	3008      	addeq	r0, #8
 80104c4:	0719      	lsls	r1, r3, #28
 80104c6:	bf04      	itt	eq
 80104c8:	091b      	lsreq	r3, r3, #4
 80104ca:	3004      	addeq	r0, #4
 80104cc:	0799      	lsls	r1, r3, #30
 80104ce:	bf04      	itt	eq
 80104d0:	089b      	lsreq	r3, r3, #2
 80104d2:	3002      	addeq	r0, #2
 80104d4:	07d9      	lsls	r1, r3, #31
 80104d6:	d403      	bmi.n	80104e0 <__lo0bits+0x50>
 80104d8:	085b      	lsrs	r3, r3, #1
 80104da:	f100 0001 	add.w	r0, r0, #1
 80104de:	d003      	beq.n	80104e8 <__lo0bits+0x58>
 80104e0:	6013      	str	r3, [r2, #0]
 80104e2:	4770      	bx	lr
 80104e4:	2000      	movs	r0, #0
 80104e6:	4770      	bx	lr
 80104e8:	2020      	movs	r0, #32
 80104ea:	4770      	bx	lr

080104ec <__i2b>:
 80104ec:	b510      	push	{r4, lr}
 80104ee:	460c      	mov	r4, r1
 80104f0:	2101      	movs	r1, #1
 80104f2:	f7ff feb7 	bl	8010264 <_Balloc>
 80104f6:	4602      	mov	r2, r0
 80104f8:	b928      	cbnz	r0, 8010506 <__i2b+0x1a>
 80104fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80104fe:	4b04      	ldr	r3, [pc, #16]	; (8010510 <__i2b+0x24>)
 8010500:	4804      	ldr	r0, [pc, #16]	; (8010514 <__i2b+0x28>)
 8010502:	f7fc f8d3 	bl	800c6ac <__assert_func>
 8010506:	2301      	movs	r3, #1
 8010508:	6144      	str	r4, [r0, #20]
 801050a:	6103      	str	r3, [r0, #16]
 801050c:	bd10      	pop	{r4, pc}
 801050e:	bf00      	nop
 8010510:	08012284 	.word	0x08012284
 8010514:	08012378 	.word	0x08012378

08010518 <__multiply>:
 8010518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051c:	4614      	mov	r4, r2
 801051e:	690a      	ldr	r2, [r1, #16]
 8010520:	6923      	ldr	r3, [r4, #16]
 8010522:	460d      	mov	r5, r1
 8010524:	429a      	cmp	r2, r3
 8010526:	bfbe      	ittt	lt
 8010528:	460b      	movlt	r3, r1
 801052a:	4625      	movlt	r5, r4
 801052c:	461c      	movlt	r4, r3
 801052e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010532:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010536:	68ab      	ldr	r3, [r5, #8]
 8010538:	6869      	ldr	r1, [r5, #4]
 801053a:	eb0a 0709 	add.w	r7, sl, r9
 801053e:	42bb      	cmp	r3, r7
 8010540:	b085      	sub	sp, #20
 8010542:	bfb8      	it	lt
 8010544:	3101      	addlt	r1, #1
 8010546:	f7ff fe8d 	bl	8010264 <_Balloc>
 801054a:	b930      	cbnz	r0, 801055a <__multiply+0x42>
 801054c:	4602      	mov	r2, r0
 801054e:	f240 115d 	movw	r1, #349	; 0x15d
 8010552:	4b41      	ldr	r3, [pc, #260]	; (8010658 <__multiply+0x140>)
 8010554:	4841      	ldr	r0, [pc, #260]	; (801065c <__multiply+0x144>)
 8010556:	f7fc f8a9 	bl	800c6ac <__assert_func>
 801055a:	f100 0614 	add.w	r6, r0, #20
 801055e:	4633      	mov	r3, r6
 8010560:	2200      	movs	r2, #0
 8010562:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010566:	4543      	cmp	r3, r8
 8010568:	d31e      	bcc.n	80105a8 <__multiply+0x90>
 801056a:	f105 0c14 	add.w	ip, r5, #20
 801056e:	f104 0314 	add.w	r3, r4, #20
 8010572:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010576:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801057a:	9202      	str	r2, [sp, #8]
 801057c:	ebac 0205 	sub.w	r2, ip, r5
 8010580:	3a15      	subs	r2, #21
 8010582:	f022 0203 	bic.w	r2, r2, #3
 8010586:	3204      	adds	r2, #4
 8010588:	f105 0115 	add.w	r1, r5, #21
 801058c:	458c      	cmp	ip, r1
 801058e:	bf38      	it	cc
 8010590:	2204      	movcc	r2, #4
 8010592:	9201      	str	r2, [sp, #4]
 8010594:	9a02      	ldr	r2, [sp, #8]
 8010596:	9303      	str	r3, [sp, #12]
 8010598:	429a      	cmp	r2, r3
 801059a:	d808      	bhi.n	80105ae <__multiply+0x96>
 801059c:	2f00      	cmp	r7, #0
 801059e:	dc55      	bgt.n	801064c <__multiply+0x134>
 80105a0:	6107      	str	r7, [r0, #16]
 80105a2:	b005      	add	sp, #20
 80105a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a8:	f843 2b04 	str.w	r2, [r3], #4
 80105ac:	e7db      	b.n	8010566 <__multiply+0x4e>
 80105ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80105b2:	f1ba 0f00 	cmp.w	sl, #0
 80105b6:	d020      	beq.n	80105fa <__multiply+0xe2>
 80105b8:	46b1      	mov	r9, r6
 80105ba:	2200      	movs	r2, #0
 80105bc:	f105 0e14 	add.w	lr, r5, #20
 80105c0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80105c4:	f8d9 b000 	ldr.w	fp, [r9]
 80105c8:	b2a1      	uxth	r1, r4
 80105ca:	fa1f fb8b 	uxth.w	fp, fp
 80105ce:	fb0a b101 	mla	r1, sl, r1, fp
 80105d2:	4411      	add	r1, r2
 80105d4:	f8d9 2000 	ldr.w	r2, [r9]
 80105d8:	0c24      	lsrs	r4, r4, #16
 80105da:	0c12      	lsrs	r2, r2, #16
 80105dc:	fb0a 2404 	mla	r4, sl, r4, r2
 80105e0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80105e4:	b289      	uxth	r1, r1
 80105e6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80105ea:	45f4      	cmp	ip, lr
 80105ec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80105f0:	f849 1b04 	str.w	r1, [r9], #4
 80105f4:	d8e4      	bhi.n	80105c0 <__multiply+0xa8>
 80105f6:	9901      	ldr	r1, [sp, #4]
 80105f8:	5072      	str	r2, [r6, r1]
 80105fa:	9a03      	ldr	r2, [sp, #12]
 80105fc:	3304      	adds	r3, #4
 80105fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010602:	f1b9 0f00 	cmp.w	r9, #0
 8010606:	d01f      	beq.n	8010648 <__multiply+0x130>
 8010608:	46b6      	mov	lr, r6
 801060a:	f04f 0a00 	mov.w	sl, #0
 801060e:	6834      	ldr	r4, [r6, #0]
 8010610:	f105 0114 	add.w	r1, r5, #20
 8010614:	880a      	ldrh	r2, [r1, #0]
 8010616:	f8be b002 	ldrh.w	fp, [lr, #2]
 801061a:	b2a4      	uxth	r4, r4
 801061c:	fb09 b202 	mla	r2, r9, r2, fp
 8010620:	4492      	add	sl, r2
 8010622:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010626:	f84e 4b04 	str.w	r4, [lr], #4
 801062a:	f851 4b04 	ldr.w	r4, [r1], #4
 801062e:	f8be 2000 	ldrh.w	r2, [lr]
 8010632:	0c24      	lsrs	r4, r4, #16
 8010634:	fb09 2404 	mla	r4, r9, r4, r2
 8010638:	458c      	cmp	ip, r1
 801063a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801063e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010642:	d8e7      	bhi.n	8010614 <__multiply+0xfc>
 8010644:	9a01      	ldr	r2, [sp, #4]
 8010646:	50b4      	str	r4, [r6, r2]
 8010648:	3604      	adds	r6, #4
 801064a:	e7a3      	b.n	8010594 <__multiply+0x7c>
 801064c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010650:	2b00      	cmp	r3, #0
 8010652:	d1a5      	bne.n	80105a0 <__multiply+0x88>
 8010654:	3f01      	subs	r7, #1
 8010656:	e7a1      	b.n	801059c <__multiply+0x84>
 8010658:	08012284 	.word	0x08012284
 801065c:	08012378 	.word	0x08012378

08010660 <__pow5mult>:
 8010660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010664:	4615      	mov	r5, r2
 8010666:	f012 0203 	ands.w	r2, r2, #3
 801066a:	4606      	mov	r6, r0
 801066c:	460f      	mov	r7, r1
 801066e:	d007      	beq.n	8010680 <__pow5mult+0x20>
 8010670:	4c25      	ldr	r4, [pc, #148]	; (8010708 <__pow5mult+0xa8>)
 8010672:	3a01      	subs	r2, #1
 8010674:	2300      	movs	r3, #0
 8010676:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801067a:	f7ff fe55 	bl	8010328 <__multadd>
 801067e:	4607      	mov	r7, r0
 8010680:	10ad      	asrs	r5, r5, #2
 8010682:	d03d      	beq.n	8010700 <__pow5mult+0xa0>
 8010684:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010686:	b97c      	cbnz	r4, 80106a8 <__pow5mult+0x48>
 8010688:	2010      	movs	r0, #16
 801068a:	f7fc f869 	bl	800c760 <malloc>
 801068e:	4602      	mov	r2, r0
 8010690:	6270      	str	r0, [r6, #36]	; 0x24
 8010692:	b928      	cbnz	r0, 80106a0 <__pow5mult+0x40>
 8010694:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010698:	4b1c      	ldr	r3, [pc, #112]	; (801070c <__pow5mult+0xac>)
 801069a:	481d      	ldr	r0, [pc, #116]	; (8010710 <__pow5mult+0xb0>)
 801069c:	f7fc f806 	bl	800c6ac <__assert_func>
 80106a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106a4:	6004      	str	r4, [r0, #0]
 80106a6:	60c4      	str	r4, [r0, #12]
 80106a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80106ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106b0:	b94c      	cbnz	r4, 80106c6 <__pow5mult+0x66>
 80106b2:	f240 2171 	movw	r1, #625	; 0x271
 80106b6:	4630      	mov	r0, r6
 80106b8:	f7ff ff18 	bl	80104ec <__i2b>
 80106bc:	2300      	movs	r3, #0
 80106be:	4604      	mov	r4, r0
 80106c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80106c4:	6003      	str	r3, [r0, #0]
 80106c6:	f04f 0900 	mov.w	r9, #0
 80106ca:	07eb      	lsls	r3, r5, #31
 80106cc:	d50a      	bpl.n	80106e4 <__pow5mult+0x84>
 80106ce:	4639      	mov	r1, r7
 80106d0:	4622      	mov	r2, r4
 80106d2:	4630      	mov	r0, r6
 80106d4:	f7ff ff20 	bl	8010518 <__multiply>
 80106d8:	4680      	mov	r8, r0
 80106da:	4639      	mov	r1, r7
 80106dc:	4630      	mov	r0, r6
 80106de:	f7ff fe01 	bl	80102e4 <_Bfree>
 80106e2:	4647      	mov	r7, r8
 80106e4:	106d      	asrs	r5, r5, #1
 80106e6:	d00b      	beq.n	8010700 <__pow5mult+0xa0>
 80106e8:	6820      	ldr	r0, [r4, #0]
 80106ea:	b938      	cbnz	r0, 80106fc <__pow5mult+0x9c>
 80106ec:	4622      	mov	r2, r4
 80106ee:	4621      	mov	r1, r4
 80106f0:	4630      	mov	r0, r6
 80106f2:	f7ff ff11 	bl	8010518 <__multiply>
 80106f6:	6020      	str	r0, [r4, #0]
 80106f8:	f8c0 9000 	str.w	r9, [r0]
 80106fc:	4604      	mov	r4, r0
 80106fe:	e7e4      	b.n	80106ca <__pow5mult+0x6a>
 8010700:	4638      	mov	r0, r7
 8010702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010706:	bf00      	nop
 8010708:	080124c8 	.word	0x080124c8
 801070c:	0801220e 	.word	0x0801220e
 8010710:	08012378 	.word	0x08012378

08010714 <__lshift>:
 8010714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010718:	460c      	mov	r4, r1
 801071a:	4607      	mov	r7, r0
 801071c:	4691      	mov	r9, r2
 801071e:	6923      	ldr	r3, [r4, #16]
 8010720:	6849      	ldr	r1, [r1, #4]
 8010722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010726:	68a3      	ldr	r3, [r4, #8]
 8010728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801072c:	f108 0601 	add.w	r6, r8, #1
 8010730:	42b3      	cmp	r3, r6
 8010732:	db0b      	blt.n	801074c <__lshift+0x38>
 8010734:	4638      	mov	r0, r7
 8010736:	f7ff fd95 	bl	8010264 <_Balloc>
 801073a:	4605      	mov	r5, r0
 801073c:	b948      	cbnz	r0, 8010752 <__lshift+0x3e>
 801073e:	4602      	mov	r2, r0
 8010740:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010744:	4b27      	ldr	r3, [pc, #156]	; (80107e4 <__lshift+0xd0>)
 8010746:	4828      	ldr	r0, [pc, #160]	; (80107e8 <__lshift+0xd4>)
 8010748:	f7fb ffb0 	bl	800c6ac <__assert_func>
 801074c:	3101      	adds	r1, #1
 801074e:	005b      	lsls	r3, r3, #1
 8010750:	e7ee      	b.n	8010730 <__lshift+0x1c>
 8010752:	2300      	movs	r3, #0
 8010754:	f100 0114 	add.w	r1, r0, #20
 8010758:	f100 0210 	add.w	r2, r0, #16
 801075c:	4618      	mov	r0, r3
 801075e:	4553      	cmp	r3, sl
 8010760:	db33      	blt.n	80107ca <__lshift+0xb6>
 8010762:	6920      	ldr	r0, [r4, #16]
 8010764:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010768:	f104 0314 	add.w	r3, r4, #20
 801076c:	f019 091f 	ands.w	r9, r9, #31
 8010770:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010774:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010778:	d02b      	beq.n	80107d2 <__lshift+0xbe>
 801077a:	468a      	mov	sl, r1
 801077c:	2200      	movs	r2, #0
 801077e:	f1c9 0e20 	rsb	lr, r9, #32
 8010782:	6818      	ldr	r0, [r3, #0]
 8010784:	fa00 f009 	lsl.w	r0, r0, r9
 8010788:	4302      	orrs	r2, r0
 801078a:	f84a 2b04 	str.w	r2, [sl], #4
 801078e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010792:	459c      	cmp	ip, r3
 8010794:	fa22 f20e 	lsr.w	r2, r2, lr
 8010798:	d8f3      	bhi.n	8010782 <__lshift+0x6e>
 801079a:	ebac 0304 	sub.w	r3, ip, r4
 801079e:	3b15      	subs	r3, #21
 80107a0:	f023 0303 	bic.w	r3, r3, #3
 80107a4:	3304      	adds	r3, #4
 80107a6:	f104 0015 	add.w	r0, r4, #21
 80107aa:	4584      	cmp	ip, r0
 80107ac:	bf38      	it	cc
 80107ae:	2304      	movcc	r3, #4
 80107b0:	50ca      	str	r2, [r1, r3]
 80107b2:	b10a      	cbz	r2, 80107b8 <__lshift+0xa4>
 80107b4:	f108 0602 	add.w	r6, r8, #2
 80107b8:	3e01      	subs	r6, #1
 80107ba:	4638      	mov	r0, r7
 80107bc:	4621      	mov	r1, r4
 80107be:	612e      	str	r6, [r5, #16]
 80107c0:	f7ff fd90 	bl	80102e4 <_Bfree>
 80107c4:	4628      	mov	r0, r5
 80107c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80107ce:	3301      	adds	r3, #1
 80107d0:	e7c5      	b.n	801075e <__lshift+0x4a>
 80107d2:	3904      	subs	r1, #4
 80107d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80107d8:	459c      	cmp	ip, r3
 80107da:	f841 2f04 	str.w	r2, [r1, #4]!
 80107de:	d8f9      	bhi.n	80107d4 <__lshift+0xc0>
 80107e0:	e7ea      	b.n	80107b8 <__lshift+0xa4>
 80107e2:	bf00      	nop
 80107e4:	08012284 	.word	0x08012284
 80107e8:	08012378 	.word	0x08012378

080107ec <__mcmp>:
 80107ec:	4603      	mov	r3, r0
 80107ee:	690a      	ldr	r2, [r1, #16]
 80107f0:	6900      	ldr	r0, [r0, #16]
 80107f2:	b530      	push	{r4, r5, lr}
 80107f4:	1a80      	subs	r0, r0, r2
 80107f6:	d10d      	bne.n	8010814 <__mcmp+0x28>
 80107f8:	3314      	adds	r3, #20
 80107fa:	3114      	adds	r1, #20
 80107fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010800:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010804:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010808:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801080c:	4295      	cmp	r5, r2
 801080e:	d002      	beq.n	8010816 <__mcmp+0x2a>
 8010810:	d304      	bcc.n	801081c <__mcmp+0x30>
 8010812:	2001      	movs	r0, #1
 8010814:	bd30      	pop	{r4, r5, pc}
 8010816:	42a3      	cmp	r3, r4
 8010818:	d3f4      	bcc.n	8010804 <__mcmp+0x18>
 801081a:	e7fb      	b.n	8010814 <__mcmp+0x28>
 801081c:	f04f 30ff 	mov.w	r0, #4294967295
 8010820:	e7f8      	b.n	8010814 <__mcmp+0x28>
	...

08010824 <__mdiff>:
 8010824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010828:	460c      	mov	r4, r1
 801082a:	4606      	mov	r6, r0
 801082c:	4611      	mov	r1, r2
 801082e:	4620      	mov	r0, r4
 8010830:	4692      	mov	sl, r2
 8010832:	f7ff ffdb 	bl	80107ec <__mcmp>
 8010836:	1e05      	subs	r5, r0, #0
 8010838:	d111      	bne.n	801085e <__mdiff+0x3a>
 801083a:	4629      	mov	r1, r5
 801083c:	4630      	mov	r0, r6
 801083e:	f7ff fd11 	bl	8010264 <_Balloc>
 8010842:	4602      	mov	r2, r0
 8010844:	b928      	cbnz	r0, 8010852 <__mdiff+0x2e>
 8010846:	f240 2132 	movw	r1, #562	; 0x232
 801084a:	4b3c      	ldr	r3, [pc, #240]	; (801093c <__mdiff+0x118>)
 801084c:	483c      	ldr	r0, [pc, #240]	; (8010940 <__mdiff+0x11c>)
 801084e:	f7fb ff2d 	bl	800c6ac <__assert_func>
 8010852:	2301      	movs	r3, #1
 8010854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010858:	4610      	mov	r0, r2
 801085a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085e:	bfa4      	itt	ge
 8010860:	4653      	movge	r3, sl
 8010862:	46a2      	movge	sl, r4
 8010864:	4630      	mov	r0, r6
 8010866:	f8da 1004 	ldr.w	r1, [sl, #4]
 801086a:	bfa6      	itte	ge
 801086c:	461c      	movge	r4, r3
 801086e:	2500      	movge	r5, #0
 8010870:	2501      	movlt	r5, #1
 8010872:	f7ff fcf7 	bl	8010264 <_Balloc>
 8010876:	4602      	mov	r2, r0
 8010878:	b918      	cbnz	r0, 8010882 <__mdiff+0x5e>
 801087a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801087e:	4b2f      	ldr	r3, [pc, #188]	; (801093c <__mdiff+0x118>)
 8010880:	e7e4      	b.n	801084c <__mdiff+0x28>
 8010882:	f100 0814 	add.w	r8, r0, #20
 8010886:	f8da 7010 	ldr.w	r7, [sl, #16]
 801088a:	60c5      	str	r5, [r0, #12]
 801088c:	f04f 0c00 	mov.w	ip, #0
 8010890:	f10a 0514 	add.w	r5, sl, #20
 8010894:	f10a 0010 	add.w	r0, sl, #16
 8010898:	46c2      	mov	sl, r8
 801089a:	6926      	ldr	r6, [r4, #16]
 801089c:	f104 0914 	add.w	r9, r4, #20
 80108a0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80108a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80108a8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80108ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80108b0:	fa1f f18b 	uxth.w	r1, fp
 80108b4:	4461      	add	r1, ip
 80108b6:	fa1f fc83 	uxth.w	ip, r3
 80108ba:	0c1b      	lsrs	r3, r3, #16
 80108bc:	eba1 010c 	sub.w	r1, r1, ip
 80108c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80108c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80108c8:	b289      	uxth	r1, r1
 80108ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80108ce:	454e      	cmp	r6, r9
 80108d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80108d4:	f84a 3b04 	str.w	r3, [sl], #4
 80108d8:	d8e6      	bhi.n	80108a8 <__mdiff+0x84>
 80108da:	1b33      	subs	r3, r6, r4
 80108dc:	3b15      	subs	r3, #21
 80108de:	f023 0303 	bic.w	r3, r3, #3
 80108e2:	3415      	adds	r4, #21
 80108e4:	3304      	adds	r3, #4
 80108e6:	42a6      	cmp	r6, r4
 80108e8:	bf38      	it	cc
 80108ea:	2304      	movcc	r3, #4
 80108ec:	441d      	add	r5, r3
 80108ee:	4443      	add	r3, r8
 80108f0:	461e      	mov	r6, r3
 80108f2:	462c      	mov	r4, r5
 80108f4:	4574      	cmp	r4, lr
 80108f6:	d30e      	bcc.n	8010916 <__mdiff+0xf2>
 80108f8:	f10e 0103 	add.w	r1, lr, #3
 80108fc:	1b49      	subs	r1, r1, r5
 80108fe:	f021 0103 	bic.w	r1, r1, #3
 8010902:	3d03      	subs	r5, #3
 8010904:	45ae      	cmp	lr, r5
 8010906:	bf38      	it	cc
 8010908:	2100      	movcc	r1, #0
 801090a:	4419      	add	r1, r3
 801090c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010910:	b18b      	cbz	r3, 8010936 <__mdiff+0x112>
 8010912:	6117      	str	r7, [r2, #16]
 8010914:	e7a0      	b.n	8010858 <__mdiff+0x34>
 8010916:	f854 8b04 	ldr.w	r8, [r4], #4
 801091a:	fa1f f188 	uxth.w	r1, r8
 801091e:	4461      	add	r1, ip
 8010920:	1408      	asrs	r0, r1, #16
 8010922:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8010926:	b289      	uxth	r1, r1
 8010928:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801092c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010930:	f846 1b04 	str.w	r1, [r6], #4
 8010934:	e7de      	b.n	80108f4 <__mdiff+0xd0>
 8010936:	3f01      	subs	r7, #1
 8010938:	e7e8      	b.n	801090c <__mdiff+0xe8>
 801093a:	bf00      	nop
 801093c:	08012284 	.word	0x08012284
 8010940:	08012378 	.word	0x08012378

08010944 <__ulp>:
 8010944:	4b11      	ldr	r3, [pc, #68]	; (801098c <__ulp+0x48>)
 8010946:	400b      	ands	r3, r1
 8010948:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801094c:	2b00      	cmp	r3, #0
 801094e:	dd02      	ble.n	8010956 <__ulp+0x12>
 8010950:	2000      	movs	r0, #0
 8010952:	4619      	mov	r1, r3
 8010954:	4770      	bx	lr
 8010956:	425b      	negs	r3, r3
 8010958:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801095c:	f04f 0000 	mov.w	r0, #0
 8010960:	f04f 0100 	mov.w	r1, #0
 8010964:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010968:	da04      	bge.n	8010974 <__ulp+0x30>
 801096a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801096e:	fa43 f102 	asr.w	r1, r3, r2
 8010972:	4770      	bx	lr
 8010974:	f1a2 0314 	sub.w	r3, r2, #20
 8010978:	2b1e      	cmp	r3, #30
 801097a:	bfd6      	itet	le
 801097c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010980:	2301      	movgt	r3, #1
 8010982:	fa22 f303 	lsrle.w	r3, r2, r3
 8010986:	4618      	mov	r0, r3
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop
 801098c:	7ff00000 	.word	0x7ff00000

08010990 <__b2d>:
 8010990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010994:	6907      	ldr	r7, [r0, #16]
 8010996:	f100 0914 	add.w	r9, r0, #20
 801099a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801099e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80109a2:	f1a7 0804 	sub.w	r8, r7, #4
 80109a6:	4630      	mov	r0, r6
 80109a8:	f7ff fd52 	bl	8010450 <__hi0bits>
 80109ac:	f1c0 0320 	rsb	r3, r0, #32
 80109b0:	280a      	cmp	r0, #10
 80109b2:	600b      	str	r3, [r1, #0]
 80109b4:	491f      	ldr	r1, [pc, #124]	; (8010a34 <__b2d+0xa4>)
 80109b6:	dc17      	bgt.n	80109e8 <__b2d+0x58>
 80109b8:	45c1      	cmp	r9, r8
 80109ba:	bf28      	it	cs
 80109bc:	2200      	movcs	r2, #0
 80109be:	f1c0 0c0b 	rsb	ip, r0, #11
 80109c2:	fa26 f30c 	lsr.w	r3, r6, ip
 80109c6:	bf38      	it	cc
 80109c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80109cc:	ea43 0501 	orr.w	r5, r3, r1
 80109d0:	f100 0315 	add.w	r3, r0, #21
 80109d4:	fa06 f303 	lsl.w	r3, r6, r3
 80109d8:	fa22 f20c 	lsr.w	r2, r2, ip
 80109dc:	ea43 0402 	orr.w	r4, r3, r2
 80109e0:	4620      	mov	r0, r4
 80109e2:	4629      	mov	r1, r5
 80109e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109e8:	45c1      	cmp	r9, r8
 80109ea:	bf2e      	itee	cs
 80109ec:	2200      	movcs	r2, #0
 80109ee:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80109f2:	f1a7 0808 	subcc.w	r8, r7, #8
 80109f6:	f1b0 030b 	subs.w	r3, r0, #11
 80109fa:	d016      	beq.n	8010a2a <__b2d+0x9a>
 80109fc:	f1c3 0720 	rsb	r7, r3, #32
 8010a00:	fa22 f107 	lsr.w	r1, r2, r7
 8010a04:	45c8      	cmp	r8, r9
 8010a06:	fa06 f603 	lsl.w	r6, r6, r3
 8010a0a:	ea46 0601 	orr.w	r6, r6, r1
 8010a0e:	bf94      	ite	ls
 8010a10:	2100      	movls	r1, #0
 8010a12:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8010a16:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8010a1a:	fa02 f003 	lsl.w	r0, r2, r3
 8010a1e:	40f9      	lsrs	r1, r7
 8010a20:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010a24:	ea40 0401 	orr.w	r4, r0, r1
 8010a28:	e7da      	b.n	80109e0 <__b2d+0x50>
 8010a2a:	4614      	mov	r4, r2
 8010a2c:	ea46 0501 	orr.w	r5, r6, r1
 8010a30:	e7d6      	b.n	80109e0 <__b2d+0x50>
 8010a32:	bf00      	nop
 8010a34:	3ff00000 	.word	0x3ff00000

08010a38 <__d2b>:
 8010a38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010a3c:	2101      	movs	r1, #1
 8010a3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010a42:	4690      	mov	r8, r2
 8010a44:	461d      	mov	r5, r3
 8010a46:	f7ff fc0d 	bl	8010264 <_Balloc>
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	b930      	cbnz	r0, 8010a5c <__d2b+0x24>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	f240 310a 	movw	r1, #778	; 0x30a
 8010a54:	4b24      	ldr	r3, [pc, #144]	; (8010ae8 <__d2b+0xb0>)
 8010a56:	4825      	ldr	r0, [pc, #148]	; (8010aec <__d2b+0xb4>)
 8010a58:	f7fb fe28 	bl	800c6ac <__assert_func>
 8010a5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010a60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010a64:	bb2d      	cbnz	r5, 8010ab2 <__d2b+0x7a>
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	f1b8 0300 	subs.w	r3, r8, #0
 8010a6c:	d026      	beq.n	8010abc <__d2b+0x84>
 8010a6e:	4668      	mov	r0, sp
 8010a70:	9300      	str	r3, [sp, #0]
 8010a72:	f7ff fd0d 	bl	8010490 <__lo0bits>
 8010a76:	9900      	ldr	r1, [sp, #0]
 8010a78:	b1f0      	cbz	r0, 8010ab8 <__d2b+0x80>
 8010a7a:	9a01      	ldr	r2, [sp, #4]
 8010a7c:	f1c0 0320 	rsb	r3, r0, #32
 8010a80:	fa02 f303 	lsl.w	r3, r2, r3
 8010a84:	430b      	orrs	r3, r1
 8010a86:	40c2      	lsrs	r2, r0
 8010a88:	6163      	str	r3, [r4, #20]
 8010a8a:	9201      	str	r2, [sp, #4]
 8010a8c:	9b01      	ldr	r3, [sp, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	bf14      	ite	ne
 8010a92:	2102      	movne	r1, #2
 8010a94:	2101      	moveq	r1, #1
 8010a96:	61a3      	str	r3, [r4, #24]
 8010a98:	6121      	str	r1, [r4, #16]
 8010a9a:	b1c5      	cbz	r5, 8010ace <__d2b+0x96>
 8010a9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010aa0:	4405      	add	r5, r0
 8010aa2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010aa6:	603d      	str	r5, [r7, #0]
 8010aa8:	6030      	str	r0, [r6, #0]
 8010aaa:	4620      	mov	r0, r4
 8010aac:	b002      	add	sp, #8
 8010aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ab6:	e7d6      	b.n	8010a66 <__d2b+0x2e>
 8010ab8:	6161      	str	r1, [r4, #20]
 8010aba:	e7e7      	b.n	8010a8c <__d2b+0x54>
 8010abc:	a801      	add	r0, sp, #4
 8010abe:	f7ff fce7 	bl	8010490 <__lo0bits>
 8010ac2:	2101      	movs	r1, #1
 8010ac4:	9b01      	ldr	r3, [sp, #4]
 8010ac6:	6121      	str	r1, [r4, #16]
 8010ac8:	6163      	str	r3, [r4, #20]
 8010aca:	3020      	adds	r0, #32
 8010acc:	e7e5      	b.n	8010a9a <__d2b+0x62>
 8010ace:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010ad2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ad6:	6038      	str	r0, [r7, #0]
 8010ad8:	6918      	ldr	r0, [r3, #16]
 8010ada:	f7ff fcb9 	bl	8010450 <__hi0bits>
 8010ade:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010ae2:	6031      	str	r1, [r6, #0]
 8010ae4:	e7e1      	b.n	8010aaa <__d2b+0x72>
 8010ae6:	bf00      	nop
 8010ae8:	08012284 	.word	0x08012284
 8010aec:	08012378 	.word	0x08012378

08010af0 <__ratio>:
 8010af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af4:	4688      	mov	r8, r1
 8010af6:	4669      	mov	r1, sp
 8010af8:	4681      	mov	r9, r0
 8010afa:	f7ff ff49 	bl	8010990 <__b2d>
 8010afe:	460f      	mov	r7, r1
 8010b00:	4604      	mov	r4, r0
 8010b02:	460d      	mov	r5, r1
 8010b04:	4640      	mov	r0, r8
 8010b06:	a901      	add	r1, sp, #4
 8010b08:	f7ff ff42 	bl	8010990 <__b2d>
 8010b0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b10:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010b14:	468b      	mov	fp, r1
 8010b16:	eba3 0c02 	sub.w	ip, r3, r2
 8010b1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010b1e:	1a9b      	subs	r3, r3, r2
 8010b20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	bfd5      	itete	le
 8010b28:	460a      	movle	r2, r1
 8010b2a:	462a      	movgt	r2, r5
 8010b2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010b30:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010b34:	bfd8      	it	le
 8010b36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010b3a:	465b      	mov	r3, fp
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	4639      	mov	r1, r7
 8010b40:	4620      	mov	r0, r4
 8010b42:	f7ef fdfd 	bl	8000740 <__aeabi_ddiv>
 8010b46:	b003      	add	sp, #12
 8010b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b4c <__copybits>:
 8010b4c:	3901      	subs	r1, #1
 8010b4e:	b570      	push	{r4, r5, r6, lr}
 8010b50:	1149      	asrs	r1, r1, #5
 8010b52:	6914      	ldr	r4, [r2, #16]
 8010b54:	3101      	adds	r1, #1
 8010b56:	f102 0314 	add.w	r3, r2, #20
 8010b5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010b5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010b62:	1f05      	subs	r5, r0, #4
 8010b64:	42a3      	cmp	r3, r4
 8010b66:	d30c      	bcc.n	8010b82 <__copybits+0x36>
 8010b68:	1aa3      	subs	r3, r4, r2
 8010b6a:	3b11      	subs	r3, #17
 8010b6c:	f023 0303 	bic.w	r3, r3, #3
 8010b70:	3211      	adds	r2, #17
 8010b72:	42a2      	cmp	r2, r4
 8010b74:	bf88      	it	hi
 8010b76:	2300      	movhi	r3, #0
 8010b78:	4418      	add	r0, r3
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	4288      	cmp	r0, r1
 8010b7e:	d305      	bcc.n	8010b8c <__copybits+0x40>
 8010b80:	bd70      	pop	{r4, r5, r6, pc}
 8010b82:	f853 6b04 	ldr.w	r6, [r3], #4
 8010b86:	f845 6f04 	str.w	r6, [r5, #4]!
 8010b8a:	e7eb      	b.n	8010b64 <__copybits+0x18>
 8010b8c:	f840 3b04 	str.w	r3, [r0], #4
 8010b90:	e7f4      	b.n	8010b7c <__copybits+0x30>

08010b92 <__any_on>:
 8010b92:	f100 0214 	add.w	r2, r0, #20
 8010b96:	6900      	ldr	r0, [r0, #16]
 8010b98:	114b      	asrs	r3, r1, #5
 8010b9a:	4298      	cmp	r0, r3
 8010b9c:	b510      	push	{r4, lr}
 8010b9e:	db11      	blt.n	8010bc4 <__any_on+0x32>
 8010ba0:	dd0a      	ble.n	8010bb8 <__any_on+0x26>
 8010ba2:	f011 011f 	ands.w	r1, r1, #31
 8010ba6:	d007      	beq.n	8010bb8 <__any_on+0x26>
 8010ba8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010bac:	fa24 f001 	lsr.w	r0, r4, r1
 8010bb0:	fa00 f101 	lsl.w	r1, r0, r1
 8010bb4:	428c      	cmp	r4, r1
 8010bb6:	d10b      	bne.n	8010bd0 <__any_on+0x3e>
 8010bb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d803      	bhi.n	8010bc8 <__any_on+0x36>
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	bd10      	pop	{r4, pc}
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	e7f7      	b.n	8010bb8 <__any_on+0x26>
 8010bc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010bcc:	2900      	cmp	r1, #0
 8010bce:	d0f5      	beq.n	8010bbc <__any_on+0x2a>
 8010bd0:	2001      	movs	r0, #1
 8010bd2:	e7f6      	b.n	8010bc2 <__any_on+0x30>

08010bd4 <_calloc_r>:
 8010bd4:	b538      	push	{r3, r4, r5, lr}
 8010bd6:	fb02 f501 	mul.w	r5, r2, r1
 8010bda:	4629      	mov	r1, r5
 8010bdc:	f7fb fe40 	bl	800c860 <_malloc_r>
 8010be0:	4604      	mov	r4, r0
 8010be2:	b118      	cbz	r0, 8010bec <_calloc_r+0x18>
 8010be4:	462a      	mov	r2, r5
 8010be6:	2100      	movs	r1, #0
 8010be8:	f7fb fde6 	bl	800c7b8 <memset>
 8010bec:	4620      	mov	r0, r4
 8010bee:	bd38      	pop	{r3, r4, r5, pc}

08010bf0 <_realloc_r>:
 8010bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bf2:	4607      	mov	r7, r0
 8010bf4:	4614      	mov	r4, r2
 8010bf6:	460e      	mov	r6, r1
 8010bf8:	b921      	cbnz	r1, 8010c04 <_realloc_r+0x14>
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010c00:	f7fb be2e 	b.w	800c860 <_malloc_r>
 8010c04:	b922      	cbnz	r2, 8010c10 <_realloc_r+0x20>
 8010c06:	f7fb fddf 	bl	800c7c8 <_free_r>
 8010c0a:	4625      	mov	r5, r4
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c10:	f000 fa72 	bl	80110f8 <_malloc_usable_size_r>
 8010c14:	42a0      	cmp	r0, r4
 8010c16:	d20f      	bcs.n	8010c38 <_realloc_r+0x48>
 8010c18:	4621      	mov	r1, r4
 8010c1a:	4638      	mov	r0, r7
 8010c1c:	f7fb fe20 	bl	800c860 <_malloc_r>
 8010c20:	4605      	mov	r5, r0
 8010c22:	2800      	cmp	r0, #0
 8010c24:	d0f2      	beq.n	8010c0c <_realloc_r+0x1c>
 8010c26:	4631      	mov	r1, r6
 8010c28:	4622      	mov	r2, r4
 8010c2a:	f7fb fdb7 	bl	800c79c <memcpy>
 8010c2e:	4631      	mov	r1, r6
 8010c30:	4638      	mov	r0, r7
 8010c32:	f7fb fdc9 	bl	800c7c8 <_free_r>
 8010c36:	e7e9      	b.n	8010c0c <_realloc_r+0x1c>
 8010c38:	4635      	mov	r5, r6
 8010c3a:	e7e7      	b.n	8010c0c <_realloc_r+0x1c>

08010c3c <__ssputs_r>:
 8010c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c40:	688e      	ldr	r6, [r1, #8]
 8010c42:	4682      	mov	sl, r0
 8010c44:	429e      	cmp	r6, r3
 8010c46:	460c      	mov	r4, r1
 8010c48:	4690      	mov	r8, r2
 8010c4a:	461f      	mov	r7, r3
 8010c4c:	d838      	bhi.n	8010cc0 <__ssputs_r+0x84>
 8010c4e:	898a      	ldrh	r2, [r1, #12]
 8010c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c54:	d032      	beq.n	8010cbc <__ssputs_r+0x80>
 8010c56:	6825      	ldr	r5, [r4, #0]
 8010c58:	6909      	ldr	r1, [r1, #16]
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	eba5 0901 	sub.w	r9, r5, r1
 8010c60:	6965      	ldr	r5, [r4, #20]
 8010c62:	444b      	add	r3, r9
 8010c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c6c:	106d      	asrs	r5, r5, #1
 8010c6e:	429d      	cmp	r5, r3
 8010c70:	bf38      	it	cc
 8010c72:	461d      	movcc	r5, r3
 8010c74:	0553      	lsls	r3, r2, #21
 8010c76:	d531      	bpl.n	8010cdc <__ssputs_r+0xa0>
 8010c78:	4629      	mov	r1, r5
 8010c7a:	f7fb fdf1 	bl	800c860 <_malloc_r>
 8010c7e:	4606      	mov	r6, r0
 8010c80:	b950      	cbnz	r0, 8010c98 <__ssputs_r+0x5c>
 8010c82:	230c      	movs	r3, #12
 8010c84:	f04f 30ff 	mov.w	r0, #4294967295
 8010c88:	f8ca 3000 	str.w	r3, [sl]
 8010c8c:	89a3      	ldrh	r3, [r4, #12]
 8010c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c92:	81a3      	strh	r3, [r4, #12]
 8010c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c98:	464a      	mov	r2, r9
 8010c9a:	6921      	ldr	r1, [r4, #16]
 8010c9c:	f7fb fd7e 	bl	800c79c <memcpy>
 8010ca0:	89a3      	ldrh	r3, [r4, #12]
 8010ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010caa:	81a3      	strh	r3, [r4, #12]
 8010cac:	6126      	str	r6, [r4, #16]
 8010cae:	444e      	add	r6, r9
 8010cb0:	6026      	str	r6, [r4, #0]
 8010cb2:	463e      	mov	r6, r7
 8010cb4:	6165      	str	r5, [r4, #20]
 8010cb6:	eba5 0509 	sub.w	r5, r5, r9
 8010cba:	60a5      	str	r5, [r4, #8]
 8010cbc:	42be      	cmp	r6, r7
 8010cbe:	d900      	bls.n	8010cc2 <__ssputs_r+0x86>
 8010cc0:	463e      	mov	r6, r7
 8010cc2:	4632      	mov	r2, r6
 8010cc4:	4641      	mov	r1, r8
 8010cc6:	6820      	ldr	r0, [r4, #0]
 8010cc8:	f7ff faa6 	bl	8010218 <memmove>
 8010ccc:	68a3      	ldr	r3, [r4, #8]
 8010cce:	6822      	ldr	r2, [r4, #0]
 8010cd0:	1b9b      	subs	r3, r3, r6
 8010cd2:	4432      	add	r2, r6
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	60a3      	str	r3, [r4, #8]
 8010cd8:	6022      	str	r2, [r4, #0]
 8010cda:	e7db      	b.n	8010c94 <__ssputs_r+0x58>
 8010cdc:	462a      	mov	r2, r5
 8010cde:	f7ff ff87 	bl	8010bf0 <_realloc_r>
 8010ce2:	4606      	mov	r6, r0
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d1e1      	bne.n	8010cac <__ssputs_r+0x70>
 8010ce8:	4650      	mov	r0, sl
 8010cea:	6921      	ldr	r1, [r4, #16]
 8010cec:	f7fb fd6c 	bl	800c7c8 <_free_r>
 8010cf0:	e7c7      	b.n	8010c82 <__ssputs_r+0x46>
	...

08010cf4 <_svfiprintf_r>:
 8010cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf8:	4698      	mov	r8, r3
 8010cfa:	898b      	ldrh	r3, [r1, #12]
 8010cfc:	4607      	mov	r7, r0
 8010cfe:	061b      	lsls	r3, r3, #24
 8010d00:	460d      	mov	r5, r1
 8010d02:	4614      	mov	r4, r2
 8010d04:	b09d      	sub	sp, #116	; 0x74
 8010d06:	d50e      	bpl.n	8010d26 <_svfiprintf_r+0x32>
 8010d08:	690b      	ldr	r3, [r1, #16]
 8010d0a:	b963      	cbnz	r3, 8010d26 <_svfiprintf_r+0x32>
 8010d0c:	2140      	movs	r1, #64	; 0x40
 8010d0e:	f7fb fda7 	bl	800c860 <_malloc_r>
 8010d12:	6028      	str	r0, [r5, #0]
 8010d14:	6128      	str	r0, [r5, #16]
 8010d16:	b920      	cbnz	r0, 8010d22 <_svfiprintf_r+0x2e>
 8010d18:	230c      	movs	r3, #12
 8010d1a:	603b      	str	r3, [r7, #0]
 8010d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d20:	e0d1      	b.n	8010ec6 <_svfiprintf_r+0x1d2>
 8010d22:	2340      	movs	r3, #64	; 0x40
 8010d24:	616b      	str	r3, [r5, #20]
 8010d26:	2300      	movs	r3, #0
 8010d28:	9309      	str	r3, [sp, #36]	; 0x24
 8010d2a:	2320      	movs	r3, #32
 8010d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d30:	2330      	movs	r3, #48	; 0x30
 8010d32:	f04f 0901 	mov.w	r9, #1
 8010d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010ee0 <_svfiprintf_r+0x1ec>
 8010d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d42:	4623      	mov	r3, r4
 8010d44:	469a      	mov	sl, r3
 8010d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d4a:	b10a      	cbz	r2, 8010d50 <_svfiprintf_r+0x5c>
 8010d4c:	2a25      	cmp	r2, #37	; 0x25
 8010d4e:	d1f9      	bne.n	8010d44 <_svfiprintf_r+0x50>
 8010d50:	ebba 0b04 	subs.w	fp, sl, r4
 8010d54:	d00b      	beq.n	8010d6e <_svfiprintf_r+0x7a>
 8010d56:	465b      	mov	r3, fp
 8010d58:	4622      	mov	r2, r4
 8010d5a:	4629      	mov	r1, r5
 8010d5c:	4638      	mov	r0, r7
 8010d5e:	f7ff ff6d 	bl	8010c3c <__ssputs_r>
 8010d62:	3001      	adds	r0, #1
 8010d64:	f000 80aa 	beq.w	8010ebc <_svfiprintf_r+0x1c8>
 8010d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d6a:	445a      	add	r2, fp
 8010d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8010d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	f000 80a2 	beq.w	8010ebc <_svfiprintf_r+0x1c8>
 8010d78:	2300      	movs	r3, #0
 8010d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d82:	f10a 0a01 	add.w	sl, sl, #1
 8010d86:	9304      	str	r3, [sp, #16]
 8010d88:	9307      	str	r3, [sp, #28]
 8010d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8010d90:	4654      	mov	r4, sl
 8010d92:	2205      	movs	r2, #5
 8010d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d98:	4851      	ldr	r0, [pc, #324]	; (8010ee0 <_svfiprintf_r+0x1ec>)
 8010d9a:	f7ff fa2f 	bl	80101fc <memchr>
 8010d9e:	9a04      	ldr	r2, [sp, #16]
 8010da0:	b9d8      	cbnz	r0, 8010dda <_svfiprintf_r+0xe6>
 8010da2:	06d0      	lsls	r0, r2, #27
 8010da4:	bf44      	itt	mi
 8010da6:	2320      	movmi	r3, #32
 8010da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dac:	0711      	lsls	r1, r2, #28
 8010dae:	bf44      	itt	mi
 8010db0:	232b      	movmi	r3, #43	; 0x2b
 8010db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010db6:	f89a 3000 	ldrb.w	r3, [sl]
 8010dba:	2b2a      	cmp	r3, #42	; 0x2a
 8010dbc:	d015      	beq.n	8010dea <_svfiprintf_r+0xf6>
 8010dbe:	4654      	mov	r4, sl
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	f04f 0c0a 	mov.w	ip, #10
 8010dc6:	9a07      	ldr	r2, [sp, #28]
 8010dc8:	4621      	mov	r1, r4
 8010dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dce:	3b30      	subs	r3, #48	; 0x30
 8010dd0:	2b09      	cmp	r3, #9
 8010dd2:	d94e      	bls.n	8010e72 <_svfiprintf_r+0x17e>
 8010dd4:	b1b0      	cbz	r0, 8010e04 <_svfiprintf_r+0x110>
 8010dd6:	9207      	str	r2, [sp, #28]
 8010dd8:	e014      	b.n	8010e04 <_svfiprintf_r+0x110>
 8010dda:	eba0 0308 	sub.w	r3, r0, r8
 8010dde:	fa09 f303 	lsl.w	r3, r9, r3
 8010de2:	4313      	orrs	r3, r2
 8010de4:	46a2      	mov	sl, r4
 8010de6:	9304      	str	r3, [sp, #16]
 8010de8:	e7d2      	b.n	8010d90 <_svfiprintf_r+0x9c>
 8010dea:	9b03      	ldr	r3, [sp, #12]
 8010dec:	1d19      	adds	r1, r3, #4
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	9103      	str	r1, [sp, #12]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	bfbb      	ittet	lt
 8010df6:	425b      	neglt	r3, r3
 8010df8:	f042 0202 	orrlt.w	r2, r2, #2
 8010dfc:	9307      	strge	r3, [sp, #28]
 8010dfe:	9307      	strlt	r3, [sp, #28]
 8010e00:	bfb8      	it	lt
 8010e02:	9204      	strlt	r2, [sp, #16]
 8010e04:	7823      	ldrb	r3, [r4, #0]
 8010e06:	2b2e      	cmp	r3, #46	; 0x2e
 8010e08:	d10c      	bne.n	8010e24 <_svfiprintf_r+0x130>
 8010e0a:	7863      	ldrb	r3, [r4, #1]
 8010e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8010e0e:	d135      	bne.n	8010e7c <_svfiprintf_r+0x188>
 8010e10:	9b03      	ldr	r3, [sp, #12]
 8010e12:	3402      	adds	r4, #2
 8010e14:	1d1a      	adds	r2, r3, #4
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	9203      	str	r2, [sp, #12]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	bfb8      	it	lt
 8010e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e22:	9305      	str	r3, [sp, #20]
 8010e24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ef0 <_svfiprintf_r+0x1fc>
 8010e28:	2203      	movs	r2, #3
 8010e2a:	4650      	mov	r0, sl
 8010e2c:	7821      	ldrb	r1, [r4, #0]
 8010e2e:	f7ff f9e5 	bl	80101fc <memchr>
 8010e32:	b140      	cbz	r0, 8010e46 <_svfiprintf_r+0x152>
 8010e34:	2340      	movs	r3, #64	; 0x40
 8010e36:	eba0 000a 	sub.w	r0, r0, sl
 8010e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8010e3e:	9b04      	ldr	r3, [sp, #16]
 8010e40:	3401      	adds	r4, #1
 8010e42:	4303      	orrs	r3, r0
 8010e44:	9304      	str	r3, [sp, #16]
 8010e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e4a:	2206      	movs	r2, #6
 8010e4c:	4825      	ldr	r0, [pc, #148]	; (8010ee4 <_svfiprintf_r+0x1f0>)
 8010e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e52:	f7ff f9d3 	bl	80101fc <memchr>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	d038      	beq.n	8010ecc <_svfiprintf_r+0x1d8>
 8010e5a:	4b23      	ldr	r3, [pc, #140]	; (8010ee8 <_svfiprintf_r+0x1f4>)
 8010e5c:	bb1b      	cbnz	r3, 8010ea6 <_svfiprintf_r+0x1b2>
 8010e5e:	9b03      	ldr	r3, [sp, #12]
 8010e60:	3307      	adds	r3, #7
 8010e62:	f023 0307 	bic.w	r3, r3, #7
 8010e66:	3308      	adds	r3, #8
 8010e68:	9303      	str	r3, [sp, #12]
 8010e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e6c:	4433      	add	r3, r6
 8010e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e70:	e767      	b.n	8010d42 <_svfiprintf_r+0x4e>
 8010e72:	460c      	mov	r4, r1
 8010e74:	2001      	movs	r0, #1
 8010e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e7a:	e7a5      	b.n	8010dc8 <_svfiprintf_r+0xd4>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	f04f 0c0a 	mov.w	ip, #10
 8010e82:	4619      	mov	r1, r3
 8010e84:	3401      	adds	r4, #1
 8010e86:	9305      	str	r3, [sp, #20]
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e8e:	3a30      	subs	r2, #48	; 0x30
 8010e90:	2a09      	cmp	r2, #9
 8010e92:	d903      	bls.n	8010e9c <_svfiprintf_r+0x1a8>
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d0c5      	beq.n	8010e24 <_svfiprintf_r+0x130>
 8010e98:	9105      	str	r1, [sp, #20]
 8010e9a:	e7c3      	b.n	8010e24 <_svfiprintf_r+0x130>
 8010e9c:	4604      	mov	r4, r0
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ea4:	e7f0      	b.n	8010e88 <_svfiprintf_r+0x194>
 8010ea6:	ab03      	add	r3, sp, #12
 8010ea8:	9300      	str	r3, [sp, #0]
 8010eaa:	462a      	mov	r2, r5
 8010eac:	4638      	mov	r0, r7
 8010eae:	4b0f      	ldr	r3, [pc, #60]	; (8010eec <_svfiprintf_r+0x1f8>)
 8010eb0:	a904      	add	r1, sp, #16
 8010eb2:	f7fb ff25 	bl	800cd00 <_printf_float>
 8010eb6:	1c42      	adds	r2, r0, #1
 8010eb8:	4606      	mov	r6, r0
 8010eba:	d1d6      	bne.n	8010e6a <_svfiprintf_r+0x176>
 8010ebc:	89ab      	ldrh	r3, [r5, #12]
 8010ebe:	065b      	lsls	r3, r3, #25
 8010ec0:	f53f af2c 	bmi.w	8010d1c <_svfiprintf_r+0x28>
 8010ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ec6:	b01d      	add	sp, #116	; 0x74
 8010ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ecc:	ab03      	add	r3, sp, #12
 8010ece:	9300      	str	r3, [sp, #0]
 8010ed0:	462a      	mov	r2, r5
 8010ed2:	4638      	mov	r0, r7
 8010ed4:	4b05      	ldr	r3, [pc, #20]	; (8010eec <_svfiprintf_r+0x1f8>)
 8010ed6:	a904      	add	r1, sp, #16
 8010ed8:	f7fc f9ae 	bl	800d238 <_printf_i>
 8010edc:	e7eb      	b.n	8010eb6 <_svfiprintf_r+0x1c2>
 8010ede:	bf00      	nop
 8010ee0:	08012060 	.word	0x08012060
 8010ee4:	0801206a 	.word	0x0801206a
 8010ee8:	0800cd01 	.word	0x0800cd01
 8010eec:	08010c3d 	.word	0x08010c3d
 8010ef0:	08012066 	.word	0x08012066

08010ef4 <nan>:
 8010ef4:	2000      	movs	r0, #0
 8010ef6:	4901      	ldr	r1, [pc, #4]	; (8010efc <nan+0x8>)
 8010ef8:	4770      	bx	lr
 8010efa:	bf00      	nop
 8010efc:	7ff80000 	.word	0x7ff80000

08010f00 <_raise_r>:
 8010f00:	291f      	cmp	r1, #31
 8010f02:	b538      	push	{r3, r4, r5, lr}
 8010f04:	4604      	mov	r4, r0
 8010f06:	460d      	mov	r5, r1
 8010f08:	d904      	bls.n	8010f14 <_raise_r+0x14>
 8010f0a:	2316      	movs	r3, #22
 8010f0c:	6003      	str	r3, [r0, #0]
 8010f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f12:	bd38      	pop	{r3, r4, r5, pc}
 8010f14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f16:	b112      	cbz	r2, 8010f1e <_raise_r+0x1e>
 8010f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f1c:	b94b      	cbnz	r3, 8010f32 <_raise_r+0x32>
 8010f1e:	4620      	mov	r0, r4
 8010f20:	f000 f830 	bl	8010f84 <_getpid_r>
 8010f24:	462a      	mov	r2, r5
 8010f26:	4601      	mov	r1, r0
 8010f28:	4620      	mov	r0, r4
 8010f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f2e:	f000 b817 	b.w	8010f60 <_kill_r>
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	d00a      	beq.n	8010f4c <_raise_r+0x4c>
 8010f36:	1c59      	adds	r1, r3, #1
 8010f38:	d103      	bne.n	8010f42 <_raise_r+0x42>
 8010f3a:	2316      	movs	r3, #22
 8010f3c:	6003      	str	r3, [r0, #0]
 8010f3e:	2001      	movs	r0, #1
 8010f40:	e7e7      	b.n	8010f12 <_raise_r+0x12>
 8010f42:	2400      	movs	r4, #0
 8010f44:	4628      	mov	r0, r5
 8010f46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f4a:	4798      	blx	r3
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	e7e0      	b.n	8010f12 <_raise_r+0x12>

08010f50 <raise>:
 8010f50:	4b02      	ldr	r3, [pc, #8]	; (8010f5c <raise+0xc>)
 8010f52:	4601      	mov	r1, r0
 8010f54:	6818      	ldr	r0, [r3, #0]
 8010f56:	f7ff bfd3 	b.w	8010f00 <_raise_r>
 8010f5a:	bf00      	nop
 8010f5c:	2000000c 	.word	0x2000000c

08010f60 <_kill_r>:
 8010f60:	b538      	push	{r3, r4, r5, lr}
 8010f62:	2300      	movs	r3, #0
 8010f64:	4d06      	ldr	r5, [pc, #24]	; (8010f80 <_kill_r+0x20>)
 8010f66:	4604      	mov	r4, r0
 8010f68:	4608      	mov	r0, r1
 8010f6a:	4611      	mov	r1, r2
 8010f6c:	602b      	str	r3, [r5, #0]
 8010f6e:	f7f8 fb14 	bl	800959a <_kill>
 8010f72:	1c43      	adds	r3, r0, #1
 8010f74:	d102      	bne.n	8010f7c <_kill_r+0x1c>
 8010f76:	682b      	ldr	r3, [r5, #0]
 8010f78:	b103      	cbz	r3, 8010f7c <_kill_r+0x1c>
 8010f7a:	6023      	str	r3, [r4, #0]
 8010f7c:	bd38      	pop	{r3, r4, r5, pc}
 8010f7e:	bf00      	nop
 8010f80:	2000077c 	.word	0x2000077c

08010f84 <_getpid_r>:
 8010f84:	f7f8 bb02 	b.w	800958c <_getpid>

08010f88 <__sread>:
 8010f88:	b510      	push	{r4, lr}
 8010f8a:	460c      	mov	r4, r1
 8010f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f90:	f000 f8ba 	bl	8011108 <_read_r>
 8010f94:	2800      	cmp	r0, #0
 8010f96:	bfab      	itete	ge
 8010f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8010f9c:	181b      	addge	r3, r3, r0
 8010f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010fa2:	bfac      	ite	ge
 8010fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8010fa6:	81a3      	strhlt	r3, [r4, #12]
 8010fa8:	bd10      	pop	{r4, pc}

08010faa <__swrite>:
 8010faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fae:	461f      	mov	r7, r3
 8010fb0:	898b      	ldrh	r3, [r1, #12]
 8010fb2:	4605      	mov	r5, r0
 8010fb4:	05db      	lsls	r3, r3, #23
 8010fb6:	460c      	mov	r4, r1
 8010fb8:	4616      	mov	r6, r2
 8010fba:	d505      	bpl.n	8010fc8 <__swrite+0x1e>
 8010fbc:	2302      	movs	r3, #2
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc4:	f000 f886 	bl	80110d4 <_lseek_r>
 8010fc8:	89a3      	ldrh	r3, [r4, #12]
 8010fca:	4632      	mov	r2, r6
 8010fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010fd0:	81a3      	strh	r3, [r4, #12]
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	463b      	mov	r3, r7
 8010fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fde:	f000 b835 	b.w	801104c <_write_r>

08010fe2 <__sseek>:
 8010fe2:	b510      	push	{r4, lr}
 8010fe4:	460c      	mov	r4, r1
 8010fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fea:	f000 f873 	bl	80110d4 <_lseek_r>
 8010fee:	1c43      	adds	r3, r0, #1
 8010ff0:	89a3      	ldrh	r3, [r4, #12]
 8010ff2:	bf15      	itete	ne
 8010ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ffe:	81a3      	strheq	r3, [r4, #12]
 8011000:	bf18      	it	ne
 8011002:	81a3      	strhne	r3, [r4, #12]
 8011004:	bd10      	pop	{r4, pc}

08011006 <__sclose>:
 8011006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801100a:	f000 b831 	b.w	8011070 <_close_r>

0801100e <strncmp>:
 801100e:	b510      	push	{r4, lr}
 8011010:	b16a      	cbz	r2, 801102e <strncmp+0x20>
 8011012:	3901      	subs	r1, #1
 8011014:	1884      	adds	r4, r0, r2
 8011016:	f810 3b01 	ldrb.w	r3, [r0], #1
 801101a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801101e:	4293      	cmp	r3, r2
 8011020:	d103      	bne.n	801102a <strncmp+0x1c>
 8011022:	42a0      	cmp	r0, r4
 8011024:	d001      	beq.n	801102a <strncmp+0x1c>
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1f5      	bne.n	8011016 <strncmp+0x8>
 801102a:	1a98      	subs	r0, r3, r2
 801102c:	bd10      	pop	{r4, pc}
 801102e:	4610      	mov	r0, r2
 8011030:	e7fc      	b.n	801102c <strncmp+0x1e>

08011032 <__ascii_wctomb>:
 8011032:	4603      	mov	r3, r0
 8011034:	4608      	mov	r0, r1
 8011036:	b141      	cbz	r1, 801104a <__ascii_wctomb+0x18>
 8011038:	2aff      	cmp	r2, #255	; 0xff
 801103a:	d904      	bls.n	8011046 <__ascii_wctomb+0x14>
 801103c:	228a      	movs	r2, #138	; 0x8a
 801103e:	f04f 30ff 	mov.w	r0, #4294967295
 8011042:	601a      	str	r2, [r3, #0]
 8011044:	4770      	bx	lr
 8011046:	2001      	movs	r0, #1
 8011048:	700a      	strb	r2, [r1, #0]
 801104a:	4770      	bx	lr

0801104c <_write_r>:
 801104c:	b538      	push	{r3, r4, r5, lr}
 801104e:	4604      	mov	r4, r0
 8011050:	4608      	mov	r0, r1
 8011052:	4611      	mov	r1, r2
 8011054:	2200      	movs	r2, #0
 8011056:	4d05      	ldr	r5, [pc, #20]	; (801106c <_write_r+0x20>)
 8011058:	602a      	str	r2, [r5, #0]
 801105a:	461a      	mov	r2, r3
 801105c:	f7f8 fad4 	bl	8009608 <_write>
 8011060:	1c43      	adds	r3, r0, #1
 8011062:	d102      	bne.n	801106a <_write_r+0x1e>
 8011064:	682b      	ldr	r3, [r5, #0]
 8011066:	b103      	cbz	r3, 801106a <_write_r+0x1e>
 8011068:	6023      	str	r3, [r4, #0]
 801106a:	bd38      	pop	{r3, r4, r5, pc}
 801106c:	2000077c 	.word	0x2000077c

08011070 <_close_r>:
 8011070:	b538      	push	{r3, r4, r5, lr}
 8011072:	2300      	movs	r3, #0
 8011074:	4d05      	ldr	r5, [pc, #20]	; (801108c <_close_r+0x1c>)
 8011076:	4604      	mov	r4, r0
 8011078:	4608      	mov	r0, r1
 801107a:	602b      	str	r3, [r5, #0]
 801107c:	f7f8 fae0 	bl	8009640 <_close>
 8011080:	1c43      	adds	r3, r0, #1
 8011082:	d102      	bne.n	801108a <_close_r+0x1a>
 8011084:	682b      	ldr	r3, [r5, #0]
 8011086:	b103      	cbz	r3, 801108a <_close_r+0x1a>
 8011088:	6023      	str	r3, [r4, #0]
 801108a:	bd38      	pop	{r3, r4, r5, pc}
 801108c:	2000077c 	.word	0x2000077c

08011090 <_fstat_r>:
 8011090:	b538      	push	{r3, r4, r5, lr}
 8011092:	2300      	movs	r3, #0
 8011094:	4d06      	ldr	r5, [pc, #24]	; (80110b0 <_fstat_r+0x20>)
 8011096:	4604      	mov	r4, r0
 8011098:	4608      	mov	r0, r1
 801109a:	4611      	mov	r1, r2
 801109c:	602b      	str	r3, [r5, #0]
 801109e:	f7f8 fada 	bl	8009656 <_fstat>
 80110a2:	1c43      	adds	r3, r0, #1
 80110a4:	d102      	bne.n	80110ac <_fstat_r+0x1c>
 80110a6:	682b      	ldr	r3, [r5, #0]
 80110a8:	b103      	cbz	r3, 80110ac <_fstat_r+0x1c>
 80110aa:	6023      	str	r3, [r4, #0]
 80110ac:	bd38      	pop	{r3, r4, r5, pc}
 80110ae:	bf00      	nop
 80110b0:	2000077c 	.word	0x2000077c

080110b4 <_isatty_r>:
 80110b4:	b538      	push	{r3, r4, r5, lr}
 80110b6:	2300      	movs	r3, #0
 80110b8:	4d05      	ldr	r5, [pc, #20]	; (80110d0 <_isatty_r+0x1c>)
 80110ba:	4604      	mov	r4, r0
 80110bc:	4608      	mov	r0, r1
 80110be:	602b      	str	r3, [r5, #0]
 80110c0:	f7f8 fad8 	bl	8009674 <_isatty>
 80110c4:	1c43      	adds	r3, r0, #1
 80110c6:	d102      	bne.n	80110ce <_isatty_r+0x1a>
 80110c8:	682b      	ldr	r3, [r5, #0]
 80110ca:	b103      	cbz	r3, 80110ce <_isatty_r+0x1a>
 80110cc:	6023      	str	r3, [r4, #0]
 80110ce:	bd38      	pop	{r3, r4, r5, pc}
 80110d0:	2000077c 	.word	0x2000077c

080110d4 <_lseek_r>:
 80110d4:	b538      	push	{r3, r4, r5, lr}
 80110d6:	4604      	mov	r4, r0
 80110d8:	4608      	mov	r0, r1
 80110da:	4611      	mov	r1, r2
 80110dc:	2200      	movs	r2, #0
 80110de:	4d05      	ldr	r5, [pc, #20]	; (80110f4 <_lseek_r+0x20>)
 80110e0:	602a      	str	r2, [r5, #0]
 80110e2:	461a      	mov	r2, r3
 80110e4:	f7f8 fad0 	bl	8009688 <_lseek>
 80110e8:	1c43      	adds	r3, r0, #1
 80110ea:	d102      	bne.n	80110f2 <_lseek_r+0x1e>
 80110ec:	682b      	ldr	r3, [r5, #0]
 80110ee:	b103      	cbz	r3, 80110f2 <_lseek_r+0x1e>
 80110f0:	6023      	str	r3, [r4, #0]
 80110f2:	bd38      	pop	{r3, r4, r5, pc}
 80110f4:	2000077c 	.word	0x2000077c

080110f8 <_malloc_usable_size_r>:
 80110f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110fc:	1f18      	subs	r0, r3, #4
 80110fe:	2b00      	cmp	r3, #0
 8011100:	bfbc      	itt	lt
 8011102:	580b      	ldrlt	r3, [r1, r0]
 8011104:	18c0      	addlt	r0, r0, r3
 8011106:	4770      	bx	lr

08011108 <_read_r>:
 8011108:	b538      	push	{r3, r4, r5, lr}
 801110a:	4604      	mov	r4, r0
 801110c:	4608      	mov	r0, r1
 801110e:	4611      	mov	r1, r2
 8011110:	2200      	movs	r2, #0
 8011112:	4d05      	ldr	r5, [pc, #20]	; (8011128 <_read_r+0x20>)
 8011114:	602a      	str	r2, [r5, #0]
 8011116:	461a      	mov	r2, r3
 8011118:	f7f8 fa59 	bl	80095ce <_read>
 801111c:	1c43      	adds	r3, r0, #1
 801111e:	d102      	bne.n	8011126 <_read_r+0x1e>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	b103      	cbz	r3, 8011126 <_read_r+0x1e>
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	2000077c 	.word	0x2000077c

0801112c <_init>:
 801112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801112e:	bf00      	nop
 8011130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011132:	bc08      	pop	{r3}
 8011134:	469e      	mov	lr, r3
 8011136:	4770      	bx	lr

08011138 <_fini>:
 8011138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801113a:	bf00      	nop
 801113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801113e:	bc08      	pop	{r3}
 8011140:	469e      	mov	lr, r3
 8011142:	4770      	bx	lr
